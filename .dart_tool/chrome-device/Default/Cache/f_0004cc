define(['dart_sdk'], (function load__packages__get__get_rx__src__rx_stream__rx_stream_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var rx_stream = Object.create(dart.library);
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T$ = Object.create({
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))()
  });
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = Object.create({
    _: () => S
  });
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/get-3.24.0/lib/get_rx/src/rx_stream/get_stream.dart",
    "package:get/get_rx/src/rx_stream/rx_stream.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/get-3.24.0/lib/get_rx/src/rx_stream/mini_stream.dart"
  ];
  var onListen$ = dart.privateName(rx_stream, "GetStream.onListen");
  var onPause$ = dart.privateName(rx_stream, "GetStream.onPause");
  var onResume$ = dart.privateName(rx_stream, "GetStream.onResume");
  var onCancel$ = dart.privateName(rx_stream, "GetStream.onCancel");
  var _onData = dart.privateName(rx_stream, "_onData");
  var _isBusy = dart.privateName(rx_stream, "_isBusy");
  var _value = dart.privateName(rx_stream, "_value");
  var _data = dart.privateName(rx_stream, "_data");
  var _notifyData = dart.privateName(rx_stream, "_notifyData");
  var _onError = dart.privateName(rx_stream, "_onError");
  var _onDone = dart.privateName(rx_stream, "_onDone");
  var _notifyError = dart.privateName(rx_stream, "_notifyError");
  var _notifyDone = dart.privateName(rx_stream, "_notifyDone");
  const _is_GetStream_default = Symbol('_is_GetStream_default');
  rx_stream.GetStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var LightSubscriptionOfTL = () => (LightSubscriptionOfTL = dart.constFn(rx_stream.LightSubscription$(TL())))();
    var LightSubscriptionLOfTL = () => (LightSubscriptionLOfTL = dart.constFn(dart.legacy(LightSubscriptionOfTL())))();
    var JSArrayOfLightSubscriptionLOfTL = () => (JSArrayOfLightSubscriptionLOfTL = dart.constFn(_interceptors.JSArray$(LightSubscriptionLOfTL())))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    var TLToLvoid = () => (TLToLvoid = dart.constFn(dart.legacy(TLTovoid())))();
    var GetStreamTransformationOfTL = () => (GetStreamTransformationOfTL = dart.constFn(rx_stream.GetStreamTransformation$(TL())))();
    class GetStream extends core.Object {
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        this[onListen$] = value;
      }
      get onPause() {
        return this[onPause$];
      }
      set onPause(value) {
        this[onPause$] = value;
      }
      get onResume() {
        return this[onResume$];
      }
      set onResume(value) {
        this[onResume$] = value;
      }
      get onCancel() {
        return this[onCancel$];
      }
      set onCancel(value) {
        this[onCancel$] = value;
      }
      removeSubscription(subs) {
        LightSubscriptionLOfTL().as(subs);
        return async.async(T$.boolL(), (function* removeSubscription() {
          let t0;
          if (!dart.test(this[_isBusy])) {
            return this[_onData][$remove](subs);
          } else {
            yield async.Future.delayed(core.Duration.zero);
            t0 = this[_onData];
            return t0 == null ? null : t0[$remove](subs);
          }
        }).bind(this));
      }
      addSubscription(subs) {
        LightSubscriptionLOfTL().as(subs);
        return async.async(dart.void, (function* addSubscription() {
          if (!dart.test(this[_isBusy])) {
            return this[_onData][$add](subs);
          } else {
            yield async.Future.delayed(core.Duration.zero);
            return this[_onData][$add](subs);
          }
        }).bind(this));
      }
      get length() {
        let t0;
        t0 = this[_onData];
        return t0 == null ? null : t0[$length];
      }
      get hasListeners() {
        return this[_onData][$isNotEmpty];
      }
      [_notifyData](data) {
        let t0;
        this[_isBusy] = true;
        for (let item of this[_onData]) {
          if (!dart.test(item.isPaused)) {
            t0 = TLToLvoid().as(item[_data]);
            t0 == null ? null : t0(data);
          }
        }
        this[_isBusy] = false;
      }
      [_notifyError](error, stackTrace = null) {
        let t0, t0$, t0$0;
        if (!!dart.test(this.isClosed)) dart.assertFailed("You cannot add errors to a closed stream.", I[0], 54, 12, "!isClosed");
        this[_isBusy] = true;
        let itemsToRemove = JSArrayOfLightSubscriptionLOfTL().of([]);
        for (let item of this[_onData]) {
          if (!dart.test(item.isPaused)) {
            if (stackTrace != null) {
              t0 = item[_onError];
              t0 == null ? null : dart.dcall(t0, [error, stackTrace]);
            } else {
              t0$ = item[_onError];
              t0$ == null ? null : dart.dcall(t0$, [error]);
            }
            if (dart.test(item.cancelOnError)) {
              itemsToRemove[$add](item);
              item.pause();
              t0$0 = item[_onDone];
              t0$0 == null ? null : t0$0();
            }
          }
        }
        for (let item of itemsToRemove) {
          this[_onData][$remove](item);
        }
        this[_isBusy] = false;
      }
      [_notifyDone]() {
        let t0;
        if (!!dart.test(this.isClosed)) dart.assertFailed("You cannot close a closed stream.", I[0], 80, 12, "!isClosed");
        this[_isBusy] = true;
        for (let item of this[_onData]) {
          if (!dart.test(item.isPaused)) {
            t0 = item[_onDone];
            t0 == null ? null : t0();
          }
        }
        this[_isBusy] = false;
      }
      get value() {
        return this[_value];
      }
      add(event) {
        TL().as(event);
        if (!!dart.test(this.isClosed)) dart.assertFailed("You cannot add event to closed Stream", I[0], 95, 12, "!isClosed");
        this[_value] = event;
        this[_notifyData](event);
      }
      get isClosed() {
        return this[_onData] == null;
      }
      addError(error, stackTrace = null) {
        if (!!dart.test(this.isClosed)) dart.assertFailed("You cannot add error to closed Stream", I[0], 103, 12, "!isClosed");
        this[_notifyError](error, stackTrace);
      }
      close() {
        if (!!dart.test(this.isClosed)) dart.assertFailed("You cannot close a closed Stream", I[0], 108, 12, "!isClosed");
        this[_notifyDone]();
        this[_onData] = null;
        this[_isBusy] = null;
        this[_value] = null;
      }
      listen(onData, opts) {
        let t0, t0$;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let subs = (t0 = new (LightSubscriptionOfTL()).new(dart.bind(this, 'removeSubscription'), {onPause: this.onPause, onResume: this.onResume, onCancel: this.onCancel}), (() => {
          t0.onData(onData);
          t0.onError(onError);
          t0.onDone(onDone);
          t0.cancelOnError = cancelOnError;
          return t0;
        })());
        this.addSubscription(subs);
        t0$ = this.onListen;
        t0$ == null ? null : t0$();
        return subs;
      }
      get stream() {
        return new (GetStreamTransformationOfTL()).new(dart.bind(this, 'addSubscription'), dart.bind(this, 'removeSubscription'));
      }
    }
    (GetStream.new = function(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      this[_onData] = JSArrayOfLightSubscriptionLOfTL().of([]);
      this[_isBusy] = false;
      this[_value] = null;
      this[onListen$] = onListen;
      this[onPause$] = onPause;
      this[onResume$] = onResume;
      this[onCancel$] = onCancel;
      ;
    }).prototype = GetStream.prototype;
    dart.addTypeTests(GetStream);
    GetStream.prototype[_is_GetStream_default] = true;
    dart.addTypeCaches(GetStream);
    dart.setMethodSignature(GetStream, () => ({
      __proto__: dart.getMethods(GetStream.__proto__),
      removeSubscription: dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(core.bool))), [dart.legacy(core.Object)]),
      addSubscription: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_notifyData]: dart.fnType(dart.void, [dart.legacy(T)]),
      [_notifyError]: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      [_notifyDone]: dart.fnType(dart.void, []),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, []),
      listen: dart.fnType(dart.legacy(rx_stream.LightSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {})
    }));
    dart.setGetterSignature(GetStream, () => ({
      __proto__: dart.getGetters(GetStream.__proto__),
      length: dart.legacy(core.int),
      hasListeners: dart.legacy(core.bool),
      value: dart.legacy(T),
      isClosed: dart.legacy(core.bool),
      stream: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setLibraryUri(GetStream, I[1]);
    dart.setFieldSignature(GetStream, () => ({
      __proto__: dart.getFields(GetStream.__proto__),
      onListen: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      onPause: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      onResume: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      onCancel: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_onData]: dart.fieldType(dart.legacy(core.List$(dart.legacy(rx_stream.LightSubscription$(dart.legacy(T)))))),
      [_isBusy]: dart.fieldType(dart.legacy(core.bool)),
      [_value]: dart.fieldType(dart.legacy(T))
    }));
    return GetStream;
  });
  rx_stream.GetStream = rx_stream.GetStream$();
  dart.addTypeTests(rx_stream.GetStream, _is_GetStream_default);
  var onPause$0 = dart.privateName(rx_stream, "LightSubscription.onPause");
  var onResume$0 = dart.privateName(rx_stream, "LightSubscription.onResume");
  var onCancel$0 = dart.privateName(rx_stream, "LightSubscription.onCancel");
  var cancelOnError = dart.privateName(rx_stream, "LightSubscription.cancelOnError");
  var _isPaused = dart.privateName(rx_stream, "_isPaused");
  var _removeSubscription$ = dart.privateName(rx_stream, "_removeSubscription");
  const _is_LightSubscription_default = Symbol('_is_LightSubscription_default');
  rx_stream.LightSubscription$ = dart.generic(T => {
    class LightSubscription extends async.StreamSubscription$(dart.legacy(T)) {
      get onPause() {
        return this[onPause$0];
      }
      set onPause(value) {
        super.onPause = value;
      }
      get onResume() {
        return this[onResume$0];
      }
      set onResume(value) {
        super.onResume = value;
      }
      get onCancel() {
        return this[onCancel$0];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      get cancelOnError() {
        return this[cancelOnError];
      }
      set cancelOnError(value) {
        this[cancelOnError] = value;
      }
      cancel() {
        let t0;
        this[_removeSubscription$](this);
        t0 = this.onCancel;
        t0 == null ? null : t0();
        return T$.FutureOfvoid().value();
      }
      onData(handleData) {
        return this[_data] = handleData;
      }
      onError(handleError) {
        return this[_onError] = handleError;
      }
      onDone(handleDone) {
        return this[_onDone] = handleDone;
      }
      pause(resumeSignal = null) {
        let t0;
        this[_isPaused] = true;
        t0 = this.onPause;
        t0 == null ? null : t0();
      }
      resume() {
        let t0;
        this[_isPaused] = false;
        t0 = this.onResume;
        t0 == null ? null : t0();
      }
      get isPaused() {
        return this[_isPaused];
      }
      asFuture(E, futureValue = null) {
        return async.Future$(dart.legacy(E)).value(futureValue);
      }
    }
    (LightSubscription.new = function(_removeSubscription, opts) {
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      this[cancelOnError] = false;
      this[_data] = null;
      this[_onError] = null;
      this[_onDone] = null;
      this[_isPaused] = false;
      this[_removeSubscription$] = _removeSubscription;
      this[onPause$0] = onPause;
      this[onResume$0] = onResume;
      this[onCancel$0] = onCancel;
      ;
    }).prototype = LightSubscription.prototype;
    dart.addTypeTests(LightSubscription);
    LightSubscription.prototype[_is_LightSubscription_default] = true;
    dart.addTypeCaches(LightSubscription);
    dart.setMethodSignature(LightSubscription, () => ({
      __proto__: dart.getMethods(LightSubscription.__proto__),
      cancel: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
      onData: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]),
      onError: dart.fnType(dart.void, [dart.legacy(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
      pause: dart.fnType(dart.void, [], [dart.legacy(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      asFuture: dart.gFnType(E => [dart.legacy(async.Future$(dart.legacy(E))), [], [dart.legacy(E)]])
    }));
    dart.setGetterSignature(LightSubscription, () => ({
      __proto__: dart.getGetters(LightSubscription.__proto__),
      isPaused: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(LightSubscription, I[1]);
    dart.setFieldSignature(LightSubscription, () => ({
      __proto__: dart.getFields(LightSubscription.__proto__),
      [_removeSubscription$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(core.bool))), [dart.legacy(rx_stream.LightSubscription$(dart.legacy(T)))]))),
      onPause: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onResume: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onCancel: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      cancelOnError: dart.fieldType(dart.legacy(core.bool)),
      [_data]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))),
      [_onError]: dart.fieldType(dart.legacy(core.Function)),
      [_onDone]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_isPaused]: dart.fieldType(dart.legacy(core.bool))
    }));
    return LightSubscription;
  });
  rx_stream.LightSubscription = rx_stream.LightSubscription$();
  dart.addTypeTests(rx_stream.LightSubscription, _is_LightSubscription_default);
  var _addSubscription$ = dart.privateName(rx_stream, "_addSubscription");
  const _is_GetStreamTransformation_default = Symbol('_is_GetStreamTransformation_default');
  rx_stream.GetStreamTransformation$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var LightSubscriptionOfTL = () => (LightSubscriptionOfTL = dart.constFn(rx_stream.LightSubscription$(TL())))();
    class GetStreamTransformation extends async.Stream$(dart.legacy(T)) {
      listen(onData, opts) {
        let t0, t0$;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let subs = (t0 = new (LightSubscriptionOfTL()).new(this[_removeSubscription$]), (() => {
          t0.onData(onData);
          t0.onError(onError);
          t0.onDone(onDone);
          return t0;
        })());
        t0$ = subs;
        this[_addSubscription$](t0$);
        return subs;
      }
    }
    (GetStreamTransformation.new = function(_addSubscription, _removeSubscription) {
      this[_addSubscription$] = _addSubscription;
      this[_removeSubscription$] = _removeSubscription;
      GetStreamTransformation.__proto__.new.call(this);
      ;
    }).prototype = GetStreamTransformation.prototype;
    dart.addTypeTests(GetStreamTransformation);
    GetStreamTransformation.prototype[_is_GetStreamTransformation_default] = true;
    dart.addTypeCaches(GetStreamTransformation);
    dart.setMethodSignature(GetStreamTransformation, () => ({
      __proto__: dart.getMethods(GetStreamTransformation.__proto__),
      listen: dart.fnType(dart.legacy(rx_stream.LightSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {})
    }));
    dart.setLibraryUri(GetStreamTransformation, I[1]);
    dart.setFieldSignature(GetStreamTransformation, () => ({
      __proto__: dart.getFields(GetStreamTransformation.__proto__),
      [_addSubscription$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(rx_stream.LightSubscription$(dart.legacy(T)))]))),
      [_removeSubscription$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(core.bool))), [dart.legacy(rx_stream.LightSubscription$(dart.legacy(T)))])))
    }));
    return GetStreamTransformation;
  });
  rx_stream.GetStreamTransformation = rx_stream.GetStreamTransformation$();
  dart.addTypeTests(rx_stream.GetStreamTransformation, _is_GetStreamTransformation_default);
  var data$ = dart.privateName(rx_stream, "Node.data");
  var next$ = dart.privateName(rx_stream, "Node.next");
  const _is_Node_default = Symbol('_is_Node_default');
  rx_stream.Node$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var NodeOfTL = () => (NodeOfTL = dart.constFn(rx_stream.Node$(TL())))();
    var NodeLOfTL = () => (NodeLOfTL = dart.constFn(dart.legacy(NodeOfTL())))();
    class Node extends core.Object {
      get data() {
        return this[data$];
      }
      set data(value) {
        this[data$] = TL().as(value);
      }
      get next() {
        return this[next$];
      }
      set next(value) {
        this[next$] = NodeLOfTL().as(value);
      }
    }
    (Node.new = function(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let next = opts && 'next' in opts ? opts.next : null;
      this[data$] = data;
      this[next$] = next;
      ;
    }).prototype = Node.prototype;
    dart.addTypeTests(Node);
    Node.prototype[_is_Node_default] = true;
    dart.addTypeCaches(Node);
    dart.setLibraryUri(Node, I[1]);
    dart.setFieldSignature(Node, () => ({
      __proto__: dart.getFields(Node.__proto__),
      data: dart.fieldType(dart.legacy(T)),
      next: dart.fieldType(dart.legacy(rx_stream.Node$(dart.legacy(T))))
    }));
    return Node;
  });
  rx_stream.Node = rx_stream.Node$();
  dart.addTypeTests(rx_stream.Node, _is_Node_default);
  var data$0 = dart.privateName(rx_stream, "MiniSubscription.data");
  var onError$ = dart.privateName(rx_stream, "MiniSubscription.onError");
  var onDone$ = dart.privateName(rx_stream, "MiniSubscription.onDone");
  var cancelOnError$ = dart.privateName(rx_stream, "MiniSubscription.cancelOnError");
  var listener$ = dart.privateName(rx_stream, "MiniSubscription.listener");
  const _is_MiniSubscription_default = Symbol('_is_MiniSubscription_default');
  rx_stream.MiniSubscription$ = dart.generic(T => {
    class MiniSubscription extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        super.data = value;
      }
      get onError() {
        return this[onError$];
      }
      set onError(value) {
        super.onError = value;
      }
      get onDone() {
        return this[onDone$];
      }
      set onDone(value) {
        super.onDone = value;
      }
      get cancelOnError() {
        return this[cancelOnError$];
      }
      set cancelOnError(value) {
        super.cancelOnError = value;
      }
      get listener() {
        return this[listener$];
      }
      set listener(value) {
        super.listener = value;
      }
      cancel() {
        return async.async(dart.void, (function* cancel() {
          return this.listener.removeListener(this);
        }).bind(this));
      }
    }
    (MiniSubscription.new = function(data, onError, onDone, cancelOnError, listener) {
      this[data$0] = data;
      this[onError$] = onError;
      this[onDone$] = onDone;
      this[cancelOnError$] = cancelOnError;
      this[listener$] = listener;
      ;
    }).prototype = MiniSubscription.prototype;
    dart.addTypeTests(MiniSubscription);
    MiniSubscription.prototype[_is_MiniSubscription_default] = true;
    dart.addTypeCaches(MiniSubscription);
    dart.setMethodSignature(MiniSubscription, () => ({
      __proto__: dart.getMethods(MiniSubscription.__proto__),
      cancel: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
    }));
    dart.setLibraryUri(MiniSubscription, I[1]);
    dart.setFieldSignature(MiniSubscription, () => ({
      __proto__: dart.getFields(MiniSubscription.__proto__),
      data: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))),
      onError: dart.finalFieldType(dart.legacy(core.Function)),
      onDone: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      cancelOnError: dart.finalFieldType(dart.legacy(core.bool)),
      listener: dart.finalFieldType(dart.legacy(rx_stream.FastList$(dart.legacy(T))))
    }));
    return MiniSubscription;
  });
  rx_stream.MiniSubscription = rx_stream.MiniSubscription$();
  dart.addTypeTests(rx_stream.MiniSubscription, _is_MiniSubscription_default);
  var listenable = dart.privateName(rx_stream, "MiniStream.listenable");
  const _is_MiniStream_default = Symbol('_is_MiniStream_default');
  rx_stream.MiniStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FastListOfTL = () => (FastListOfTL = dart.constFn(rx_stream.FastList$(TL())))();
    var FastListLOfTL = () => (FastListLOfTL = dart.constFn(dart.legacy(FastListOfTL())))();
    var MiniSubscriptionOfTL = () => (MiniSubscriptionOfTL = dart.constFn(rx_stream.MiniSubscription$(TL())))();
    class MiniStream extends core.Object {
      get listenable() {
        return this[listenable];
      }
      set listenable(value) {
        this[listenable] = FastListLOfTL().as(value);
      }
      get value() {
        return this[_value];
      }
      set value(val) {
        TL().as(val);
        this.add(val);
      }
      add(event) {
        TL().as(event);
        if (!(this.listenable != null)) dart.assertFailed(null, I[2], 34, 12, "listenable != null");
        this[_value] = event;
        this.listenable[_notifyData](event);
      }
      addError(error, stackTrace = null) {
        if (!(this.listenable != null)) dart.assertFailed(null, I[2], 40, 12, "listenable != null");
        this.listenable[_notifyError](error, stackTrace);
      }
      get length() {
        return this.listenable.length;
      }
      get hasListeners() {
        return this.listenable.isNotEmpty;
      }
      get isClosed() {
        return this.listenable == null;
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        let subs = new (MiniSubscriptionOfTL()).new(onData, onError, onDone, cancelOnError, this.listenable);
        this.listenable.addListener(subs);
        return subs;
      }
      close() {
        if (this.listenable == null) {
          dart.throw("You can not close a closed Stream");
        }
        this.listenable[_notifyDone]();
        this.listenable = null;
        this[_value] = null;
      }
    }
    (MiniStream.new = function() {
      this[listenable] = new (FastListOfTL()).new();
      this[_value] = null;
      ;
    }).prototype = MiniStream.prototype;
    dart.addTypeTests(MiniStream);
    MiniStream.prototype[_is_MiniStream_default] = true;
    dart.addTypeCaches(MiniStream);
    dart.setMethodSignature(MiniStream, () => ({
      __proto__: dart.getMethods(MiniStream.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      listen: dart.fnType(dart.legacy(rx_stream.MiniSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(MiniStream, () => ({
      __proto__: dart.getGetters(MiniStream.__proto__),
      value: dart.legacy(T),
      length: dart.legacy(core.int),
      hasListeners: dart.legacy(core.bool),
      isClosed: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(MiniStream, () => ({
      __proto__: dart.getSetters(MiniStream.__proto__),
      value: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(MiniStream, I[1]);
    dart.setFieldSignature(MiniStream, () => ({
      __proto__: dart.getFields(MiniStream.__proto__),
      listenable: dart.fieldType(dart.legacy(rx_stream.FastList$(dart.legacy(T)))),
      [_value]: dart.fieldType(dart.legacy(T))
    }));
    return MiniStream;
  });
  rx_stream.MiniStream = rx_stream.MiniStream$();
  dart.addTypeTests(rx_stream.MiniStream, _is_MiniStream_default);
  var _head = dart.privateName(rx_stream, "_head");
  var _elementAt = dart.privateName(rx_stream, "_elementAt");
  var _removeAt = dart.privateName(rx_stream, "_removeAt");
  const _is_FastList_default = Symbol('_is_FastList_default');
  rx_stream.FastList$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    var TLToLvoid = () => (TLToLvoid = dart.constFn(dart.legacy(TLTovoid())))();
    var MiniSubscriptionOfTL = () => (MiniSubscriptionOfTL = dart.constFn(rx_stream.MiniSubscription$(TL())))();
    var MiniSubscriptionLOfTL = () => (MiniSubscriptionLOfTL = dart.constFn(dart.legacy(MiniSubscriptionOfTL())))();
    var NodeOfMiniSubscriptionLOfTL = () => (NodeOfMiniSubscriptionLOfTL = dart.constFn(rx_stream.Node$(MiniSubscriptionLOfTL())))();
    class FastList extends core.Object {
      [_notifyData](data) {
        let t1, t0;
        TL().as(data);
        let currentNode = this[_head];
        do {
          t0 = currentNode.data;
          t1 = data;
          TLToLvoid().as(t0.data)(t1);
          currentNode = currentNode.next;
        } while (currentNode != null);
      }
      [_notifyDone]() {
        let t0;
        let currentNode = this[_head];
        do {
          t0 = currentNode.data.onDone;
          t0 == null ? null : t0();
          currentNode = currentNode.next;
        } while (currentNode != null);
      }
      [_notifyError](error, stackTrace = null) {
        let t0;
        let currentNode = this[_head];
        while (currentNode != null) {
          t0 = currentNode.data.onError;
          t0 == null ? null : dart.dcall(t0, [error, stackTrace]);
          currentNode = currentNode.next;
        }
      }
      get isEmpty() {
        return this[_head] == null;
      }
      get isNotEmpty() {
        return !dart.test(this.isEmpty);
      }
      get length() {
        let length = 0;
        let currentNode = this[_head];
        while (currentNode != null) {
          currentNode = currentNode.next;
          length = length + 1;
        }
        return length;
      }
      [_elementAt](position) {
        if (dart.test(this.isEmpty) || dart.notNull(this.length) < dart.notNull(position) || dart.notNull(position) < 0) return null;
        let node = this[_head];
        let current = 0;
        while (current !== position) {
          node = node.next;
          current = current + 1;
        }
        return node.data;
      }
      addListener(data) {
        MiniSubscriptionLOfTL().as(data);
        let newNode = new (NodeOfMiniSubscriptionLOfTL()).new({data: data});
        if (dart.test(this.isEmpty)) {
          this[_head] = newNode;
        } else {
          let currentNode = this[_head];
          while (currentNode.next != null) {
            currentNode = currentNode.next;
          }
          currentNode.next = newNode;
        }
      }
      contains(element) {
        TL().as(element);
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.equals(this[_elementAt](i), element)) return true;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      removeListener(element) {
        MiniSubscriptionLOfTL().as(element);
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.equals(this[_elementAt](i), element)) {
            this[_removeAt](i);
            break;
          }
        }
      }
      [_removeAt](position) {
        let index = 0;
        let currentNode = this[_head];
        let previousNode = null;
        if (dart.test(this.isEmpty) || dart.notNull(this.length) < dart.notNull(position) || dart.notNull(position) < 0) {
          dart.throw(core.Exception.new("Invalid position"));
        } else if (position === 0) {
          this[_head] = this[_head].next;
        } else {
          while (index !== position) {
            previousNode = currentNode;
            currentNode = currentNode.next;
            index = index + 1;
          }
          if (previousNode == null) {
            this[_head] = null;
          } else {
            previousNode.next = currentNode.next;
          }
          currentNode.next = null;
        }
        return currentNode.data;
      }
    }
    (FastList.new = function() {
      this[_head] = null;
      ;
    }).prototype = FastList.prototype;
    dart.addTypeTests(FastList);
    FastList.prototype[_is_FastList_default] = true;
    dart.addTypeCaches(FastList);
    dart.setMethodSignature(FastList, () => ({
      __proto__: dart.getMethods(FastList.__proto__),
      [_notifyData]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_notifyDone]: dart.fnType(dart.void, []),
      [_notifyError]: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      [_elementAt]: dart.fnType(dart.legacy(rx_stream.MiniSubscription$(dart.legacy(T))), [dart.legacy(core.int)]),
      addListener: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeListener: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_removeAt]: dart.fnType(dart.legacy(rx_stream.MiniSubscription$(dart.legacy(T))), [dart.legacy(core.int)])
    }));
    dart.setGetterSignature(FastList, () => ({
      __proto__: dart.getGetters(FastList.__proto__),
      isEmpty: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool),
      length: dart.legacy(core.int)
    }));
    dart.setLibraryUri(FastList, I[1]);
    dart.setFieldSignature(FastList, () => ({
      __proto__: dart.getFields(FastList.__proto__),
      [_head]: dart.fieldType(dart.legacy(rx_stream.Node$(dart.legacy(rx_stream.MiniSubscription$(dart.legacy(T))))))
    }));
    return FastList;
  });
  rx_stream.FastList = rx_stream.FastList$();
  dart.addTypeTests(rx_stream.FastList, _is_FastList_default);
  dart.trackLibraries("packages/get/get_rx/src/rx_stream/rx_stream.dart", {
    "package:get/get_rx/src/rx_stream/rx_stream.dart": rx_stream
  }, {
    "package:get/get_rx/src/rx_stream/rx_stream.dart": ["get_stream.dart", "mini_stream.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["get_stream.dart","mini_stream.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAUkB;;;;;;MACA;;;;;;MACA;;;;;;MACU;;;;;;;oCAO6B;AAAtB;;AAC/B,yBAAK;AACH,kBAAO,AAAQ,wBAAO,IAAI;;AAES,YAAnC,MAAa,qBAAiB;AAC9B,iBAAO;uCAAS,YAAO,IAAI;;QAE/B;;;oCAEoD;AAAtB;AAC5B,yBAAK;AACH,kBAAO,AAAQ,qBAAI,IAAI;;AAEY,YAAnC,MAAa,qBAAiB;AAC9B,kBAAO,AAAQ,qBAAI,IAAI;;QAE3B;;;;AAEkB;mCAAS;MAAM;;AAER,cAAA,AAAQ;MAAU;oBAExB;;AACH,QAAd,gBAAU;AACV,iBAAW,OAAQ;AACjB,yBAAK,AAAK,IAAD;AACe,gCAAtB,AAAK,IAAD;yBAAC,OAAO,GAAK,IAAI;;;AAGV,QAAf,gBAAU;MACZ;qBAEyB,OAAmB;;AAC1C,aAAO,WAAC,kCAAU;AACJ,QAAd,gBAAU;AACN,4BAAsC;AAC1C,iBAAW,OAAQ;AACjB,yBAAK,AAAK,IAAD;AACP,gBAAI,AAAW,UAAD;AAC0B,mBAAtC,AAAK,IAAD;2BAAC,OAAU,gBAAK,KAAK,EAAE,UAAU;;AAEX,oBAA1B,AAAK,IAAD;4BAAC,OAAU,iBAAK,KAAK;;AAG3B,0BAAI,AAAK,IAAD;AAEiB,cAAvB,AAAc,aAAD,OAAK,IAAI;AACV,cAAZ,AAAK,IAAD;AACgB,qBAApB,AAAK,IAAD;6BAAC,OAAS;;;;AAIpB,iBAAW,OAAQ,cAAa;AACV,UAApB,AAAQ,uBAAO,IAAI;;AAEN,QAAf,gBAAU;MACZ;;;AAGE,aAAO,WAAC,kCAAU;AACJ,QAAd,gBAAU;AACV,iBAAW,OAAQ;AACjB,yBAAK,AAAK,IAAD;AACa,iBAApB,AAAK,IAAD;yBAAC,OAAS;;;AAGH,QAAf,gBAAU;MACZ;;AAIe;MAAM;;gBAEV;AACT,aAAO,WAAC,kCAAU;AACJ,QAAd,eAAS,KAAK;AACI,QAAlB,kBAAY,KAAK;MACnB;;AAEqB,cAAA,AAAQ;MAAO;eAEf,OAAmB;AACtC,aAAO,WAAC,kCAAU;AACa,QAA/B,mBAAa,KAAK,EAAE,UAAU;MAChC;;AAGE,aAAO,WAAC,kCAAU;AACL,QAAb;AACc,QAAd,gBAAU;AACI,QAAd,gBAAU;AACG,QAAb,eAAS;MACX;aAEmD;;YACrC;YAAyB;YAAa;AAC5C,yBAAO,4CACX,uCACS,wBACC,yBACA,iBAJC;AAMT,oBAAO,MAAM;AACb,qBAAQ,OAAO;AACf,oBAAO,MAAM;AACb,6BAAgB,aAAa;;;AACZ,QAArB,qBAAgB,IAAI;AACJ,cAAhB;6BAAU;AACV,cAAO,KAAI;MACb;;AAGI,iEAAwB,oCAAiB;MAAmB;;;UArHhD;UAAe;UAAc;UAAe;MACjC,gBAAgC;MAEtD,gBAAU;MAuEb;MA1Ec;MAAe;MAAc;MAAe;;IAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4HhD;;;;;;MACA;;;;;;MACU;;;;;;MAE3B;;;;;;;;AAIsB,QAAzB,AAAmB,2BAAC;AACJ,aAAhB;4BAAU;AACV,cAAc;MAChB;aAWsB;AAAe,6BAAQ,UAAU;;cAGjC;AAAgB,gCAAW,WAAW;;aAGvC;AAAe,+BAAU,UAAU;;YAG/B;;AACP,QAAhB,kBAAY;AACG,aAAf;4BAAS;MACX;;;AAImB,QAAjB,kBAAY;AACI,aAAhB;4BAAU;MACZ;;AAGqB;MAAS;kBAGL;AAAiB,cAAO,qCAAM,WAAW;MAAC;;sCAhD5C;UACb;UAAc;UAAe;MAKlC,sBAAgB;MASX;MAED;MAEA;MAEJ,kBAAY;MArBM;MACb;MAAc;MAAe;;IAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAwDE;;YACrC;YAAyB;YAAa;AAC5C,yBAAO,kCAAqB,6BAArB;AACT,oBAAO,MAAM;AACb,qBAAQ,OAAO;AACf,oBAAO,MAAM;;;AACK,cAAL,IAAI;QAArB,AAAgB;AAChB,cAAO,KAAI;MACb;;4CAX6B,kBAAuB;MAAvB;MAAuB;AAApD;;IAAwE;;;;;;;;;;;;;;;;;;;;;;;;;;MC5LtE;;;;;;MACM;;;;;;;;UACG;UAAW;MAAX;MAAW;;IAAM;;;;;;;;;;;;;;;;;;;;;;MAMZ;;;;;;MACD;;;;;;MACA;;;;;;MACJ;;;;;;MAIO;;;;;;;AAFC;AAAY,gBAAA,AAAS,8BAAe;QAAK;;;qCANnD,MAAW,SAAc,QAAa,eAAoB;MAA1D;MAAW;MAAc;MAAa;MAAoB;;IAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAYhE;;;;;;;AAIG;MAAM;;gBAET;AACF,QAAR,SAAI,GAAG;MACT;;gBAEW;AACT,cAAO,AAAW;AACJ,QAAd,eAAS,KAAK;AACe,QAA7B,AAAW,6BAAY,KAAK;MAC9B;eAEqB,OAAmB;AACtC,cAAO,AAAW;AACwB,QAA1C,AAAW,8BAAa,KAAK,EAAE,UAAU;MAC3C;;AAEkB,cAAA,AAAW;MAAM;;AAEV,cAAA,AAAW;MAAU;;AAEzB,cAAA,AAAW;MAAO;aAEW;YACpC;YAAyB;YAAa;AAC5C,mBAAO,iCACX,MAAM,EACN,OAAO,EACP,MAAM,EACN,aAAa,EACb;AAE0B,QAA5B,AAAW,4BAAY,IAAI;AAC3B,cAAO,KAAI;MACb;;AAGE,YAAI,AAAW;AAC4B,UAAzC,WAAM;;AAEgB,QAAxB,AAAW;AACM,QAAjB,kBAAa;AACA,QAAb,eAAS;MACX;;;MA/CY,mBAAa;MAEvB;;IA8CJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKqB;;;AACb,0BAAc;AAClB;AAC6B,eAA3B,AAAY,WAAD;eAAW,IAAI;UAAL,eAAJ;AACa,UAA9B,cAAc,AAAY,WAAD;iBAClB,AAAY,WAAD;MACtB;;;AAGM,0BAAc;AAClB;AACiC,eAA/B,AAAY,AAAK,WAAN;uBAAM,OAAQ;AACK,UAA9B,cAAc,AAAY,WAAD;iBAClB,AAAY,WAAD;MACtB;qBAEyB,OAAmB;;AACtC,0BAAc;AAClB,eAAO,AAAY,WAAD;AACiC,eAAjD,AAAY,AAAK,WAAN;uBAAM,OAAS,gBAAK,KAAK,EAAE,UAAU;AAClB,UAA9B,cAAc,AAAY,WAAD;;MAE7B;;AAGoB,cAAA,AAAM;MAAO;;AAEV,0BAAC;MAAO;;AAIzB,qBAAS;AACT,0BAAc;AAElB,eAAO,AAAY,WAAD;AACc,UAA9B,cAAc,AAAY,WAAD;AACjB,UAAR,SAAA,AAAM,MAAA;;AAER,cAAO,OAAM;MACf;mBAGmC;AACjC,sBAAI,iBAAkB,aAAP,4BAAS,QAAQ,KAAa,aAAT,QAAQ,IAAG,GAAG,MAAO;AAErD,mBAAO;AACP,sBAAU;AAEd,eAAO,AAAQ,OAAD,KAAI,QAAQ;AACR,UAAhB,OAAO,AAAK,IAAD;AACF,UAAT,UAAA,AAAO,OAAA;;AAET,cAAO,AAAK,KAAD;MACb;;mCAGqC;AAC/B,sBAAU,+CAAW,IAAI;AAE7B,sBAAI;AACa,UAAf,cAAQ,OAAO;;AAEX,4BAAc;AAClB,iBAAO,AAAY,AAAK,WAAN;AACc,YAA9B,cAAc,AAAY,WAAD;;AAED,UAA1B,AAAY,WAAD,QAAQ,OAAO;;MAE9B;;gBAEgB;AACV,qBAAc;AAClB,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AAC3B,cAAkB,YAAd,iBAAW,CAAC,GAAK,OAAO,GAAE,MAAO;AACrC,cAAI,AAAO,MAAD,IAAS;AACsB,YAAvC,WAAM,yCAA4B;;;AAGtC,cAAO;MACT;;mCAEwC;AAClC,qBAAc;AAClB,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AAC3B,cAAkB,YAAd,iBAAW,CAAC,GAAK,OAAO;AACd,YAAZ,gBAAU,CAAC;AACX;;;MAGN;kBAEkC;AAC5B,oBAAQ;AACR,0BAAc;AACQ;AAE1B,sBAAI,iBAAkB,aAAP,4BAAS,QAAQ,KAAa,aAAT,QAAQ,IAAG;AACV,UAAnC,WAAM,mBAAU;cACX,KAAI,AAAS,QAAD,KAAI;AACH,UAAlB,cAAQ,AAAM;;AAEd,iBAAO,AAAM,KAAD,KAAI,QAAQ;AACI,YAA1B,eAAe,WAAW;AACI,YAA9B,cAAc,AAAY,WAAD;AAClB,YAAP,QAAA,AAAK,KAAA;;AAGP,cAAI,AAAa,YAAD;AACF,YAAZ,cAAQ;;AAE4B,YAApC,AAAa,YAAD,QAAQ,AAAY,WAAD;;AAGV,UAAvB,AAAY,WAAD,QAAQ;;AAGrB,cAAO,AAAY,YAAD;MACpB;;;MAvH0B;;IAwH5B","file":"../../../../../../../../../../packages/get/get_rx/src/rx_stream/rx_stream.dart.lib.js"}');
  // Exports:
  return {
    get_rx__src__rx_stream__rx_stream: rx_stream
  };
}));

//# sourceMappingURL=rx_stream.dart.lib.js.map
