define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/widgets/platform_view.dart', 'packages/flutter_inappwebview/src/X509Certificate/x509_extension.dart', 'packages/flutter_inappwebview/src/X509Certificate/asn1_distinguished_names.dart', 'packages/flutter_inappwebview/src/util.dart', 'packages/uuid/uuid.dart'], (function load__packages__flutter_inappwebview__src__web_storage_manager_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__widgets__platform_view$46dart, packages__flutter_inappwebview__src__X509Certificate__x509_extension$46dart, packages__flutter_inappwebview__src__X509Certificate__asn1_distinguished_names$46dart, packages__flutter_inappwebview__src__util$46dart, packages__uuid__uuid$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const ui = dart_sdk.ui;
  const io = dart_sdk.io;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const platform_view = packages__flutter__src__widgets__platform_view$46dart.src__widgets__platform_view;
  const x509_certificate = packages__flutter_inappwebview__src__X509Certificate__x509_extension$46dart.src__X509Certificate__x509_certificate;
  const asn1_distinguished_names = packages__flutter_inappwebview__src__X509Certificate__asn1_distinguished_names$46dart.src__X509Certificate__asn1_distinguished_names;
  const util = packages__flutter_inappwebview__src__util$46dart.src__util;
  const uuid = packages__uuid__uuid$46dart.uuid;
  var web_storage_manager = Object.create(dart.library);
  var cookie_manager = Object.create(dart.library);
  var chrome_safari_browser = Object.create(dart.library);
  var http_auth_credentials_database = Object.create(dart.library);
  var web_storage = Object.create(dart.library);
  var in_app_webview = Object.create(dart.library);
  var headless_in_app_webview = Object.create(dart.library);
  var content_blocker = Object.create(dart.library);
  var webview_options = Object.create(dart.library);
  var in_app_webview_controller = Object.create(dart.library);
  var webview = Object.create(dart.library);
  var context_menu = Object.create(dart.library);
  var in_app_browser = Object.create(dart.library);
  var types = Object.create(dart.library);
  var flutter_inappwebview = Object.create(dart.library);
  var $_get = dartx._get;
  var $add = dartx.add;
  var $putIfAbsent = dartx.putIfAbsent;
  var $isNotEmpty = dartx.isNotEmpty;
  var $toString = dartx.toString;
  var $cast = dartx.cast;
  var $length = dartx.length;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $forEach = dartx.forEach;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $keys = dartx.keys;
  var $where = dartx.where;
  var $remove = dartx.remove;
  var $contains = dartx.contains;
  var $containsKey = dartx.containsKey;
  var $split = dartx.split;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $addAll = dartx.addAll;
  var $replaceFirst = dartx.replaceFirst;
  var $firstWhere = dartx.firstWhere;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $toSet = dartx.toSet;
  dart._checkModuleNullSafetyMode(false);
  var T = Object.create({
    FutureL: () => (T.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    MethodCallL: () => (T.MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))(),
    MethodCallLToFutureL: () => (T.MethodCallLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.MethodCallL()])))(),
    AndroidWebStorageOriginL: () => (T.AndroidWebStorageOriginL = dart.constFn(dart.legacy(types.AndroidWebStorageOrigin)))(),
    JSArrayOfAndroidWebStorageOriginL: () => (T.JSArrayOfAndroidWebStorageOriginL = dart.constFn(_interceptors.JSArray$(T.AndroidWebStorageOriginL())))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    ListOfMapL: () => (T.ListOfMapL = dart.constFn(core.List$(T.MapL())))(),
    ListLOfMapL: () => (T.ListLOfMapL = dart.constFn(dart.legacy(T.ListOfMapL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ListOfAndroidWebStorageOriginL: () => (T.ListOfAndroidWebStorageOriginL = dart.constFn(core.List$(T.AndroidWebStorageOriginL())))(),
    ListLOfAndroidWebStorageOriginL: () => (T.ListLOfAndroidWebStorageOriginL = dart.constFn(dart.legacy(T.ListOfAndroidWebStorageOriginL())))(),
    VoidToStringL: () => (T.VoidToStringL = dart.constFn(dart.fnType(T.StringL(), [])))(),
    IOSWKWebsiteDataRecordL: () => (T.IOSWKWebsiteDataRecordL = dart.constFn(dart.legacy(types.IOSWKWebsiteDataRecord)))(),
    JSArrayOfIOSWKWebsiteDataRecordL: () => (T.JSArrayOfIOSWKWebsiteDataRecordL = dart.constFn(_interceptors.JSArray$(T.IOSWKWebsiteDataRecordL())))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))(),
    VoidToListLOfStringL: () => (T.VoidToListLOfStringL = dart.constFn(dart.fnType(T.ListLOfStringL(), [])))(),
    IOSWKWebsiteDataTypeL: () => (T.IOSWKWebsiteDataTypeL = dart.constFn(dart.legacy(types.IOSWKWebsiteDataType)))(),
    _HashSetOfIOSWKWebsiteDataTypeL: () => (T._HashSetOfIOSWKWebsiteDataTypeL = dart.constFn(collection._HashSet$(T.IOSWKWebsiteDataTypeL())))(),
    ListOfIOSWKWebsiteDataRecordL: () => (T.ListOfIOSWKWebsiteDataRecordL = dart.constFn(core.List$(T.IOSWKWebsiteDataRecordL())))(),
    ListLOfIOSWKWebsiteDataRecordL: () => (T.ListLOfIOSWKWebsiteDataRecordL = dart.constFn(dart.legacy(T.ListOfIOSWKWebsiteDataRecordL())))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    JSArrayOfMapLOfStringL$dynamic: () => (T.JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$dynamic())))(),
    ListOfMapLOfStringL$dynamic: () => (T.ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(T.MapLOfStringL$dynamic())))(),
    ListLOfMapLOfStringL$dynamic: () => (T.ListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(T.ListOfMapLOfStringL$dynamic())))(),
    VoidToListLOfMapLOfStringL$dynamic: () => (T.VoidToListLOfMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.ListLOfMapLOfStringL$dynamic(), [])))(),
    VoidTointL: () => (T.VoidTointL = dart.constFn(dart.fnType(T.intL(), [])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToboolL: () => (T.VoidToboolL = dart.constFn(dart.fnType(T.boolL(), [])))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    CookieL: () => (T.CookieL = dart.constFn(dart.legacy(types.Cookie)))(),
    JSArrayOfCookieL: () => (T.JSArrayOfCookieL = dart.constFn(_interceptors.JSArray$(T.CookieL())))(),
    ListOfCookieL: () => (T.ListOfCookieL = dart.constFn(core.List$(T.CookieL())))(),
    ListLOfCookieL: () => (T.ListLOfCookieL = dart.constFn(dart.legacy(T.ListOfCookieL())))(),
    ChromeSafariBrowserMenuItemL: () => (T.ChromeSafariBrowserMenuItemL = dart.constFn(dart.legacy(chrome_safari_browser.ChromeSafariBrowserMenuItem)))(),
    IdentityMapOfintL$ChromeSafariBrowserMenuItemL: () => (T.IdentityMapOfintL$ChromeSafariBrowserMenuItemL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.ChromeSafariBrowserMenuItemL())))(),
    InAppBrowserL: () => (T.InAppBrowserL = dart.constFn(dart.legacy(in_app_browser.InAppBrowser)))(),
    intLAndChromeSafariBrowserMenuItemLToNull: () => (T.intLAndChromeSafariBrowserMenuItemLToNull = dart.constFn(dart.fnType(core.Null, [T.intL(), T.ChromeSafariBrowserMenuItemL()])))(),
    VoidToMapL: () => (T.VoidToMapL = dart.constFn(dart.fnType(T.MapL(), [])))(),
    ChromeSafariBrowserMenuItemLToNull: () => (T.ChromeSafariBrowserMenuItemLToNull = dart.constFn(dart.fnType(core.Null, [T.ChromeSafariBrowserMenuItemL()])))(),
    ProtectionSpaceHttpAuthCredentialsL: () => (T.ProtectionSpaceHttpAuthCredentialsL = dart.constFn(dart.legacy(types.ProtectionSpaceHttpAuthCredentials)))(),
    JSArrayOfProtectionSpaceHttpAuthCredentialsL: () => (T.JSArrayOfProtectionSpaceHttpAuthCredentialsL = dart.constFn(_interceptors.JSArray$(T.ProtectionSpaceHttpAuthCredentialsL())))(),
    HttpAuthCredentialL: () => (T.HttpAuthCredentialL = dart.constFn(dart.legacy(types.HttpAuthCredential)))(),
    dynamicToHttpAuthCredentialL: () => (T.dynamicToHttpAuthCredentialL = dart.constFn(dart.fnType(T.HttpAuthCredentialL(), [dart.dynamic])))(),
    ListOfProtectionSpaceHttpAuthCredentialsL: () => (T.ListOfProtectionSpaceHttpAuthCredentialsL = dart.constFn(core.List$(T.ProtectionSpaceHttpAuthCredentialsL())))(),
    ListLOfProtectionSpaceHttpAuthCredentialsL: () => (T.ListLOfProtectionSpaceHttpAuthCredentialsL = dart.constFn(dart.legacy(T.ListOfProtectionSpaceHttpAuthCredentialsL())))(),
    JSArrayOfHttpAuthCredentialL: () => (T.JSArrayOfHttpAuthCredentialL = dart.constFn(_interceptors.JSArray$(T.HttpAuthCredentialL())))(),
    ListOfHttpAuthCredentialL: () => (T.ListOfHttpAuthCredentialL = dart.constFn(core.List$(T.HttpAuthCredentialL())))(),
    ListLOfHttpAuthCredentialL: () => (T.ListLOfHttpAuthCredentialL = dart.constFn(dart.legacy(T.ListOfHttpAuthCredentialL())))(),
    WebStorageItemL: () => (T.WebStorageItemL = dart.constFn(dart.legacy(web_storage.WebStorageItem)))(),
    JSArrayOfWebStorageItemL: () => (T.JSArrayOfWebStorageItemL = dart.constFn(_interceptors.JSArray$(T.WebStorageItemL())))(),
    ListOfWebStorageItemL: () => (T.ListOfWebStorageItemL = dart.constFn(core.List$(T.WebStorageItemL())))(),
    ListLOfWebStorageItemL: () => (T.ListLOfWebStorageItemL = dart.constFn(dart.legacy(T.ListOfWebStorageItemL())))(),
    FutureOrOfStringL: () => (T.FutureOrOfStringL = dart.constFn(async.FutureOr$(T.StringL())))(),
    FutureOrLOfStringL: () => (T.FutureOrLOfStringL = dart.constFn(dart.legacy(T.FutureOrOfStringL())))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    InAppWebViewL: () => (T.InAppWebViewL = dart.constFn(dart.legacy(in_app_webview.InAppWebView)))(),
    VoidToMapLOfStringL$dynamic: () => (T.VoidToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [])))(),
    IdentityMapOfStringL$MapLOfStringL$dynamic: () => (T.IdentityMapOfStringL$MapLOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.MapLOfStringL$dynamic())))(),
    LinkedHashMapOfStringL$dynamic: () => (T.LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(T.StringL(), dart.dynamic)))(),
    ContentBlockerTriggerResourceTypeL: () => (T.ContentBlockerTriggerResourceTypeL = dart.constFn(dart.legacy(types.ContentBlockerTriggerResourceType)))(),
    ContentBlockerTriggerLoadTypeL: () => (T.ContentBlockerTriggerLoadTypeL = dart.constFn(dart.legacy(types.ContentBlockerTriggerLoadType)))(),
    ContentBlockerTriggerResourceTypeLToNull: () => (T.ContentBlockerTriggerResourceTypeLToNull = dart.constFn(dart.fnType(core.Null, [T.ContentBlockerTriggerResourceTypeL()])))(),
    ContentBlockerTriggerLoadTypeLToNull: () => (T.ContentBlockerTriggerLoadTypeLToNull = dart.constFn(dart.fnType(core.Null, [T.ContentBlockerTriggerLoadTypeL()])))(),
    StringLToboolL: () => (T.StringLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.StringL()])))(),
    JSArrayOfContentBlockerTriggerResourceTypeL: () => (T.JSArrayOfContentBlockerTriggerResourceTypeL = dart.constFn(_interceptors.JSArray$(T.ContentBlockerTriggerResourceTypeL())))(),
    JSArrayOfContentBlockerTriggerLoadTypeL: () => (T.JSArrayOfContentBlockerTriggerLoadTypeL = dart.constFn(_interceptors.JSArray$(T.ContentBlockerTriggerLoadTypeL())))(),
    StringLToNull: () => (T.StringLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL()])))(),
    ContentBlockerL: () => (T.ContentBlockerL = dart.constFn(dart.legacy(content_blocker.ContentBlocker)))(),
    MapOfStringL$MapLOfStringL$dynamic: () => (T.MapOfStringL$MapLOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), T.MapLOfStringL$dynamic())))(),
    MapLOfStringL$MapLOfStringL$dynamic: () => (T.MapLOfStringL$MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$MapLOfStringL$dynamic())))(),
    JSArrayOfMapLOfStringL$MapLOfStringL$dynamic: () => (T.JSArrayOfMapLOfStringL$MapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$MapLOfStringL$dynamic())))(),
    ContentBlockerLToNull: () => (T.ContentBlockerLToNull = dart.constFn(dart.fnType(core.Null, [T.ContentBlockerL()])))(),
    JSArrayOfContentBlockerL: () => (T.JSArrayOfContentBlockerL = dart.constFn(_interceptors.JSArray$(T.ContentBlockerL())))(),
    LinkedHashMapOfdynamic$MapL: () => (T.LinkedHashMapOfdynamic$MapL = dart.constFn(collection.LinkedHashMap$(dart.dynamic, T.MapL())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    IOSWKDataDetectorTypesL: () => (T.IOSWKDataDetectorTypesL = dart.constFn(dart.legacy(types.IOSWKDataDetectorTypes)))(),
    IOSWKDataDetectorTypesLToNull: () => (T.IOSWKDataDetectorTypesLToNull = dart.constFn(dart.fnType(core.Null, [T.IOSWKDataDetectorTypesL()])))(),
    JSArrayOfIOSWKDataDetectorTypesL: () => (T.JSArrayOfIOSWKDataDetectorTypesL = dart.constFn(_interceptors.JSArray$(T.IOSWKDataDetectorTypesL())))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    ListLTodynamic: () => (T.ListLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListL()])))(),
    ListLToLdynamic: () => (T.ListLToLdynamic = dart.constFn(dart.legacy(T.ListLTodynamic())))(),
    IdentityMapOfStringL$ListLToLdynamic: () => (T.IdentityMapOfStringL$ListLToLdynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ListLToLdynamic())))(),
    HeadlessInAppWebViewL: () => (T.HeadlessInAppWebViewL = dart.constFn(dart.legacy(headless_in_app_webview.HeadlessInAppWebView)))(),
    MapOfStringL$StringL: () => (T.MapOfStringL$StringL = dart.constFn(core.Map$(T.StringL(), T.StringL())))(),
    MapLOfStringL$StringL: () => (T.MapLOfStringL$StringL = dart.constFn(dart.legacy(T.MapOfStringL$StringL())))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    FaviconL: () => (T.FaviconL = dart.constFn(dart.legacy(types.Favicon)))(),
    JSArrayOfFaviconL: () => (T.JSArrayOfFaviconL = dart.constFn(_interceptors.JSArray$(T.FaviconL())))(),
    JSArrayOfMapL: () => (T.JSArrayOfMapL = dart.constFn(_interceptors.JSArray$(T.MapL())))(),
    IterableL: () => (T.IterableL = dart.constFn(dart.legacy(core.Iterable)))(),
    ListOfFaviconL: () => (T.ListOfFaviconL = dart.constFn(core.List$(T.FaviconL())))(),
    ListLOfFaviconL: () => (T.ListLOfFaviconL = dart.constFn(dart.legacy(T.ListOfFaviconL())))(),
    VoidToMapLOfStringL$StringL: () => (T.VoidToMapLOfStringL$StringL = dart.constFn(dart.fnType(T.MapLOfStringL$StringL(), [])))(),
    VoidToUint8ListL: () => (T.VoidToUint8ListL = dart.constFn(dart.fnType(T.Uint8ListL(), [])))(),
    InAppWebViewGroupOptionsL: () => (T.InAppWebViewGroupOptionsL = dart.constFn(dart.legacy(types.InAppWebViewGroupOptions)))(),
    LinkedHashMapL: () => (T.LinkedHashMapL = dart.constFn(dart.legacy(collection.LinkedHashMap)))(),
    WebHistoryItemL: () => (T.WebHistoryItemL = dart.constFn(dart.legacy(types.WebHistoryItem)))(),
    JSArrayOfWebHistoryItemL: () => (T.JSArrayOfWebHistoryItemL = dart.constFn(_interceptors.JSArray$(T.WebHistoryItemL())))(),
    WebHistoryL: () => (T.WebHistoryL = dart.constFn(dart.legacy(types.WebHistory)))(),
    VoidTodoubleL: () => (T.VoidTodoubleL = dart.constFn(dart.fnType(T.doubleL(), [])))(),
    InAppWebViewHitTestResultL: () => (T.InAppWebViewHitTestResultL = dart.constFn(dart.legacy(types.InAppWebViewHitTestResult)))(),
    RequestFocusNodeHrefResultL: () => (T.RequestFocusNodeHrefResultL = dart.constFn(dart.legacy(types.RequestFocusNodeHrefResult)))(),
    RequestImageRefResultL: () => (T.RequestImageRefResultL = dart.constFn(dart.legacy(types.RequestImageRefResult)))(),
    MetaTagL: () => (T.MetaTagL = dart.constFn(dart.legacy(types.MetaTag)))(),
    JSArrayOfMetaTagL: () => (T.JSArrayOfMetaTagL = dart.constFn(_interceptors.JSArray$(T.MetaTagL())))(),
    MetaTagAttributeL: () => (T.MetaTagAttributeL = dart.constFn(dart.legacy(types.MetaTagAttribute)))(),
    JSArrayOfMetaTagAttributeL: () => (T.JSArrayOfMetaTagAttributeL = dart.constFn(_interceptors.JSArray$(T.MetaTagAttributeL())))(),
    ListOfMetaTagL: () => (T.ListOfMetaTagL = dart.constFn(core.List$(T.MetaTagL())))(),
    ListLOfMetaTagL: () => (T.ListLOfMetaTagL = dart.constFn(dart.legacy(T.ListOfMetaTagL())))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    SslCertificateL: () => (T.SslCertificateL = dart.constFn(dart.legacy(types.SslCertificate)))(),
    AndroidWebViewPackageInfoL: () => (T.AndroidWebViewPackageInfoL = dart.constFn(dart.legacy(types.AndroidWebViewPackageInfo)))(),
    ContextMenuItemL: () => (T.ContextMenuItemL = dart.constFn(dart.legacy(context_menu.ContextMenuItem)))(),
    ContextMenuItemLToMapLOfStringL$dynamic: () => (T.ContextMenuItemLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.ContextMenuItemL()])))(),
    InAppBrowserClassOptionsL: () => (T.InAppBrowserClassOptionsL = dart.constFn(dart.legacy(types.InAppBrowserClassOptions)))(),
    ConsoleMessageLevelL: () => (T.ConsoleMessageLevelL = dart.constFn(dart.legacy(types.ConsoleMessageLevel)))(),
    ConsoleMessageLevelLToboolL: () => (T.ConsoleMessageLevelLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ConsoleMessageLevelL()])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    JSArrayOfConsoleMessageLevelL: () => (T.JSArrayOfConsoleMessageLevelL = dart.constFn(_interceptors.JSArray$(T.ConsoleMessageLevelL())))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    SafeBrowsingThreatL: () => (T.SafeBrowsingThreatL = dart.constFn(dart.legacy(types.SafeBrowsingThreat)))(),
    SafeBrowsingThreatLToboolL: () => (T.SafeBrowsingThreatLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.SafeBrowsingThreatL()])))(),
    JSArrayOfSafeBrowsingThreatL: () => (T.JSArrayOfSafeBrowsingThreatL = dart.constFn(_interceptors.JSArray$(T.SafeBrowsingThreatL())))(),
    HttpAuthCredentialLToMapLOfStringL$dynamic: () => (T.HttpAuthCredentialLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.HttpAuthCredentialL()])))(),
    AndroidCacheModeL: () => (T.AndroidCacheModeL = dart.constFn(dart.legacy(types.AndroidCacheMode)))(),
    AndroidCacheModeLToboolL: () => (T.AndroidCacheModeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidCacheModeL()])))(),
    JSArrayOfAndroidCacheModeL: () => (T.JSArrayOfAndroidCacheModeL = dart.constFn(_interceptors.JSArray$(T.AndroidCacheModeL())))(),
    AndroidActionModeMenuItemL: () => (T.AndroidActionModeMenuItemL = dart.constFn(dart.legacy(types.AndroidActionModeMenuItem)))(),
    AndroidActionModeMenuItemLToboolL: () => (T.AndroidActionModeMenuItemLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidActionModeMenuItemL()])))(),
    JSArrayOfAndroidActionModeMenuItemL: () => (T.JSArrayOfAndroidActionModeMenuItemL = dart.constFn(_interceptors.JSArray$(T.AndroidActionModeMenuItemL())))(),
    AndroidForceDarkL: () => (T.AndroidForceDarkL = dart.constFn(dart.legacy(types.AndroidForceDark)))(),
    AndroidForceDarkLToboolL: () => (T.AndroidForceDarkLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidForceDarkL()])))(),
    JSArrayOfAndroidForceDarkL: () => (T.JSArrayOfAndroidForceDarkL = dart.constFn(_interceptors.JSArray$(T.AndroidForceDarkL())))(),
    AndroidLayoutAlgorithmL: () => (T.AndroidLayoutAlgorithmL = dart.constFn(dart.legacy(types.AndroidLayoutAlgorithm)))(),
    AndroidLayoutAlgorithmLToboolL: () => (T.AndroidLayoutAlgorithmLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidLayoutAlgorithmL()])))(),
    JSArrayOfAndroidLayoutAlgorithmL: () => (T.JSArrayOfAndroidLayoutAlgorithmL = dart.constFn(_interceptors.JSArray$(T.AndroidLayoutAlgorithmL())))(),
    AndroidMixedContentModeL: () => (T.AndroidMixedContentModeL = dart.constFn(dart.legacy(types.AndroidMixedContentMode)))(),
    AndroidMixedContentModeLToboolL: () => (T.AndroidMixedContentModeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidMixedContentModeL()])))(),
    JSArrayOfAndroidMixedContentModeL: () => (T.JSArrayOfAndroidMixedContentModeL = dart.constFn(_interceptors.JSArray$(T.AndroidMixedContentModeL())))(),
    IOSWKSelectionGranularityL: () => (T.IOSWKSelectionGranularityL = dart.constFn(dart.legacy(types.IOSWKSelectionGranularity)))(),
    IOSWKSelectionGranularityLToboolL: () => (T.IOSWKSelectionGranularityLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSWKSelectionGranularityL()])))(),
    JSArrayOfIOSWKSelectionGranularityL: () => (T.JSArrayOfIOSWKSelectionGranularityL = dart.constFn(_interceptors.JSArray$(T.IOSWKSelectionGranularityL())))(),
    IOSWKDataDetectorTypesLToboolL: () => (T.IOSWKDataDetectorTypesLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSWKDataDetectorTypesL()])))(),
    IOSUIScrollViewDecelerationRateL: () => (T.IOSUIScrollViewDecelerationRateL = dart.constFn(dart.legacy(types.IOSUIScrollViewDecelerationRate)))(),
    IOSUIScrollViewDecelerationRateLToboolL: () => (T.IOSUIScrollViewDecelerationRateLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSUIScrollViewDecelerationRateL()])))(),
    JSArrayOfIOSUIScrollViewDecelerationRateL: () => (T.JSArrayOfIOSUIScrollViewDecelerationRateL = dart.constFn(_interceptors.JSArray$(T.IOSUIScrollViewDecelerationRateL())))(),
    UserPreferredContentModeL: () => (T.UserPreferredContentModeL = dart.constFn(dart.legacy(types.UserPreferredContentMode)))(),
    UserPreferredContentModeLToboolL: () => (T.UserPreferredContentModeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.UserPreferredContentModeL()])))(),
    JSArrayOfUserPreferredContentModeL: () => (T.JSArrayOfUserPreferredContentModeL = dart.constFn(_interceptors.JSArray$(T.UserPreferredContentModeL())))(),
    IOSUIModalPresentationStyleL: () => (T.IOSUIModalPresentationStyleL = dart.constFn(dart.legacy(types.IOSUIModalPresentationStyle)))(),
    IOSUIModalPresentationStyleLToboolL: () => (T.IOSUIModalPresentationStyleLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSUIModalPresentationStyleL()])))(),
    JSArrayOfIOSUIModalPresentationStyleL: () => (T.JSArrayOfIOSUIModalPresentationStyleL = dart.constFn(_interceptors.JSArray$(T.IOSUIModalPresentationStyleL())))(),
    IOSUIModalTransitionStyleL: () => (T.IOSUIModalTransitionStyleL = dart.constFn(dart.legacy(types.IOSUIModalTransitionStyle)))(),
    IOSUIModalTransitionStyleLToboolL: () => (T.IOSUIModalTransitionStyleLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSUIModalTransitionStyleL()])))(),
    JSArrayOfIOSUIModalTransitionStyleL: () => (T.JSArrayOfIOSUIModalTransitionStyleL = dart.constFn(_interceptors.JSArray$(T.IOSUIModalTransitionStyleL())))(),
    IOSSafariDismissButtonStyleL: () => (T.IOSSafariDismissButtonStyleL = dart.constFn(dart.legacy(types.IOSSafariDismissButtonStyle)))(),
    IOSSafariDismissButtonStyleLToboolL: () => (T.IOSSafariDismissButtonStyleLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSSafariDismissButtonStyleL()])))(),
    JSArrayOfIOSSafariDismissButtonStyleL: () => (T.JSArrayOfIOSSafariDismissButtonStyleL = dart.constFn(_interceptors.JSArray$(T.IOSSafariDismissButtonStyleL())))(),
    AjaxRequestEventTypeL: () => (T.AjaxRequestEventTypeL = dart.constFn(dart.legacy(types.AjaxRequestEventType)))(),
    AjaxRequestEventTypeLToboolL: () => (T.AjaxRequestEventTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AjaxRequestEventTypeL()])))(),
    JSArrayOfAjaxRequestEventTypeL: () => (T.JSArrayOfAjaxRequestEventTypeL = dart.constFn(_interceptors.JSArray$(T.AjaxRequestEventTypeL())))(),
    AjaxRequestReadyStateL: () => (T.AjaxRequestReadyStateL = dart.constFn(dart.legacy(types.AjaxRequestReadyState)))(),
    AjaxRequestReadyStateLToboolL: () => (T.AjaxRequestReadyStateLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AjaxRequestReadyStateL()])))(),
    JSArrayOfAjaxRequestReadyStateL: () => (T.JSArrayOfAjaxRequestReadyStateL = dart.constFn(_interceptors.JSArray$(T.AjaxRequestReadyStateL())))(),
    ContentBlockerTriggerResourceTypeLToboolL: () => (T.ContentBlockerTriggerResourceTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ContentBlockerTriggerResourceTypeL()])))(),
    ContentBlockerTriggerLoadTypeLToboolL: () => (T.ContentBlockerTriggerLoadTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ContentBlockerTriggerLoadTypeL()])))(),
    ContentBlockerActionTypeL: () => (T.ContentBlockerActionTypeL = dart.constFn(dart.legacy(types.ContentBlockerActionType)))(),
    ContentBlockerActionTypeLToboolL: () => (T.ContentBlockerActionTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ContentBlockerActionTypeL()])))(),
    JSArrayOfContentBlockerActionTypeL: () => (T.JSArrayOfContentBlockerActionTypeL = dart.constFn(_interceptors.JSArray$(T.ContentBlockerActionTypeL())))(),
    IOSWKNavigationTypeL: () => (T.IOSWKNavigationTypeL = dart.constFn(dart.legacy(types.IOSWKNavigationType)))(),
    IOSWKNavigationTypeLToboolL: () => (T.IOSWKNavigationTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSWKNavigationTypeL()])))(),
    JSArrayOfIOSWKNavigationTypeL: () => (T.JSArrayOfIOSWKNavigationTypeL = dart.constFn(_interceptors.JSArray$(T.IOSWKNavigationTypeL())))(),
    IOSWKWebsiteDataTypeLToboolL: () => (T.IOSWKWebsiteDataTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSWKWebsiteDataTypeL()])))(),
    JSArrayOfIOSWKWebsiteDataTypeL: () => (T.JSArrayOfIOSWKWebsiteDataTypeL = dart.constFn(_interceptors.JSArray$(T.IOSWKWebsiteDataTypeL())))(),
    InAppWebViewHitTestResultTypeL: () => (T.InAppWebViewHitTestResultTypeL = dart.constFn(dart.legacy(types.InAppWebViewHitTestResultType)))(),
    InAppWebViewHitTestResultTypeLToboolL: () => (T.InAppWebViewHitTestResultTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.InAppWebViewHitTestResultTypeL()])))(),
    JSArrayOfInAppWebViewHitTestResultTypeL: () => (T.JSArrayOfInAppWebViewHitTestResultTypeL = dart.constFn(_interceptors.JSArray$(T.InAppWebViewHitTestResultTypeL())))(),
    RendererPriorityL: () => (T.RendererPriorityL = dart.constFn(dart.legacy(types.RendererPriority)))(),
    RendererPriorityLToboolL: () => (T.RendererPriorityLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.RendererPriorityL()])))(),
    JSArrayOfRendererPriorityL: () => (T.JSArrayOfRendererPriorityL = dart.constFn(_interceptors.JSArray$(T.RendererPriorityL())))(),
    AndroidOverScrollModeL: () => (T.AndroidOverScrollModeL = dart.constFn(dart.legacy(types.AndroidOverScrollMode)))(),
    AndroidOverScrollModeLToboolL: () => (T.AndroidOverScrollModeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidOverScrollModeL()])))(),
    JSArrayOfAndroidOverScrollModeL: () => (T.JSArrayOfAndroidOverScrollModeL = dart.constFn(_interceptors.JSArray$(T.AndroidOverScrollModeL())))(),
    AndroidScrollBarStyleL: () => (T.AndroidScrollBarStyleL = dart.constFn(dart.legacy(types.AndroidScrollBarStyle)))(),
    AndroidScrollBarStyleLToboolL: () => (T.AndroidScrollBarStyleLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidScrollBarStyleL()])))(),
    JSArrayOfAndroidScrollBarStyleL: () => (T.JSArrayOfAndroidScrollBarStyleL = dart.constFn(_interceptors.JSArray$(T.AndroidScrollBarStyleL())))(),
    AndroidVerticalScrollbarPositionL: () => (T.AndroidVerticalScrollbarPositionL = dart.constFn(dart.legacy(types.AndroidVerticalScrollbarPosition)))(),
    AndroidVerticalScrollbarPositionLToboolL: () => (T.AndroidVerticalScrollbarPositionLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidVerticalScrollbarPositionL()])))(),
    JSArrayOfAndroidVerticalScrollbarPositionL: () => (T.JSArrayOfAndroidVerticalScrollbarPositionL = dart.constFn(_interceptors.JSArray$(T.AndroidVerticalScrollbarPositionL())))(),
    WebStorageTypeL: () => (T.WebStorageTypeL = dart.constFn(dart.legacy(types.WebStorageType)))(),
    WebStorageTypeLToboolL: () => (T.WebStorageTypeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.WebStorageTypeL()])))(),
    JSArrayOfWebStorageTypeL: () => (T.JSArrayOfWebStorageTypeL = dart.constFn(_interceptors.JSArray$(T.WebStorageTypeL())))(),
    HTTPCookieSameSitePolicyL: () => (T.HTTPCookieSameSitePolicyL = dart.constFn(dart.legacy(types.HTTPCookieSameSitePolicy)))(),
    HTTPCookieSameSitePolicyLToboolL: () => (T.HTTPCookieSameSitePolicyLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.HTTPCookieSameSitePolicyL()])))(),
    JSArrayOfHTTPCookieSameSitePolicyL: () => (T.JSArrayOfHTTPCookieSameSitePolicyL = dart.constFn(_interceptors.JSArray$(T.HTTPCookieSameSitePolicyL())))(),
    AndroidSslErrorL: () => (T.AndroidSslErrorL = dart.constFn(dart.legacy(types.AndroidSslError)))(),
    AndroidSslErrorLToboolL: () => (T.AndroidSslErrorLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AndroidSslErrorL()])))(),
    JSArrayOfAndroidSslErrorL: () => (T.JSArrayOfAndroidSslErrorL = dart.constFn(_interceptors.JSArray$(T.AndroidSslErrorL())))(),
    IOSSslErrorL: () => (T.IOSSslErrorL = dart.constFn(dart.legacy(types.IOSSslError)))(),
    IOSSslErrorLToboolL: () => (T.IOSSslErrorLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSSslErrorL()])))(),
    JSArrayOfIOSSslErrorL: () => (T.JSArrayOfIOSSslErrorL = dart.constFn(_interceptors.JSArray$(T.IOSSslErrorL())))(),
    IOSUIScrollViewContentInsetAdjustmentBehaviorL: () => (T.IOSUIScrollViewContentInsetAdjustmentBehaviorL = dart.constFn(dart.legacy(types.IOSUIScrollViewContentInsetAdjustmentBehavior)))(),
    IOSUIScrollViewContentInsetAdjustmentBehaviorLToboolL: () => (T.IOSUIScrollViewContentInsetAdjustmentBehaviorLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.IOSUIScrollViewContentInsetAdjustmentBehaviorL()])))(),
    JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehaviorL: () => (T.JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehaviorL = dart.constFn(_interceptors.JSArray$(T.IOSUIScrollViewContentInsetAdjustmentBehaviorL())))()
  });
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = Object.create({
    _: () => S
  });
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(web_storage_manager.WebStorageManager._handleMethod, T.MethodCallLToFutureL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_webstoragemanager"
      });
    },
    get C4() {
      return C[4] = dart.fn(cookie_manager.CookieManager._handleMethod, T.MethodCallLToFutureL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_cookiemanager"
      });
    },
    get C6() {
      return C[6] = dart.constMap(T.StringL(), T.StringL(), []);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_chromesafaribrowser"
      });
    },
    get C8() {
      return C[8] = dart.fn(http_auth_credentials_database.HttpAuthCredentialDatabase._handleMethod, T.MethodCallLToFutureL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_credential_database"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 343,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 344,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 345,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "layoutDirection",
        [_Location_column]: 9,
        [_Location_line]: 346,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 347,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 356,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17], T._LocationL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 342,
        [_Location_file]: "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/in_app_webview.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 379,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 380,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 381,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 382,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 391,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.constList([C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], T._LocationL());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[19] || CT.C19,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 378,
        [_Location_file]: "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/in_app_webview.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 89,
        [_Location_line]: 395,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27], T._LocationL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 394,
        [_Location_file]: "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/in_app_webview.dart"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_headless_inappwebview"
      });
    },
    get C29() {
      return C[29] = dart.constList([], T.ContentBlockerTriggerResourceTypeL());
    },
    get C30() {
      return C[30] = dart.constList([], T.StringL());
    },
    get C31() {
      return C[31] = dart.constList([], T.ContentBlockerTriggerLoadTypeL());
    },
    get C32() {
      return C[32] = dart.constList([], T.ContentBlockerL());
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [UserPreferredContentMode__value]: 0
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [AndroidCacheMode__value]: -1
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [AndroidForceDark__value]: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [AndroidOverScrollMode__value]: 1
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [AndroidScrollBarStyle__value]: 0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [AndroidVerticalScrollbarPosition__value]: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: types.IOSWKSelectionGranularity.prototype,
        [IOSWKSelectionGranularity__value]: 0
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "NONE"
      });
    },
    get C40() {
      return C[40] = dart.constList([C[41] || CT.C41], T.IOSWKDataDetectorTypesL());
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: types.IOSUIScrollViewDecelerationRate.prototype,
        [IOSUIScrollViewDecelerationRate__value]: "NORMAL"
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 2
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 0
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [IOSUIModalTransitionStyle__value]: 0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [IOSSafariDismissButtonStyle__value]: 0
      });
    },
    get C47() {
      return C[47] = dart.constList(["onLoadResource", "shouldInterceptAjaxRequest", "onAjaxReadyStateChange", "onAjaxProgress", "shouldInterceptFetchRequest", "onPrint", "onWindowFocus", "onWindowBlur"], T.StringL());
    },
    get C48() {
      return C[48] = dart.constList([], T.ContextMenuItemL());
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.pichillilorenzo/flutter_inappbrowser"
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [_value$]: 0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [_value$]: 1
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [_value$]: 2
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [_value$]: 3
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [_value$]: 4
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: types.JsAlertResponseAction.prototype,
        [_value$0]: 0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: types.JsConfirmResponseAction.prototype,
        [_value$1]: 0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: types.JsConfirmResponseAction.prototype,
        [_value$1]: 1
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: types.JsPromptResponseAction.prototype,
        [_value$2]: 0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: types.JsPromptResponseAction.prototype,
        [_value$2]: 1
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: types.JsBeforeUnloadResponseAction.prototype,
        [_value$3]: 0
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: types.JsBeforeUnloadResponseAction.prototype,
        [_value$3]: 1
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [_value$4]: 0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [_value$4]: 1
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [_value$4]: 2
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [_value$4]: 3
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [_value$4]: 4
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [_value$5]: 0
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [_value$5]: 1
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [_value$5]: 2
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [_value$6]: 0
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [_value$6]: 1
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [_value$6]: 2
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: types.ServerTrustAuthResponseAction.prototype,
        [_value$7]: 0
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: types.ServerTrustAuthResponseAction.prototype,
        [_value$7]: 1
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [_value$8]: 0
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [_value$8]: 1
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [_value$8]: 2
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [AndroidCacheMode__value]: 1
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [AndroidCacheMode__value]: 2
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [AndroidCacheMode__value]: 3
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [_value$10]: 0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [_value$10]: 1
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [_value$10]: 2
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [_value$10]: 4
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [AndroidForceDark__value]: 1
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [AndroidForceDark__value]: 2
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [_value$12]: "NORMAL"
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [_value$12]: "TEXT_AUTOSIZING"
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [_value$12]: "NARROW_COLUMNS"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [_value$13]: 0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [_value$13]: 1
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [_value$13]: 2
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: types.IOSWKSelectionGranularity.prototype,
        [IOSWKSelectionGranularity__value]: 1
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "PHONE_NUMBER"
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "LINK"
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "ADDRESS"
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "CALENDAR_EVENT"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "TRACKING_NUMBER"
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "FLIGHT_NUMBER"
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "LOOKUP_SUGGESTION"
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "SPOTLIGHT_SUGGESTION"
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [IOSWKDataDetectorTypes__value]: "ALL"
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: types.IOSUIScrollViewDecelerationRate.prototype,
        [IOSUIScrollViewDecelerationRate__value]: "FAST"
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [UserPreferredContentMode__value]: 1
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [UserPreferredContentMode__value]: 2
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 1
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 2
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 3
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 4
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 5
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 6
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 7
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 8
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [IOSUIModalPresentationStyle__value]: 9
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [IOSUIModalTransitionStyle__value]: 1
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [IOSUIModalTransitionStyle__value]: 2
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [IOSUIModalTransitionStyle__value]: 3
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [IOSSafariDismissButtonStyle__value]: 1
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [IOSSafariDismissButtonStyle__value]: 2
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: types.AjaxRequestAction.prototype,
        [_value$21]: 0
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: types.AjaxRequestAction.prototype,
        [_value$21]: 1
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "loadstart"
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "load"
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "loadend"
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "progress"
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "error"
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "abort"
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [_value$22]: "timeout"
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [_value$23]: 0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [_value$23]: 1
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [_value$23]: 2
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [_value$23]: 3
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [_value$23]: 4
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: types.FetchRequestAction.prototype,
        [_value$24]: 0
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: types.FetchRequestAction.prototype,
        [_value$24]: 1
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "document"
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "image"
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "style-sheet"
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "script"
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "font"
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "media"
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "svg-document"
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [_value$25]: "raw"
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: types.ContentBlockerTriggerLoadType.prototype,
        [_value$26]: "first-party"
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: types.ContentBlockerTriggerLoadType.prototype,
        [_value$26]: "third-party"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [_value$27]: "block"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [_value$27]: "css-display-none"
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [_value$27]: "make-https"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: types.PermissionRequestResponseAction.prototype,
        [_value$28]: 0
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: types.PermissionRequestResponseAction.prototype,
        [_value$28]: 1
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: types.ShouldOverrideUrlLoadingAction.prototype,
        [_value$29]: 0
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: types.ShouldOverrideUrlLoadingAction.prototype,
        [_value$29]: 1
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: 0
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: 1
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: 2
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: 3
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: 4
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [_value$30]: -1
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeFetchCache"
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeDiskCache"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeMemoryCache"
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeOfflineWebApplicationCache"
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeCookies"
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeSessionStorage"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeLocalStorage"
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeWebSQLDatabases"
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeIndexedDBDatabases"
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [_value$31]: "WKWebsiteDataTypeServiceWorkerRegistrations"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 0
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 2
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 3
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 4
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 5
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 7
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 8
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [_value$32]: 9
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: types.WebViewRenderProcessAction.prototype,
        [_value$33]: 0
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [_value$34]: 0
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [_value$34]: 1
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [_value$34]: 2
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: types.FormResubmissionAction.prototype,
        [_value$35]: 0
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: types.FormResubmissionAction.prototype,
        [_value$35]: 1
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [AndroidOverScrollMode__value]: 0
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [AndroidOverScrollMode__value]: 2
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [AndroidScrollBarStyle__value]: 16777216
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [AndroidScrollBarStyle__value]: 33554432
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [AndroidScrollBarStyle__value]: 50331648
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [AndroidVerticalScrollbarPosition__value]: 1
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [AndroidVerticalScrollbarPosition__value]: 2
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: types.WebStorageType.prototype,
        [_value$39]: "localStorage"
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: types.WebStorageType.prototype,
        [_value$39]: "sessionStorage"
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [_value$40]: "Lax"
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [_value$40]: "Strict"
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [_value$40]: "None"
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 0
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 1
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 2
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 3
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 4
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [_value$41]: 5
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 0
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 3
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 4
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 5
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 6
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [_value$42]: 7
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 0
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 1
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 3
      });
    }
  }, false);
  var C = Array(210).fill(void 0);
  var I = [
    "package:flutter_inappwebview/src/web_storage_manager.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/web_storage_manager.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/cookie_manager.dart",
    "package:flutter_inappwebview/src/cookie_manager.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/chrome_safari_browser.dart",
    "package:flutter_inappwebview/src/chrome_safari_browser.dart",
    "package:flutter_inappwebview/src/http_auth_credentials_database.dart",
    "package:flutter_inappwebview/src/web_storage.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/web_storage.dart",
    "package:flutter_inappwebview/src/in_app_webview.dart",
    "package:flutter_inappwebview/src/headless_in_app_webview.dart",
    "package:flutter_inappwebview/src/content_blocker.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/content_blocker.dart",
    "package:flutter_inappwebview/src/webview_options.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/webview_options.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/in_app_webview_controller.dart",
    "package:flutter_inappwebview/src/in_app_webview_controller.dart",
    "package:flutter_inappwebview/src/webview.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/context_menu.dart",
    "package:flutter_inappwebview/src/context_menu.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/in_app_browser.dart",
    "package:flutter_inappwebview/src/in_app_browser.dart",
    "package:flutter_inappwebview/src/types.dart",
    "file:///C:/flutter_windows_v1.12.13+hotfix.8-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-4.0.0+4/lib/src/types.dart"
  ];
  var android = dart.privateName(web_storage_manager, "WebStorageManager.android");
  var ios = dart.privateName(web_storage_manager, "WebStorageManager.ios");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  web_storage_manager.WebStorageManager = class WebStorageManager extends core.Object {
    get android() {
      return this[android];
    }
    set android(value) {
      this[android] = value;
    }
    get ios() {
      return this[ios];
    }
    set ios(value) {
      this[ios] = value;
    }
    static instance() {
      return web_storage_manager.WebStorageManager._instance != null ? web_storage_manager.WebStorageManager._instance : web_storage_manager.WebStorageManager._init();
    }
    static _init() {
      web_storage_manager.WebStorageManager._channel.setMethodCallHandler(C[0] || CT.C0);
      web_storage_manager.WebStorageManager._instance = new web_storage_manager.WebStorageManager.new();
      return web_storage_manager.WebStorageManager._instance;
    }
    static _handleMethod(call) {
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
  };
  (web_storage_manager.WebStorageManager.new = function() {
    this[android] = new web_storage_manager.AndroidWebStorageManager.new();
    this[ios] = new web_storage_manager.IOSWebStorageManager.new();
    ;
  }).prototype = web_storage_manager.WebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager.WebStorageManager);
  dart.addTypeCaches(web_storage_manager.WebStorageManager);
  dart.setLibraryUri(web_storage_manager.WebStorageManager, I[0]);
  dart.setFieldSignature(web_storage_manager.WebStorageManager, () => ({
    __proto__: dart.getFields(web_storage_manager.WebStorageManager.__proto__),
    android: dart.fieldType(dart.legacy(web_storage_manager.AndroidWebStorageManager)),
    ios: dart.fieldType(dart.legacy(web_storage_manager.IOSWebStorageManager))
  }));
  dart.defineLazy(web_storage_manager.WebStorageManager, {
    /*web_storage_manager.WebStorageManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*web_storage_manager.WebStorageManager._channel*/get _channel() {
      return C[1] || CT.C1;
    }
  }, true);
  web_storage_manager.AndroidWebStorageManager = class AndroidWebStorageManager extends core.Object {
    getOrigins() {
      return async.async(T.ListLOfAndroidWebStorageOriginL(), function* getOrigins() {
        let originsList = T.JSArrayOfAndroidWebStorageOriginL().of([]);
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let origins = T.ListLOfMapL().as(dart.dgsend(yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "getOrigins", args), [T.MapL()], 'cast', []));
        for (let origin of origins) {
          originsList[$add](new types.AndroidWebStorageOrigin.new({origin: T.StringL().as(origin[$_get]("origin")), quota: T.intL().as(origin[$_get]("quota")), usage: T.intL().as(origin[$_get]("usage"))}));
        }
        return originsList;
      });
    }
    deleteAllData() {
      return async.async(dart.void, function* deleteAllData() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "deleteAllData", args);
      });
    }
    deleteOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      return async.async(dart.void, function* deleteOrigin() {
        if (!(origin != null)) dart.assertFailed(null, I[1], 67, 12, "origin != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToStringL()));
        yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "deleteOrigin", args);
      });
    }
    getQuotaForOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      return async.async(T.intL(), function* getQuotaForOrigin() {
        if (!(origin != null)) dart.assertFailed(null, I[1], 77, 12, "origin != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToStringL()));
        return yield web_storage_manager.WebStorageManager._channel.invokeMethod(T.intL(), "getQuotaForOrigin", args);
      });
    }
    getUsageForOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      return async.async(T.intL(), function* getUsageForOrigin() {
        if (!(origin != null)) dart.assertFailed(null, I[1], 87, 12, "origin != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToStringL()));
        return yield web_storage_manager.WebStorageManager._channel.invokeMethod(T.intL(), "getUsageForOrigin", args);
      });
    }
  };
  (web_storage_manager.AndroidWebStorageManager.new = function() {
    ;
  }).prototype = web_storage_manager.AndroidWebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager.AndroidWebStorageManager);
  dart.addTypeCaches(web_storage_manager.AndroidWebStorageManager);
  dart.setMethodSignature(web_storage_manager.AndroidWebStorageManager, () => ({
    __proto__: dart.getMethods(web_storage_manager.AndroidWebStorageManager.__proto__),
    getOrigins: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.AndroidWebStorageOrigin))))), []),
    deleteAllData: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    deleteOrigin: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {origin: dart.legacy(core.String)}, {}),
    getQuotaForOrigin: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [], {origin: dart.legacy(core.String)}, {}),
    getUsageForOrigin: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [], {origin: dart.legacy(core.String)}, {})
  }));
  dart.setLibraryUri(web_storage_manager.AndroidWebStorageManager, I[0]);
  web_storage_manager.IOSWebStorageManager = class IOSWebStorageManager extends core.Object {
    fetchDataRecords(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      return async.async(T.ListLOfIOSWKWebsiteDataRecordL(), function* fetchDataRecords() {
        if (!(dataTypes != null)) dart.assertFailed(null, I[1], 105, 12, "dataTypes != null");
        let recordList = T.JSArrayOfIOSWKWebsiteDataRecordL().of([]);
        let dataTypesList = T.JSArrayOfStringL().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[$add](dataType.toValue());
        }
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListLOfStringL()));
        let records = T.ListLOfMapL().as(dart.dgsend(yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "fetchDataRecords", args), [T.MapL()], 'cast', []));
        for (let record of records) {
          let dataTypesString = T.ListLOfStringL().as(dart.dgsend(record[$_get]("dataTypes"), [T.StringL()], 'cast', []));
          let dataTypes = new (T._HashSetOfIOSWKWebsiteDataTypeL()).new();
          for (let dataType of dataTypesString) {
            dataTypes.add(types.IOSWKWebsiteDataType.fromValue(dataType));
          }
          recordList[$add](new types.IOSWKWebsiteDataRecord.new({displayName: T.StringL().as(record[$_get]("displayName")), dataTypes: dataTypes}));
        }
        return recordList;
      });
    }
    removeDataFor(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      let dataRecords = opts && 'dataRecords' in opts ? opts.dataRecords : null;
      return async.async(dart.void, function* removeDataFor() {
        if (!(dataTypes != null && dataRecords != null)) dart.assertFailed(null, I[1], 136, 12, "dataTypes != null && dataRecords != null");
        let dataTypesList = T.JSArrayOfStringL().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[$add](dataType.toValue());
        }
        let recordList = T.JSArrayOfMapLOfStringL$dynamic().of([]);
        for (let record of dataRecords) {
          recordList[$add](record.toMap());
        }
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListLOfStringL()));
        args[$putIfAbsent]("recordList", dart.fn(() => recordList, T.VoidToListLOfMapLOfStringL$dynamic()));
        yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "removeDataFor", args);
      });
    }
    removeDataModifiedSince(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      let date = opts && 'date' in opts ? opts.date : null;
      return async.async(dart.void, function* removeDataModifiedSince() {
        if (!(dataTypes != null && date != null)) dart.assertFailed(null, I[1], 162, 12, "dataTypes != null && date != null");
        let dataTypesList = T.JSArrayOfStringL().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[$add](dataType.toValue());
        }
        let timestamp = date.millisecondsSinceEpoch;
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListLOfStringL()));
        args[$putIfAbsent]("timestamp", dart.fn(() => timestamp, T.VoidTointL()));
        yield web_storage_manager.WebStorageManager._channel.invokeMethod(dart.dynamic, "removeDataModifiedSince", args);
      });
    }
  };
  (web_storage_manager.IOSWebStorageManager.new = function() {
    ;
  }).prototype = web_storage_manager.IOSWebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager.IOSWebStorageManager);
  dart.addTypeCaches(web_storage_manager.IOSWebStorageManager);
  dart.setMethodSignature(web_storage_manager.IOSWebStorageManager, () => ({
    __proto__: dart.getMethods(web_storage_manager.IOSWebStorageManager.__proto__),
    fetchDataRecords: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.IOSWKWebsiteDataRecord))))), [], {dataTypes: dart.legacy(core.Set$(dart.legacy(types.IOSWKWebsiteDataType)))}, {}),
    removeDataFor: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {dataRecords: dart.legacy(core.List$(dart.legacy(types.IOSWKWebsiteDataRecord))), dataTypes: dart.legacy(core.Set$(dart.legacy(types.IOSWKWebsiteDataType)))}, {}),
    removeDataModifiedSince: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {dataTypes: dart.legacy(core.Set$(dart.legacy(types.IOSWKWebsiteDataType))), date: dart.legacy(core.DateTime)}, {})
  }));
  dart.setLibraryUri(web_storage_manager.IOSWebStorageManager, I[0]);
  var _getDomainName = dart.privateName(cookie_manager, "_getDomainName");
  cookie_manager.CookieManager = class CookieManager extends core.Object {
    static instance() {
      return cookie_manager.CookieManager._instance != null ? cookie_manager.CookieManager._instance : cookie_manager.CookieManager._init();
    }
    static _init() {
      cookie_manager.CookieManager._channel.setMethodCallHandler(C[4] || CT.C4);
      cookie_manager.CookieManager._instance = new cookie_manager.CookieManager.new();
      return cookie_manager.CookieManager._instance;
    }
    static _handleMethod(call) {
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
    setCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let path = opts && 'path' in opts ? opts.path : "/";
      let expiresDate = opts && 'expiresDate' in opts ? opts.expiresDate : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : null;
      let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
      let isHttpOnly = opts && 'isHttpOnly' in opts ? opts.isHttpOnly : null;
      let sameSite = opts && 'sameSite' in opts ? opts.sameSite : null;
      return async.async(dart.void, (function* setCookie() {
        if (domain == null) domain = this[_getDomainName](url);
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 48, 12, "url != null && url.isNotEmpty");
        if (!(name != null && name[$isNotEmpty])) dart.assertFailed(null, I[2], 49, 12, "name != null && name.isNotEmpty");
        if (!(value != null && value[$isNotEmpty])) dart.assertFailed(null, I[2], 50, 12, "value != null && value.isNotEmpty");
        if (!(domain != null && domain[$isNotEmpty])) dart.assertFailed(null, I[2], 51, 12, "domain != null && domain.isNotEmpty");
        if (!(path != null && path[$isNotEmpty])) dart.assertFailed(null, I[2], 52, 12, "path != null && path.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("name", dart.fn(() => name, T.VoidToStringL()));
        args[$putIfAbsent]("value", dart.fn(() => value, T.VoidToStringL()));
        args[$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToStringL()));
        args[$putIfAbsent]("path", dart.fn(() => path, T.VoidToStringL()));
        args[$putIfAbsent]("expiresDate", dart.fn(() => {
          let t0;
          t0 = expiresDate;
          return t0 == null ? null : dart.toString(t0);
        }, T.VoidToStringL()));
        args[$putIfAbsent]("maxAge", dart.fn(() => maxAge, T.VoidTointL()));
        args[$putIfAbsent]("isSecure", dart.fn(() => isSecure, T.VoidToboolL()));
        args[$putIfAbsent]("isHttpOnly", dart.fn(() => isHttpOnly, T.VoidToboolL()));
        args[$putIfAbsent]("sameSite", dart.fn(() => {
          let t0;
          t0 = sameSite;
          return t0 == null ? null : t0.toValue();
        }, T.VoidToStringL()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "setCookie", args);
      }).bind(this));
    }
    getCookies(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      return async.async(T.ListLOfCookieL(), function* getCookies() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 71, 12, "url != null && url.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        let cookieListMap = (yield cookie_manager.CookieManager._channel.invokeMethod(T.ListL(), "getCookies", args));
        cookieListMap = cookieListMap[$cast](T.MapL());
        let cookies = T.JSArrayOfCookieL().of([]);
        for (let i = 0; i < dart.notNull(cookieListMap[$length]); i = i + 1) {
          cookies[$add](new types.Cookie.new({name: T.StringL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["name"])), value: dart.dsend(cookieListMap[$_get](i), '_get', ["value"]), expiresDate: T.intL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["expiresDate"])), isSessionOnly: T.boolL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["isSessionOnly"])), domain: T.StringL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["domain"])), sameSite: types.HTTPCookieSameSitePolicy.fromValue(T.StringL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["sameSite"]))), isSecure: T.boolL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["isSecure"])), isHttpOnly: T.boolL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["isHttpOnly"])), path: T.StringL().as(dart.dsend(cookieListMap[$_get](i), '_get', ["path"]))}));
        }
        return cookies;
      });
    }
    getCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return async.async(T.CookieL(), function* getCookie() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 99, 12, "url != null && url.isNotEmpty");
        if (!(name != null && name[$isNotEmpty])) dart.assertFailed(null, I[2], 100, 12, "name != null && name.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        let cookies = (yield cookie_manager.CookieManager._channel.invokeMethod(T.ListL(), "getCookies", args));
        cookies = cookies[$cast](T.MapL());
        for (let i = 0; i < dart.notNull(cookies[$length]); i = i + 1) {
          cookies[$_set](i, dart.dgsend(cookies[$_get](i), [T.StringL(), dart.dynamic], 'cast', []));
          if (dart.equals(dart.dsend(cookies[$_get](i), '_get', ["name"]), name)) return new types.Cookie.new({name: T.StringL().as(dart.dsend(cookies[$_get](i), '_get', ["name"])), value: dart.dsend(cookies[$_get](i), '_get', ["value"]), expiresDate: T.intL().as(dart.dsend(cookies[$_get](i), '_get', ["expiresDate"])), isSessionOnly: T.boolL().as(dart.dsend(cookies[$_get](i), '_get', ["isSessionOnly"])), domain: T.StringL().as(dart.dsend(cookies[$_get](i), '_get', ["domain"])), sameSite: types.HTTPCookieSameSitePolicy.fromValue(T.StringL().as(dart.dsend(cookies[$_get](i), '_get', ["sameSite"]))), isSecure: T.boolL().as(dart.dsend(cookies[$_get](i), '_get', ["isSecure"])), isHttpOnly: T.boolL().as(dart.dsend(cookies[$_get](i), '_get', ["isHttpOnly"])), path: T.StringL().as(dart.dsend(cookies[$_get](i), '_get', ["path"]))});
        }
        return null;
      });
    }
    deleteCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let domain = opts && 'domain' in opts ? opts.domain : "";
      let path = opts && 'path' in opts ? opts.path : "/";
      return async.async(dart.void, (function* deleteCookie() {
        if (domain == null || domain[$isEmpty]) domain = this[_getDomainName](url);
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 135, 12, "url != null && url.isNotEmpty");
        if (!(name != null && name[$isNotEmpty])) dart.assertFailed(null, I[2], 136, 12, "name != null && name.isNotEmpty");
        if (!(domain != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 137, 12, "domain != null && url.isNotEmpty");
        if (!(path != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 138, 12, "path != null && url.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("name", dart.fn(() => name, T.VoidToStringL()));
        args[$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToStringL()));
        args[$putIfAbsent]("path", dart.fn(() => path, T.VoidToStringL()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteCookie", args);
      }).bind(this));
    }
    deleteCookies(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let domain = opts && 'domain' in opts ? opts.domain : "";
      let path = opts && 'path' in opts ? opts.path : "/";
      return async.async(dart.void, (function* deleteCookies() {
        if (domain == null || domain[$isEmpty]) domain = this[_getDomainName](url);
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 156, 12, "url != null && url.isNotEmpty");
        if (!(domain != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 157, 12, "domain != null && url.isNotEmpty");
        if (!(path != null && url[$isNotEmpty])) dart.assertFailed(null, I[2], 158, 12, "path != null && url.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToStringL()));
        args[$putIfAbsent]("path", dart.fn(() => path, T.VoidToStringL()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteCookies", args);
      }).bind(this));
    }
    deleteAllCookies() {
      return async.async(dart.void, function* deleteAllCookies() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteAllCookies", args);
      });
    }
    [_getDomainName](url) {
      let uri = core.Uri.parse(url);
      let domain = uri.host;
      if (domain == null) return "";
      return domain[$startsWith]("www.") ? domain[$substring](4) : domain;
    }
  };
  (cookie_manager.CookieManager.new = function() {
    ;
  }).prototype = cookie_manager.CookieManager.prototype;
  dart.addTypeTests(cookie_manager.CookieManager);
  dart.addTypeCaches(cookie_manager.CookieManager);
  dart.setMethodSignature(cookie_manager.CookieManager, () => ({
    __proto__: dart.getMethods(cookie_manager.CookieManager.__proto__),
    setCookie: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {domain: dart.legacy(core.String), expiresDate: dart.legacy(core.int), isHttpOnly: dart.legacy(core.bool), isSecure: dart.legacy(core.bool), maxAge: dart.legacy(core.int), name: dart.legacy(core.String), path: dart.legacy(core.String), sameSite: dart.legacy(types.HTTPCookieSameSitePolicy), url: dart.legacy(core.String), value: dart.legacy(core.String)}, {}),
    getCookies: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.Cookie))))), [], {url: dart.legacy(core.String)}, {}),
    getCookie: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.Cookie))), [], {name: dart.legacy(core.String), url: dart.legacy(core.String)}, {}),
    deleteCookie: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {domain: dart.legacy(core.String), name: dart.legacy(core.String), path: dart.legacy(core.String), url: dart.legacy(core.String)}, {}),
    deleteCookies: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {domain: dart.legacy(core.String), path: dart.legacy(core.String), url: dart.legacy(core.String)}, {}),
    deleteAllCookies: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_getDomainName]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(cookie_manager.CookieManager, I[3]);
  dart.defineLazy(cookie_manager.CookieManager, {
    /*cookie_manager.CookieManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*cookie_manager.CookieManager._channel*/get _channel() {
      return C[5] || CT.C5;
    }
  }, true);
  var uuid$ = dart.privateName(chrome_safari_browser, "ChromeSafariBrowser.uuid");
  var browserFallback = dart.privateName(chrome_safari_browser, "ChromeSafariBrowser.browserFallback");
  var _menuItems = dart.privateName(chrome_safari_browser, "_menuItems");
  var _isOpened = dart.privateName(chrome_safari_browser, "_isOpened");
  var _channel = dart.privateName(chrome_safari_browser, "_channel");
  chrome_safari_browser.ChromeSafariBrowser = class ChromeSafariBrowser extends core.Object {
    get uuid() {
      return this[uuid$];
    }
    set uuid(value) {
      this[uuid$] = value;
    }
    get browserFallback() {
      return this[browserFallback];
    }
    set browserFallback(value) {
      this[browserFallback] = value;
    }
    handleMethod(call) {
      return async.async(dart.dynamic, (function* handleMethod() {
        let t2, t1, t0;
        switch (call.method) {
          case "onChromeSafariBrowserOpened":
          {
            this.onOpened();
            break;
          }
          case "onChromeSafariBrowserCompletedInitialLoad":
          {
            this.onCompletedInitialLoad();
            break;
          }
          case "onChromeSafariBrowserClosed":
          {
            this.onClosed();
            this[_isOpened] = false;
            break;
          }
          case "onChromeSafariBrowserMenuItemActionPerform":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let title = T.StringL().as(dart.dsend(call.arguments, '_get', ["title"]));
            let id = T.intL().as(dart.dsend(dart.dsend(call.arguments, '_get', ["id"]), 'toInt', []));
            t0 = this[_menuItems][$_get](id);
            t1 = url;
            t2 = title;
            t0.action(t1, t2);
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
      }).bind(this));
    }
    open(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let headersFallback = opts && 'headersFallback' in opts ? opts.headersFallback : C[6] || CT.C6;
      let optionsFallback = opts && 'optionsFallback' in opts ? opts.optionsFallback : null;
      return async.async(dart.void, (function* open() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[4], 72, 12, "url != null && url.isNotEmpty");
        this.throwIsAlreadyOpened({message: "Cannot open " + dart.str(url) + "!"});
        let menuItemList = T.JSArrayOfMapLOfStringL$dynamic().of([]);
        this[_menuItems][$forEach](dart.fn((key, value) => {
          menuItemList[$add](new (T.IdentityMapOfStringL$dynamic()).from(["id", value.id, "label", value.label]));
        }, T.intLAndChromeSafariBrowserMenuItemLToNull()));
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("options", dart.fn(() => {
          let t0, t0$;
          t0$ = (t0 = options, t0 == null ? null : t0.toMap());
          return t0$ == null ? new _js_helper.LinkedMap.new() : t0$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("menuItemList", dart.fn(() => menuItemList, T.VoidToListLOfMapLOfStringL$dynamic()));
        args[$putIfAbsent]("uuidFallback", dart.fn(() => {
          let t0;
          t0 = this.browserFallback;
          return t0 == null ? null : t0.uuid;
        }, T.VoidToStringL()));
        args[$putIfAbsent]("headersFallback", dart.fn(() => {
          let t0;
          t0 = headersFallback;
          return t0 == null ? new _js_helper.LinkedMap.new() : t0;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("optionsFallback", dart.fn(() => {
          let t0, t0$;
          t0$ = (t0 = optionsFallback, t0 == null ? null : t0.toMap());
          return t0$ == null ? new _js_helper.LinkedMap.new() : t0$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("contextMenuFallback", dart.fn(() => {
          let t0, t0$, t0$0;
          t0$0 = (t0$ = (t0 = this.browserFallback, t0 == null ? null : t0.contextMenu), t0$ == null ? null : t0$.toMap());
          return t0$0 == null ? new _js_helper.LinkedMap.new() : t0$0;
        }, T.VoidToMapL()));
        yield chrome_safari_browser.ChromeSafariBrowser._sharedChannel.invokeMethod(dart.dynamic, "open", args);
        this[_isOpened] = true;
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel].invokeMethod(dart.dynamic, "close", args);
      }).bind(this));
    }
    addMenuItem(menuItem) {
      this[_menuItems][$_set](menuItem.id, menuItem);
    }
    addMenuItems(menuItems) {
      menuItems[$forEach](dart.fn(menuItem => {
        this[_menuItems][$_set](menuItem.id, menuItem);
      }, T.ChromeSafariBrowserMenuItemLToNull()));
    }
    static isAvailable() {
      return async.async(T.boolL(), function* isAvailable() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield chrome_safari_browser.ChromeSafariBrowser._sharedChannel.invokeMethod(T.boolL(), "isAvailable", args);
      });
    }
    onOpened() {
    }
    onCompletedInitialLoad() {
    }
    onClosed() {
    }
    isOpened() {
      return this[_isOpened];
    }
    throwIsAlreadyOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (dart.test(this.isOpened())) {
        dart.throw(core.Exception.new(T.JSArrayOfStringL().of(["Error: " + (message[$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is already opened."])));
      }
    }
    throwIsNotOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (!dart.test(this.isOpened())) {
        dart.throw(core.Exception.new(T.JSArrayOfStringL().of(["Error: " + (message[$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is not opened."])));
      }
    }
  };
  (chrome_safari_browser.ChromeSafariBrowser.new = function(opts) {
    let bFallback = opts && 'bFallback' in opts ? opts.bFallback : null;
    this[uuid$] = null;
    this[browserFallback] = null;
    this[_menuItems] = new (T.IdentityMapOfintL$ChromeSafariBrowserMenuItemL()).new();
    this[_isOpened] = false;
    this[_channel] = null;
    this.uuid = types.uuidGenerator.v4();
    this.browserFallback = T.InAppBrowserL().as(bFallback);
    this[_channel] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_chromesafaribrowser_" + dart.str(this.uuid));
    this[_channel].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[_isOpened] = false;
  }).prototype = chrome_safari_browser.ChromeSafariBrowser.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowser);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowser);
  dart.setMethodSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getMethods(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    handleMethod: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall)]),
    open: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {headersFallback: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), options: dart.legacy(types.ChromeSafariBrowserClassOptions), optionsFallback: dart.legacy(types.InAppBrowserClassOptions), url: dart.legacy(core.String)}, {}),
    close: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    addMenuItem: dart.fnType(dart.void, [dart.legacy(chrome_safari_browser.ChromeSafariBrowserMenuItem)]),
    addMenuItems: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(chrome_safari_browser.ChromeSafariBrowserMenuItem)))]),
    onOpened: dart.fnType(dart.void, []),
    onCompletedInitialLoad: dart.fnType(dart.void, []),
    onClosed: dart.fnType(dart.void, []),
    isOpened: dart.fnType(dart.legacy(core.bool), []),
    throwIsAlreadyOpened: dart.fnType(dart.void, [], {message: dart.legacy(core.String)}, {}),
    throwIsNotOpened: dart.fnType(dart.void, [], {message: dart.legacy(core.String)}, {})
  }));
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowser, I[5]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    uuid: dart.fieldType(dart.legacy(core.String)),
    browserFallback: dart.fieldType(dart.legacy(in_app_browser.InAppBrowser)),
    [_menuItems]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(chrome_safari_browser.ChromeSafariBrowserMenuItem)))),
    [_isOpened]: dart.fieldType(dart.legacy(core.bool)),
    [_channel]: dart.fieldType(dart.legacy(platform_channel.MethodChannel))
  }));
  dart.defineLazy(chrome_safari_browser.ChromeSafariBrowser, {
    /*chrome_safari_browser.ChromeSafariBrowser._sharedChannel*/get _sharedChannel() {
      return C[7] || CT.C7;
    }
  }, true);
  var id$ = dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.id");
  var label$ = dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.label");
  var action$ = dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.action");
  chrome_safari_browser.ChromeSafariBrowserMenuItem = class ChromeSafariBrowserMenuItem extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      this[label$] = value;
    }
    get action() {
      return this[action$];
    }
    set action(value) {
      super.action = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["id", this.id, "label", this.label]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (chrome_safari_browser.ChromeSafariBrowserMenuItem.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let action = opts && 'action' in opts ? opts.action : null;
    this[id$] = id;
    this[label$] = label;
    this[action$] = action;
    ;
  }).prototype = chrome_safari_browser.ChromeSafariBrowserMenuItem.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowserMenuItem);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowserMenuItem);
  dart.setMethodSignature(chrome_safari_browser.ChromeSafariBrowserMenuItem, () => ({
    __proto__: dart.getMethods(chrome_safari_browser.ChromeSafariBrowserMenuItem.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowserMenuItem, I[5]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowserMenuItem, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowserMenuItem.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    label: dart.fieldType(dart.legacy(core.String)),
    action: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)])))
  }));
  dart.defineExtensionMethods(chrome_safari_browser.ChromeSafariBrowserMenuItem, ['toString']);
  http_auth_credentials_database.HttpAuthCredentialDatabase = class HttpAuthCredentialDatabase extends core.Object {
    static instance() {
      return http_auth_credentials_database.HttpAuthCredentialDatabase._instance != null ? http_auth_credentials_database.HttpAuthCredentialDatabase._instance : http_auth_credentials_database.HttpAuthCredentialDatabase._init();
    }
    static _init() {
      http_auth_credentials_database.HttpAuthCredentialDatabase._channel.setMethodCallHandler(C[8] || CT.C8);
      http_auth_credentials_database.HttpAuthCredentialDatabase._instance = new http_auth_credentials_database.HttpAuthCredentialDatabase.new();
      return http_auth_credentials_database.HttpAuthCredentialDatabase._instance;
    }
    static _handleMethod(call) {
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
    getAllAuthCredentials() {
      return async.async(T.ListLOfProtectionSpaceHttpAuthCredentialsL(), function* getAllAuthCredentials() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let allCredentials = (yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(T.ListL(), "getAllAuthCredentials", args));
        let result = T.JSArrayOfProtectionSpaceHttpAuthCredentialsL().of([]);
        for (let t0 of allCredentials) {
          let map = T.MapL().as(t0);
          let protectionSpace = T.MapL().as(map[$_get]("protectionSpace"));
          let credentials = T.ListL().as(map[$_get]("credentials"));
          result[$add](new types.ProtectionSpaceHttpAuthCredentials.new({protectionSpace: new types.ProtectionSpace.new({host: T.StringL().as(protectionSpace[$_get]("host")), protocol: T.StringL().as(protectionSpace[$_get]("protocol")), realm: T.StringL().as(protectionSpace[$_get]("realm")), port: T.intL().as(protectionSpace[$_get]("port"))}), credentials: credentials[$map](T.HttpAuthCredentialL(), dart.fn(credential => new types.HttpAuthCredential.new({username: T.StringL().as(dart.dsend(credential, '_get', ["username"])), password: T.StringL().as(dart.dsend(credential, '_get', ["password"]))}), T.dynamicToHttpAuthCredentialL()))[$toList]()}));
        }
        return result;
      });
    }
    getHttpAuthCredentials(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      return async.async(T.ListLOfHttpAuthCredentialL(), function* getHttpAuthCredentials() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToStringL()));
        args[$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringL()));
        args[$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringL()));
        args[$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointL()));
        let credentialList = (yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(T.ListL(), "getHttpAuthCredentials", args));
        let credentials = T.JSArrayOfHttpAuthCredentialL().of([]);
        for (let t1 of credentialList) {
          let credential = T.MapL().as(t1);
          credentials[$add](new types.HttpAuthCredential.new({username: T.StringL().as(credential[$_get]("username")), password: T.StringL().as(credential[$_get]("password"))}));
        }
        return credentials;
      });
    }
    setHttpAuthCredential(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      let credential = opts && 'credential' in opts ? opts.credential : null;
      return async.async(dart.void, function* setHttpAuthCredential() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToStringL()));
        args[$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringL()));
        args[$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringL()));
        args[$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointL()));
        args[$putIfAbsent]("username", dart.fn(() => credential.username, T.VoidToStringL()));
        args[$putIfAbsent]("password", dart.fn(() => credential.password, T.VoidToStringL()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "setHttpAuthCredential", args);
      });
    }
    removeHttpAuthCredential(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      let credential = opts && 'credential' in opts ? opts.credential : null;
      return async.async(dart.void, function* removeHttpAuthCredential() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToStringL()));
        args[$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringL()));
        args[$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringL()));
        args[$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointL()));
        args[$putIfAbsent]("username", dart.fn(() => credential.username, T.VoidToStringL()));
        args[$putIfAbsent]("password", dart.fn(() => credential.password, T.VoidToStringL()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "removeHttpAuthCredential", args);
      });
    }
    removeHttpAuthCredentials(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      return async.async(dart.void, function* removeHttpAuthCredentials() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToStringL()));
        args[$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringL()));
        args[$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringL()));
        args[$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointL()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "removeHttpAuthCredentials", args);
      });
    }
    clearAllAuthCredentials() {
      return async.async(dart.void, function* clearAllAuthCredentials() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "clearAllAuthCredentials", args);
      });
    }
  };
  (http_auth_credentials_database.HttpAuthCredentialDatabase.new = function() {
    ;
  }).prototype = http_auth_credentials_database.HttpAuthCredentialDatabase.prototype;
  dart.addTypeTests(http_auth_credentials_database.HttpAuthCredentialDatabase);
  dart.addTypeCaches(http_auth_credentials_database.HttpAuthCredentialDatabase);
  dart.setMethodSignature(http_auth_credentials_database.HttpAuthCredentialDatabase, () => ({
    __proto__: dart.getMethods(http_auth_credentials_database.HttpAuthCredentialDatabase.__proto__),
    getAllAuthCredentials: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.ProtectionSpaceHttpAuthCredentials))))), []),
    getHttpAuthCredentials: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.HttpAuthCredential))))), [], {protectionSpace: dart.legacy(types.ProtectionSpace)}, {}),
    setHttpAuthCredential: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {credential: dart.legacy(types.HttpAuthCredential), protectionSpace: dart.legacy(types.ProtectionSpace)}, {}),
    removeHttpAuthCredential: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {credential: dart.legacy(types.HttpAuthCredential), protectionSpace: dart.legacy(types.ProtectionSpace)}, {}),
    removeHttpAuthCredentials: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {protectionSpace: dart.legacy(types.ProtectionSpace)}, {}),
    clearAllAuthCredentials: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(http_auth_credentials_database.HttpAuthCredentialDatabase, I[6]);
  dart.defineLazy(http_auth_credentials_database.HttpAuthCredentialDatabase, {
    /*http_auth_credentials_database.HttpAuthCredentialDatabase._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*http_auth_credentials_database.HttpAuthCredentialDatabase._channel*/get _channel() {
      return C[9] || CT.C9;
    }
  }, true);
  var localStorage$ = dart.privateName(web_storage, "WebStorage.localStorage");
  var sessionStorage$ = dart.privateName(web_storage, "WebStorage.sessionStorage");
  web_storage.WebStorage = class WebStorage extends core.Object {
    get localStorage() {
      return this[localStorage$];
    }
    set localStorage(value) {
      this[localStorage$] = value;
    }
    get sessionStorage() {
      return this[sessionStorage$];
    }
    set sessionStorage(value) {
      this[sessionStorage$] = value;
    }
  };
  (web_storage.WebStorage.new = function(opts) {
    let localStorage = opts && 'localStorage' in opts ? opts.localStorage : null;
    let sessionStorage = opts && 'sessionStorage' in opts ? opts.sessionStorage : null;
    this[localStorage$] = localStorage;
    this[sessionStorage$] = sessionStorage;
    ;
  }).prototype = web_storage.WebStorage.prototype;
  dart.addTypeTests(web_storage.WebStorage);
  dart.addTypeCaches(web_storage.WebStorage);
  dart.setLibraryUri(web_storage.WebStorage, I[7]);
  dart.setFieldSignature(web_storage.WebStorage, () => ({
    __proto__: dart.getFields(web_storage.WebStorage.__proto__),
    localStorage: dart.fieldType(dart.legacy(web_storage.LocalStorage)),
    sessionStorage: dart.fieldType(dart.legacy(web_storage.SessionStorage))
  }));
  var key$ = dart.privateName(web_storage, "WebStorageItem.key");
  var value$ = dart.privateName(web_storage, "WebStorageItem.value");
  web_storage.WebStorageItem = class WebStorageItem extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      this[key$] = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      this[value$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["key", this.key, "value", this.value]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (web_storage.WebStorageItem.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[key$] = key;
    this[value$] = value;
    ;
  }).prototype = web_storage.WebStorageItem.prototype;
  dart.addTypeTests(web_storage.WebStorageItem);
  dart.addTypeCaches(web_storage.WebStorageItem);
  dart.setMethodSignature(web_storage.WebStorageItem, () => ({
    __proto__: dart.getMethods(web_storage.WebStorageItem.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(web_storage.WebStorageItem, I[7]);
  dart.setFieldSignature(web_storage.WebStorageItem, () => ({
    __proto__: dart.getFields(web_storage.WebStorageItem.__proto__),
    key: dart.fieldType(dart.legacy(core.String)),
    value: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(web_storage.WebStorageItem, ['toString']);
  var webStorageType$ = dart.privateName(web_storage, "Storage.webStorageType");
  var _controller = dart.privateName(web_storage, "_controller");
  web_storage.Storage = class Storage extends core.Object {
    get webStorageType() {
      return this[webStorageType$];
    }
    set webStorageType(value) {
      this[webStorageType$] = value;
    }
    length() {
      return async.async(T.intL(), (function* length() {
        let result = (yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".length;\n    "}));
        return result != null ? core.int.parse(core.String.as(convert.json.decode(T.StringL().as(result)))) : null;
      }).bind(this));
    }
    setItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      return async.async(dart.void, (function* setItem() {
        let encodedValue = convert.json.encode(value);
        yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".setItem(\"" + dart.str(key) + "\", " + dart.str(T.StringL().is(value) ? encodedValue : "JSON.stringify(" + dart.str(encodedValue) + ")") + ");\n    "});
      }).bind(this));
    }
    getItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return async.async(dart.dynamic, (function* getItem() {
        let itemValue = (yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".getItem(\"" + dart.str(key) + "\");\n    "}));
        if (itemValue == null) {
          return null;
        }
        try {
          return convert.json.decode(T.StringL().as(itemValue));
        } catch (e$) {
          let e = dart.getThrown(e$);
        }
        return itemValue;
      }).bind(this));
    }
    removeItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return async.async(dart.void, (function* removeItem() {
        yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".removeItem(\"" + dart.str(key) + "\");\n    "});
      }).bind(this));
    }
    getItems() {
      return async.async(T.ListLOfWebStorageItemL(), (function* getItems() {
        let webStorageItems = T.JSArrayOfWebStorageItemL().of([]);
        let items = T.ListLOfMapL().as(dart.dgsend(yield this[_controller].evaluateJavascript({source: "(function() {\n  var webStorageItems = [];\n  for(var i = 0; i < window." + dart.str(this.webStorageType) + ".length; i++){\n    var key = window." + dart.str(this.webStorageType) + ".key(i);\n    webStorageItems.push(\n      {\n        key: key,\n        value: window." + dart.str(this.webStorageType) + ".getItem(key)\n      }\n    );\n  }\n  return webStorageItems;\n})();\n    "}), [T.MapL()], 'cast', []));
        if (items == null) {
          return webStorageItems;
        }
        for (let item of items) {
          webStorageItems[$add](new web_storage.WebStorageItem.new({key: T.StringL().as(item[$_get]("key")), value: item[$_get]("value")}));
        }
        return webStorageItems;
      }).bind(this));
    }
    clear() {
      return async.async(dart.void, (function* clear() {
        yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".clear();\n    "});
      }).bind(this));
    }
    key(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      return async.async(T.StringL(), (function* key() {
        let result = (yield this[_controller].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".key(" + dart.str(index) + ");\n    "}));
        return T.FutureOrLOfStringL().as(result != null ? convert.json.decode(T.StringL().as(result)) : null);
      }).bind(this));
    }
  };
  (web_storage.Storage.new = function(controller, webStorageType) {
    this[_controller] = null;
    this[webStorageType$] = webStorageType;
    if (!(controller != null && this.webStorageType != null)) dart.assertFailed(null, I[8], 56, 12, "controller != null && this.webStorageType != null");
    this[_controller] = controller;
  }).prototype = web_storage.Storage.prototype;
  dart.addTypeTests(web_storage.Storage);
  dart.addTypeCaches(web_storage.Storage);
  dart.setMethodSignature(web_storage.Storage, () => ({
    __proto__: dart.getMethods(web_storage.Storage.__proto__),
    length: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    setItem: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {key: dart.legacy(core.String), value: dart.dynamic}, {}),
    getItem: dart.fnType(dart.legacy(async.Future), [], {key: dart.legacy(core.String)}, {}),
    removeItem: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {key: dart.legacy(core.String)}, {}),
    getItems: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(web_storage.WebStorageItem))))), []),
    clear: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    key: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {index: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(web_storage.Storage, I[7]);
  dart.setFieldSignature(web_storage.Storage, () => ({
    __proto__: dart.getFields(web_storage.Storage.__proto__),
    [_controller]: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController)),
    webStorageType: dart.fieldType(dart.legacy(types.WebStorageType))
  }));
  web_storage.LocalStorage = class LocalStorage extends web_storage.Storage {};
  (web_storage.LocalStorage.new = function(controller) {
    web_storage.LocalStorage.__proto__.new.call(this, controller, types.WebStorageType.LOCAL_STORAGE);
    ;
  }).prototype = web_storage.LocalStorage.prototype;
  dart.addTypeTests(web_storage.LocalStorage);
  dart.addTypeCaches(web_storage.LocalStorage);
  dart.setLibraryUri(web_storage.LocalStorage, I[7]);
  web_storage.SessionStorage = class SessionStorage extends web_storage.Storage {};
  (web_storage.SessionStorage.new = function(controller) {
    web_storage.SessionStorage.__proto__.new.call(this, controller, types.WebStorageType.SESSION_STORAGE);
    ;
  }).prototype = web_storage.SessionStorage.prototype;
  dart.addTypeTests(web_storage.SessionStorage);
  dart.addTypeCaches(web_storage.SessionStorage);
  dart.setLibraryUri(web_storage.SessionStorage, I[7]);
  var gestureRecognizers$ = dart.privateName(in_app_webview, "InAppWebView.gestureRecognizers");
  var windowId$ = dart.privateName(in_app_webview, "InAppWebView.windowId");
  var androidOnGeolocationPermissionsHidePrompt$ = dart.privateName(in_app_webview, "InAppWebView.androidOnGeolocationPermissionsHidePrompt");
  var androidOnGeolocationPermissionsShowPrompt$ = dart.privateName(in_app_webview, "InAppWebView.androidOnGeolocationPermissionsShowPrompt");
  var androidOnPermissionRequest$ = dart.privateName(in_app_webview, "InAppWebView.androidOnPermissionRequest");
  var androidOnSafeBrowsingHit$ = dart.privateName(in_app_webview, "InAppWebView.androidOnSafeBrowsingHit");
  var initialData$ = dart.privateName(in_app_webview, "InAppWebView.initialData");
  var initialFile$ = dart.privateName(in_app_webview, "InAppWebView.initialFile");
  var initialHeaders$ = dart.privateName(in_app_webview, "InAppWebView.initialHeaders");
  var initialOptions$ = dart.privateName(in_app_webview, "InAppWebView.initialOptions");
  var initialUrl$ = dart.privateName(in_app_webview, "InAppWebView.initialUrl");
  var contextMenu$ = dart.privateName(in_app_webview, "InAppWebView.contextMenu");
  var onPageCommitVisible$ = dart.privateName(in_app_webview, "InAppWebView.onPageCommitVisible");
  var onTitleChanged$ = dart.privateName(in_app_webview, "InAppWebView.onTitleChanged");
  var iosOnDidReceiveServerRedirectForProvisionalNavigation$ = dart.privateName(in_app_webview, "InAppWebView.iosOnDidReceiveServerRedirectForProvisionalNavigation");
  var iosOnWebContentProcessDidTerminate$ = dart.privateName(in_app_webview, "InAppWebView.iosOnWebContentProcessDidTerminate");
  var onAjaxProgress$ = dart.privateName(in_app_webview, "InAppWebView.onAjaxProgress");
  var onAjaxReadyStateChange$ = dart.privateName(in_app_webview, "InAppWebView.onAjaxReadyStateChange");
  var onConsoleMessage$ = dart.privateName(in_app_webview, "InAppWebView.onConsoleMessage");
  var onCreateWindow$ = dart.privateName(in_app_webview, "InAppWebView.onCreateWindow");
  var onCloseWindow$ = dart.privateName(in_app_webview, "InAppWebView.onCloseWindow");
  var onWindowFocus$ = dart.privateName(in_app_webview, "InAppWebView.onWindowFocus");
  var onWindowBlur$ = dart.privateName(in_app_webview, "InAppWebView.onWindowBlur");
  var androidOnRequestFocus$ = dart.privateName(in_app_webview, "InAppWebView.androidOnRequestFocus");
  var androidOnReceivedIcon$ = dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedIcon");
  var androidOnReceivedTouchIconUrl$ = dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedTouchIconUrl");
  var onDownloadStart$ = dart.privateName(in_app_webview, "InAppWebView.onDownloadStart");
  var onFindResultReceived$ = dart.privateName(in_app_webview, "InAppWebView.onFindResultReceived");
  var onJsAlert$ = dart.privateName(in_app_webview, "InAppWebView.onJsAlert");
  var onJsConfirm$ = dart.privateName(in_app_webview, "InAppWebView.onJsConfirm");
  var onJsPrompt$ = dart.privateName(in_app_webview, "InAppWebView.onJsPrompt");
  var onLoadError$ = dart.privateName(in_app_webview, "InAppWebView.onLoadError");
  var onLoadHttpError$ = dart.privateName(in_app_webview, "InAppWebView.onLoadHttpError");
  var onLoadResource$ = dart.privateName(in_app_webview, "InAppWebView.onLoadResource");
  var onLoadResourceCustomScheme$ = dart.privateName(in_app_webview, "InAppWebView.onLoadResourceCustomScheme");
  var onLoadStart$ = dart.privateName(in_app_webview, "InAppWebView.onLoadStart");
  var onLoadStop$ = dart.privateName(in_app_webview, "InAppWebView.onLoadStop");
  var onLongPressHitTestResult$ = dart.privateName(in_app_webview, "InAppWebView.onLongPressHitTestResult");
  var onPrint$ = dart.privateName(in_app_webview, "InAppWebView.onPrint");
  var onProgressChanged$ = dart.privateName(in_app_webview, "InAppWebView.onProgressChanged");
  var onReceivedClientCertRequest$ = dart.privateName(in_app_webview, "InAppWebView.onReceivedClientCertRequest");
  var onReceivedHttpAuthRequest$ = dart.privateName(in_app_webview, "InAppWebView.onReceivedHttpAuthRequest");
  var onReceivedServerTrustAuthRequest$ = dart.privateName(in_app_webview, "InAppWebView.onReceivedServerTrustAuthRequest");
  var onScrollChanged$ = dart.privateName(in_app_webview, "InAppWebView.onScrollChanged");
  var onUpdateVisitedHistory$ = dart.privateName(in_app_webview, "InAppWebView.onUpdateVisitedHistory");
  var onWebViewCreated$ = dart.privateName(in_app_webview, "InAppWebView.onWebViewCreated");
  var shouldInterceptAjaxRequest$ = dart.privateName(in_app_webview, "InAppWebView.shouldInterceptAjaxRequest");
  var shouldInterceptFetchRequest$ = dart.privateName(in_app_webview, "InAppWebView.shouldInterceptFetchRequest");
  var shouldOverrideUrlLoading$ = dart.privateName(in_app_webview, "InAppWebView.shouldOverrideUrlLoading");
  var onEnterFullscreen$ = dart.privateName(in_app_webview, "InAppWebView.onEnterFullscreen");
  var onExitFullscreen$ = dart.privateName(in_app_webview, "InAppWebView.onExitFullscreen");
  var androidShouldInterceptRequest$ = dart.privateName(in_app_webview, "InAppWebView.androidShouldInterceptRequest");
  var androidOnRenderProcessUnresponsive$ = dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessUnresponsive");
  var androidOnRenderProcessResponsive$ = dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessResponsive");
  var androidOnRenderProcessGone$ = dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessGone");
  var androidOnFormResubmission$ = dart.privateName(in_app_webview, "InAppWebView.androidOnFormResubmission");
  var androidOnScaleChanged$ = dart.privateName(in_app_webview, "InAppWebView.androidOnScaleChanged");
  var androidOnJsBeforeUnload$ = dart.privateName(in_app_webview, "InAppWebView.androidOnJsBeforeUnload");
  var androidOnReceivedLoginRequest$ = dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedLoginRequest");
  in_app_webview.InAppWebView = class InAppWebView extends framework.StatefulWidget {
    get gestureRecognizers() {
      return this[gestureRecognizers$];
    }
    set gestureRecognizers(value) {
      super.gestureRecognizers = value;
    }
    get windowId() {
      return this[windowId$];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[androidOnGeolocationPermissionsHidePrompt$];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      super.androidOnGeolocationPermissionsHidePrompt = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[androidOnGeolocationPermissionsShowPrompt$];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      super.androidOnGeolocationPermissionsShowPrompt = value;
    }
    get androidOnPermissionRequest() {
      return this[androidOnPermissionRequest$];
    }
    set androidOnPermissionRequest(value) {
      super.androidOnPermissionRequest = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[androidOnSafeBrowsingHit$];
    }
    set androidOnSafeBrowsingHit(value) {
      super.androidOnSafeBrowsingHit = value;
    }
    get initialData() {
      return this[initialData$];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialFile() {
      return this[initialFile$];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialHeaders() {
      return this[initialHeaders$];
    }
    set initialHeaders(value) {
      super.initialHeaders = value;
    }
    get initialOptions() {
      return this[initialOptions$];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get initialUrl() {
      return this[initialUrl$];
    }
    set initialUrl(value) {
      super.initialUrl = value;
    }
    get contextMenu() {
      return this[contextMenu$];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
    get onPageCommitVisible() {
      return this[onPageCommitVisible$];
    }
    set onPageCommitVisible(value) {
      super.onPageCommitVisible = value;
    }
    get onTitleChanged() {
      return this[onTitleChanged$];
    }
    set onTitleChanged(value) {
      super.onTitleChanged = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[iosOnDidReceiveServerRedirectForProvisionalNavigation$];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      super.iosOnDidReceiveServerRedirectForProvisionalNavigation = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[iosOnWebContentProcessDidTerminate$];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      super.iosOnWebContentProcessDidTerminate = value;
    }
    get onAjaxProgress() {
      return this[onAjaxProgress$];
    }
    set onAjaxProgress(value) {
      super.onAjaxProgress = value;
    }
    get onAjaxReadyStateChange() {
      return this[onAjaxReadyStateChange$];
    }
    set onAjaxReadyStateChange(value) {
      super.onAjaxReadyStateChange = value;
    }
    get onConsoleMessage() {
      return this[onConsoleMessage$];
    }
    set onConsoleMessage(value) {
      super.onConsoleMessage = value;
    }
    get onCreateWindow() {
      return this[onCreateWindow$];
    }
    set onCreateWindow(value) {
      super.onCreateWindow = value;
    }
    get onCloseWindow() {
      return this[onCloseWindow$];
    }
    set onCloseWindow(value) {
      super.onCloseWindow = value;
    }
    get onWindowFocus() {
      return this[onWindowFocus$];
    }
    set onWindowFocus(value) {
      super.onWindowFocus = value;
    }
    get onWindowBlur() {
      return this[onWindowBlur$];
    }
    set onWindowBlur(value) {
      super.onWindowBlur = value;
    }
    get androidOnRequestFocus() {
      return this[androidOnRequestFocus$];
    }
    set androidOnRequestFocus(value) {
      super.androidOnRequestFocus = value;
    }
    get androidOnReceivedIcon() {
      return this[androidOnReceivedIcon$];
    }
    set androidOnReceivedIcon(value) {
      super.androidOnReceivedIcon = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[androidOnReceivedTouchIconUrl$];
    }
    set androidOnReceivedTouchIconUrl(value) {
      super.androidOnReceivedTouchIconUrl = value;
    }
    get onDownloadStart() {
      return this[onDownloadStart$];
    }
    set onDownloadStart(value) {
      super.onDownloadStart = value;
    }
    get onFindResultReceived() {
      return this[onFindResultReceived$];
    }
    set onFindResultReceived(value) {
      super.onFindResultReceived = value;
    }
    get onJsAlert() {
      return this[onJsAlert$];
    }
    set onJsAlert(value) {
      super.onJsAlert = value;
    }
    get onJsConfirm() {
      return this[onJsConfirm$];
    }
    set onJsConfirm(value) {
      super.onJsConfirm = value;
    }
    get onJsPrompt() {
      return this[onJsPrompt$];
    }
    set onJsPrompt(value) {
      super.onJsPrompt = value;
    }
    get onLoadError() {
      return this[onLoadError$];
    }
    set onLoadError(value) {
      super.onLoadError = value;
    }
    get onLoadHttpError() {
      return this[onLoadHttpError$];
    }
    set onLoadHttpError(value) {
      super.onLoadHttpError = value;
    }
    get onLoadResource() {
      return this[onLoadResource$];
    }
    set onLoadResource(value) {
      super.onLoadResource = value;
    }
    get onLoadResourceCustomScheme() {
      return this[onLoadResourceCustomScheme$];
    }
    set onLoadResourceCustomScheme(value) {
      super.onLoadResourceCustomScheme = value;
    }
    get onLoadStart() {
      return this[onLoadStart$];
    }
    set onLoadStart(value) {
      super.onLoadStart = value;
    }
    get onLoadStop() {
      return this[onLoadStop$];
    }
    set onLoadStop(value) {
      super.onLoadStop = value;
    }
    get onLongPressHitTestResult() {
      return this[onLongPressHitTestResult$];
    }
    set onLongPressHitTestResult(value) {
      super.onLongPressHitTestResult = value;
    }
    get onPrint() {
      return this[onPrint$];
    }
    set onPrint(value) {
      super.onPrint = value;
    }
    get onProgressChanged() {
      return this[onProgressChanged$];
    }
    set onProgressChanged(value) {
      super.onProgressChanged = value;
    }
    get onReceivedClientCertRequest() {
      return this[onReceivedClientCertRequest$];
    }
    set onReceivedClientCertRequest(value) {
      super.onReceivedClientCertRequest = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[onReceivedHttpAuthRequest$];
    }
    set onReceivedHttpAuthRequest(value) {
      super.onReceivedHttpAuthRequest = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[onReceivedServerTrustAuthRequest$];
    }
    set onReceivedServerTrustAuthRequest(value) {
      super.onReceivedServerTrustAuthRequest = value;
    }
    get onScrollChanged() {
      return this[onScrollChanged$];
    }
    set onScrollChanged(value) {
      super.onScrollChanged = value;
    }
    get onUpdateVisitedHistory() {
      return this[onUpdateVisitedHistory$];
    }
    set onUpdateVisitedHistory(value) {
      super.onUpdateVisitedHistory = value;
    }
    get onWebViewCreated() {
      return this[onWebViewCreated$];
    }
    set onWebViewCreated(value) {
      super.onWebViewCreated = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[shouldInterceptAjaxRequest$];
    }
    set shouldInterceptAjaxRequest(value) {
      super.shouldInterceptAjaxRequest = value;
    }
    get shouldInterceptFetchRequest() {
      return this[shouldInterceptFetchRequest$];
    }
    set shouldInterceptFetchRequest(value) {
      super.shouldInterceptFetchRequest = value;
    }
    get shouldOverrideUrlLoading() {
      return this[shouldOverrideUrlLoading$];
    }
    set shouldOverrideUrlLoading(value) {
      super.shouldOverrideUrlLoading = value;
    }
    get onEnterFullscreen() {
      return this[onEnterFullscreen$];
    }
    set onEnterFullscreen(value) {
      super.onEnterFullscreen = value;
    }
    get onExitFullscreen() {
      return this[onExitFullscreen$];
    }
    set onExitFullscreen(value) {
      super.onExitFullscreen = value;
    }
    get androidShouldInterceptRequest() {
      return this[androidShouldInterceptRequest$];
    }
    set androidShouldInterceptRequest(value) {
      super.androidShouldInterceptRequest = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[androidOnRenderProcessUnresponsive$];
    }
    set androidOnRenderProcessUnresponsive(value) {
      super.androidOnRenderProcessUnresponsive = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[androidOnRenderProcessResponsive$];
    }
    set androidOnRenderProcessResponsive(value) {
      super.androidOnRenderProcessResponsive = value;
    }
    get androidOnRenderProcessGone() {
      return this[androidOnRenderProcessGone$];
    }
    set androidOnRenderProcessGone(value) {
      super.androidOnRenderProcessGone = value;
    }
    get androidOnFormResubmission() {
      return this[androidOnFormResubmission$];
    }
    set androidOnFormResubmission(value) {
      super.androidOnFormResubmission = value;
    }
    get androidOnScaleChanged() {
      return this[androidOnScaleChanged$];
    }
    set androidOnScaleChanged(value) {
      super.androidOnScaleChanged = value;
    }
    get androidOnJsBeforeUnload() {
      return this[androidOnJsBeforeUnload$];
    }
    set androidOnJsBeforeUnload(value) {
      super.androidOnJsBeforeUnload = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[androidOnReceivedLoginRequest$];
    }
    set androidOnReceivedLoginRequest(value) {
      super.androidOnReceivedLoginRequest = value;
    }
    createState() {
      return new in_app_webview._InAppWebViewState.new();
    }
  };
  (in_app_webview.InAppWebView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let initialUrl = opts && 'initialUrl' in opts ? opts.initialUrl : "about:blank";
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : C[6] || CT.C6;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnRequestFocus = opts && 'androidOnRequestFocus' in opts ? opts.androidOnRequestFocus : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[windowId$] = windowId;
    this[initialUrl$] = initialUrl;
    this[initialFile$] = initialFile;
    this[initialData$] = initialData;
    this[initialHeaders$] = initialHeaders;
    this[initialOptions$] = initialOptions;
    this[contextMenu$] = contextMenu;
    this[onWebViewCreated$] = onWebViewCreated;
    this[onLoadStart$] = onLoadStart;
    this[onLoadStop$] = onLoadStop;
    this[onLoadError$] = onLoadError;
    this[onLoadHttpError$] = onLoadHttpError;
    this[onConsoleMessage$] = onConsoleMessage;
    this[onProgressChanged$] = onProgressChanged;
    this[shouldOverrideUrlLoading$] = shouldOverrideUrlLoading;
    this[onLoadResource$] = onLoadResource;
    this[onScrollChanged$] = onScrollChanged;
    this[onDownloadStart$] = onDownloadStart;
    this[onLoadResourceCustomScheme$] = onLoadResourceCustomScheme;
    this[onCreateWindow$] = onCreateWindow;
    this[onCloseWindow$] = onCloseWindow;
    this[onJsAlert$] = onJsAlert;
    this[onJsConfirm$] = onJsConfirm;
    this[onJsPrompt$] = onJsPrompt;
    this[onReceivedHttpAuthRequest$] = onReceivedHttpAuthRequest;
    this[onReceivedServerTrustAuthRequest$] = onReceivedServerTrustAuthRequest;
    this[onReceivedClientCertRequest$] = onReceivedClientCertRequest;
    this[onFindResultReceived$] = onFindResultReceived;
    this[shouldInterceptAjaxRequest$] = shouldInterceptAjaxRequest;
    this[onAjaxReadyStateChange$] = onAjaxReadyStateChange;
    this[onAjaxProgress$] = onAjaxProgress;
    this[shouldInterceptFetchRequest$] = shouldInterceptFetchRequest;
    this[onUpdateVisitedHistory$] = onUpdateVisitedHistory;
    this[onPrint$] = onPrint;
    this[onLongPressHitTestResult$] = onLongPressHitTestResult;
    this[onEnterFullscreen$] = onEnterFullscreen;
    this[onExitFullscreen$] = onExitFullscreen;
    this[onPageCommitVisible$] = onPageCommitVisible;
    this[onTitleChanged$] = onTitleChanged;
    this[onWindowFocus$] = onWindowFocus;
    this[onWindowBlur$] = onWindowBlur;
    this[androidOnSafeBrowsingHit$] = androidOnSafeBrowsingHit;
    this[androidOnPermissionRequest$] = androidOnPermissionRequest;
    this[androidOnGeolocationPermissionsShowPrompt$] = androidOnGeolocationPermissionsShowPrompt;
    this[androidOnGeolocationPermissionsHidePrompt$] = androidOnGeolocationPermissionsHidePrompt;
    this[androidShouldInterceptRequest$] = androidShouldInterceptRequest;
    this[androidOnRenderProcessGone$] = androidOnRenderProcessGone;
    this[androidOnRenderProcessResponsive$] = androidOnRenderProcessResponsive;
    this[androidOnRenderProcessUnresponsive$] = androidOnRenderProcessUnresponsive;
    this[androidOnFormResubmission$] = androidOnFormResubmission;
    this[androidOnScaleChanged$] = androidOnScaleChanged;
    this[androidOnRequestFocus$] = androidOnRequestFocus;
    this[androidOnReceivedIcon$] = androidOnReceivedIcon;
    this[androidOnReceivedTouchIconUrl$] = androidOnReceivedTouchIconUrl;
    this[androidOnJsBeforeUnload$] = androidOnJsBeforeUnload;
    this[androidOnReceivedLoginRequest$] = androidOnReceivedLoginRequest;
    this[iosOnWebContentProcessDidTerminate$] = iosOnWebContentProcessDidTerminate;
    this[iosOnDidReceiveServerRedirectForProvisionalNavigation$] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[gestureRecognizers$] = gestureRecognizers;
    in_app_webview.InAppWebView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = in_app_webview.InAppWebView.prototype;
  dart.addTypeTests(in_app_webview.InAppWebView);
  dart.addTypeCaches(in_app_webview.InAppWebView);
  in_app_webview.InAppWebView[dart.implements] = () => [webview.WebView];
  dart.setMethodSignature(in_app_webview.InAppWebView, () => ({
    __proto__: dart.getMethods(in_app_webview.InAppWebView.__proto__),
    createState: dart.fnType(dart.legacy(in_app_webview._InAppWebViewState), [])
  }));
  dart.setLibraryUri(in_app_webview.InAppWebView, I[9]);
  dart.setFieldSignature(in_app_webview.InAppWebView, () => ({
    __proto__: dart.getFields(in_app_webview.InAppWebView.__proto__),
    gestureRecognizers: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(basic_types.Factory$(dart.legacy(recognizer.OneSequenceGestureRecognizer)))))),
    windowId: dart.finalFieldType(dart.legacy(core.int)),
    androidOnGeolocationPermissionsHidePrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnGeolocationPermissionsShowPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.GeolocationPermissionShowPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnPermissionRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.PermissionRequestResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.String)))]))),
    androidOnSafeBrowsingHit: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.SafeBrowsingResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(types.SafeBrowsingThreat)]))),
    initialData: dart.finalFieldType(dart.legacy(types.InAppWebViewInitialData)),
    initialFile: dart.finalFieldType(dart.legacy(core.String)),
    initialHeaders: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    initialOptions: dart.finalFieldType(dart.legacy(types.InAppWebViewGroupOptions)),
    initialUrl: dart.finalFieldType(dart.legacy(core.String)),
    contextMenu: dart.finalFieldType(dart.legacy(context_menu.ContextMenu)),
    onPageCommitVisible: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onTitleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    iosOnWebContentProcessDidTerminate: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onAjaxProgress: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onAjaxReadyStateChange: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onConsoleMessage: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ConsoleMessage)]))),
    onCreateWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.CreateWindowRequest)]))),
    onCloseWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowBlur: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnRequestFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnReceivedIcon: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(typed_data.Uint8List)]))),
    androidOnReceivedTouchIconUrl: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    onDownloadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onFindResultReceived: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]))),
    onJsAlert: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsAlertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsAlertRequest)]))),
    onJsConfirm: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsConfirmResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsConfirmRequest)]))),
    onJsPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsPromptRequest)]))),
    onLoadError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onLoadHttpError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onLoadResource: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoadedResource)]))),
    onLoadResourceCustomScheme: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.CustomSchemeResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.String)]))),
    onLoadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLoadStop: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLongPressHitTestResult: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.InAppWebViewHitTestResult)]))),
    onPrint: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onProgressChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int)]))),
    onReceivedClientCertRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ClientCertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ClientCertChallenge)]))),
    onReceivedHttpAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.HttpAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.HttpAuthChallenge)]))),
    onReceivedServerTrustAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ServerTrustAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ServerTrustChallenge)]))),
    onScrollChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int)]))),
    onUpdateVisitedHistory: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    onWebViewCreated: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    shouldInterceptAjaxRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    shouldInterceptFetchRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FetchRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.FetchRequest)]))),
    shouldOverrideUrlLoading: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ShouldOverrideUrlLoadingAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ShouldOverrideUrlLoadingRequest)]))),
    onEnterFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onExitFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidShouldInterceptRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebResourceResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.WebResourceRequest)]))),
    androidOnRenderProcessUnresponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessResponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessGone: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.RenderProcessGoneDetail)]))),
    androidOnFormResubmission: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FormResubmissionAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnScaleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.double), dart.legacy(core.double)]))),
    androidOnJsBeforeUnload: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsBeforeUnloadResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsBeforeUnloadRequest)]))),
    androidOnReceivedLoginRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoginRequest)])))
  }));
  var _controller$ = dart.privateName(in_app_webview, "_controller");
  var _onPlatformViewCreated = dart.privateName(in_app_webview, "_onPlatformViewCreated");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  in_app_webview._InAppWebViewState = class _InAppWebViewState extends framework.State$(dart.legacy(in_app_webview.InAppWebView)) {
    build(context) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4, t3$5, t3$6, t3$7;
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
        return new platform_view.AndroidView.new({viewType: "com.pichillilorenzo/flutter_inappwebview", onPlatformViewCreated: dart.bind(this, _onPlatformViewCreated), gestureRecognizers: this.widget.gestureRecognizers, layoutDirection: ui.TextDirection.rtl, creationParams: new (T.IdentityMapOfStringL$dynamic()).from(["initialUrl", dart.str(core.Uri.parse(this.widget.initialUrl)), "initialFile", this.widget.initialFile, "initialData", (t3 = this.widget.initialData, t3 == null ? null : t3.toMap()), "initialHeaders", this.widget.initialHeaders, "initialOptions", (t3$0 = (t3$ = this.widget.initialOptions, t3$ == null ? null : t3$.toMap()), t3$0 == null ? new _js_helper.LinkedMap.new() : t3$0), "contextMenu", (t3$2 = (t3$1 = this.widget.contextMenu, t3$1 == null ? null : t3$1.toMap()), t3$2 == null ? new _js_helper.LinkedMap.new() : t3$2), "windowId", this.widget.windowId]), creationParamsCodec: C[3] || CT.C3, $creationLocationd_0dea112b090073317d4: C[10] || CT.C10});
      } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        return new platform_view.UiKitView.new({viewType: "com.pichillilorenzo/flutter_inappwebview", onPlatformViewCreated: dart.bind(this, _onPlatformViewCreated), gestureRecognizers: this.widget.gestureRecognizers, creationParams: new (T.IdentityMapOfStringL$dynamic()).from(["initialUrl", dart.str(core.Uri.parse(this.widget.initialUrl)), "initialFile", this.widget.initialFile, "initialData", (t3$3 = this.widget.initialData, t3$3 == null ? null : t3$3.toMap()), "initialHeaders", this.widget.initialHeaders, "initialOptions", (t3$5 = (t3$4 = this.widget.initialOptions, t3$4 == null ? null : t3$4.toMap()), t3$5 == null ? new _js_helper.LinkedMap.new() : t3$5), "contextMenu", (t3$7 = (t3$6 = this.widget.contextMenu, t3$6 == null ? null : t3$6.toMap()), t3$7 == null ? new _js_helper.LinkedMap.new() : t3$7), "windowId", this.widget.windowId]), creationParamsCodec: C[3] || CT.C3, $creationLocationd_0dea112b090073317d4: C[18] || CT.C18});
      }
      return new text.Text.new(dart.str(platform.defaultTargetPlatform) + " is not yet supported by the flutter_inappwebview plugin", {$creationLocationd_0dea112b090073317d4: C[25] || CT.C25});
    }
    didUpdateWidget(oldWidget) {
      T.InAppWebViewL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      super.dispose();
    }
    [_onPlatformViewCreated](id) {
      let t4, t3;
      this[_controller$] = new in_app_webview_controller.InAppWebViewController.new(id, this.widget);
      if (this.widget.onWebViewCreated != null) {
        t3 = this.widget;
        t4 = this[_controller$];
        t3.onWebViewCreated(t4);
      }
    }
  };
  (in_app_webview._InAppWebViewState.new = function() {
    this[_controller$] = null;
    in_app_webview._InAppWebViewState.__proto__.new.call(this);
    ;
  }).prototype = in_app_webview._InAppWebViewState.prototype;
  dart.addTypeTests(in_app_webview._InAppWebViewState);
  dart.addTypeCaches(in_app_webview._InAppWebViewState);
  dart.setMethodSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getMethods(in_app_webview._InAppWebViewState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_onPlatformViewCreated]: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(in_app_webview._InAppWebViewState, I[9]);
  dart.setFieldSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getFields(in_app_webview._InAppWebViewState.__proto__),
    [_controller$]: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController))
  }));
  var uuid$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.uuid");
  var webViewController = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.webViewController");
  var windowId$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.windowId");
  var androidOnGeolocationPermissionsHidePrompt$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnGeolocationPermissionsHidePrompt");
  var androidOnGeolocationPermissionsShowPrompt$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnGeolocationPermissionsShowPrompt");
  var androidOnPermissionRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnPermissionRequest");
  var androidOnSafeBrowsingHit$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnSafeBrowsingHit");
  var initialData$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialData");
  var initialFile$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialFile");
  var initialHeaders$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialHeaders");
  var initialOptions$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialOptions");
  var contextMenu$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.contextMenu");
  var initialUrl$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialUrl");
  var onPageCommitVisible$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onPageCommitVisible");
  var onTitleChanged$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onTitleChanged");
  var iosOnDidReceiveServerRedirectForProvisionalNavigation$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosOnDidReceiveServerRedirectForProvisionalNavigation");
  var iosOnWebContentProcessDidTerminate$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosOnWebContentProcessDidTerminate");
  var onAjaxProgress$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onAjaxProgress");
  var onAjaxReadyStateChange$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onAjaxReadyStateChange");
  var onConsoleMessage$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onConsoleMessage");
  var onCreateWindow$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onCreateWindow");
  var onCloseWindow$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onCloseWindow");
  var onWindowFocus$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWindowFocus");
  var onWindowBlur$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWindowBlur");
  var androidOnRequestFocus$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRequestFocus");
  var onDownloadStart$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onDownloadStart");
  var onFindResultReceived$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onFindResultReceived");
  var onJsAlert$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsAlert");
  var onJsConfirm$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsConfirm");
  var onJsPrompt$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsPrompt");
  var onLoadError$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadError");
  var onLoadHttpError$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadHttpError");
  var onLoadResource$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadResource");
  var onLoadResourceCustomScheme$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadResourceCustomScheme");
  var onLoadStart$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadStart");
  var onLoadStop$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadStop");
  var onLongPressHitTestResult$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLongPressHitTestResult");
  var onPrint$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onPrint");
  var onProgressChanged$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onProgressChanged");
  var onReceivedClientCertRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedClientCertRequest");
  var onReceivedHttpAuthRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedHttpAuthRequest");
  var onReceivedServerTrustAuthRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedServerTrustAuthRequest");
  var onScrollChanged$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onScrollChanged");
  var onUpdateVisitedHistory$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onUpdateVisitedHistory");
  var onWebViewCreated$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWebViewCreated");
  var shouldInterceptAjaxRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldInterceptAjaxRequest");
  var shouldInterceptFetchRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldInterceptFetchRequest");
  var shouldOverrideUrlLoading$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldOverrideUrlLoading");
  var onEnterFullscreen$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onEnterFullscreen");
  var onExitFullscreen$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onExitFullscreen");
  var androidShouldInterceptRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidShouldInterceptRequest");
  var androidOnRenderProcessUnresponsive$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessUnresponsive");
  var androidOnRenderProcessResponsive$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessResponsive");
  var androidOnRenderProcessGone$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessGone");
  var androidOnFormResubmission$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnFormResubmission");
  var androidOnScaleChanged$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnScaleChanged");
  var androidOnReceivedIcon$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedIcon");
  var androidOnReceivedTouchIconUrl$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedTouchIconUrl");
  var androidOnJsBeforeUnload$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnJsBeforeUnload");
  var androidOnReceivedLoginRequest$0 = dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedLoginRequest");
  var _isDisposed = dart.privateName(headless_in_app_webview, "_isDisposed");
  headless_in_app_webview.HeadlessInAppWebView = class HeadlessInAppWebView extends core.Object {
    get uuid() {
      return this[uuid$0];
    }
    set uuid(value) {
      this[uuid$0] = value;
    }
    get webViewController() {
      return this[webViewController];
    }
    set webViewController(value) {
      this[webViewController] = value;
    }
    get windowId() {
      return this[windowId$0];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[androidOnGeolocationPermissionsHidePrompt$0];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      super.androidOnGeolocationPermissionsHidePrompt = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[androidOnGeolocationPermissionsShowPrompt$0];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      super.androidOnGeolocationPermissionsShowPrompt = value;
    }
    get androidOnPermissionRequest() {
      return this[androidOnPermissionRequest$0];
    }
    set androidOnPermissionRequest(value) {
      super.androidOnPermissionRequest = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[androidOnSafeBrowsingHit$0];
    }
    set androidOnSafeBrowsingHit(value) {
      super.androidOnSafeBrowsingHit = value;
    }
    get initialData() {
      return this[initialData$0];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialFile() {
      return this[initialFile$0];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialHeaders() {
      return this[initialHeaders$0];
    }
    set initialHeaders(value) {
      super.initialHeaders = value;
    }
    get initialOptions() {
      return this[initialOptions$0];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get contextMenu() {
      return this[contextMenu$0];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
    get initialUrl() {
      return this[initialUrl$0];
    }
    set initialUrl(value) {
      super.initialUrl = value;
    }
    get onPageCommitVisible() {
      return this[onPageCommitVisible$0];
    }
    set onPageCommitVisible(value) {
      super.onPageCommitVisible = value;
    }
    get onTitleChanged() {
      return this[onTitleChanged$0];
    }
    set onTitleChanged(value) {
      super.onTitleChanged = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[iosOnDidReceiveServerRedirectForProvisionalNavigation$0];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      super.iosOnDidReceiveServerRedirectForProvisionalNavigation = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[iosOnWebContentProcessDidTerminate$0];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      super.iosOnWebContentProcessDidTerminate = value;
    }
    get onAjaxProgress() {
      return this[onAjaxProgress$0];
    }
    set onAjaxProgress(value) {
      super.onAjaxProgress = value;
    }
    get onAjaxReadyStateChange() {
      return this[onAjaxReadyStateChange$0];
    }
    set onAjaxReadyStateChange(value) {
      super.onAjaxReadyStateChange = value;
    }
    get onConsoleMessage() {
      return this[onConsoleMessage$0];
    }
    set onConsoleMessage(value) {
      super.onConsoleMessage = value;
    }
    get onCreateWindow() {
      return this[onCreateWindow$0];
    }
    set onCreateWindow(value) {
      super.onCreateWindow = value;
    }
    get onCloseWindow() {
      return this[onCloseWindow$0];
    }
    set onCloseWindow(value) {
      super.onCloseWindow = value;
    }
    get onWindowFocus() {
      return this[onWindowFocus$0];
    }
    set onWindowFocus(value) {
      super.onWindowFocus = value;
    }
    get onWindowBlur() {
      return this[onWindowBlur$0];
    }
    set onWindowBlur(value) {
      super.onWindowBlur = value;
    }
    get androidOnRequestFocus() {
      return this[androidOnRequestFocus$0];
    }
    set androidOnRequestFocus(value) {
      super.androidOnRequestFocus = value;
    }
    get onDownloadStart() {
      return this[onDownloadStart$0];
    }
    set onDownloadStart(value) {
      super.onDownloadStart = value;
    }
    get onFindResultReceived() {
      return this[onFindResultReceived$0];
    }
    set onFindResultReceived(value) {
      super.onFindResultReceived = value;
    }
    get onJsAlert() {
      return this[onJsAlert$0];
    }
    set onJsAlert(value) {
      super.onJsAlert = value;
    }
    get onJsConfirm() {
      return this[onJsConfirm$0];
    }
    set onJsConfirm(value) {
      super.onJsConfirm = value;
    }
    get onJsPrompt() {
      return this[onJsPrompt$0];
    }
    set onJsPrompt(value) {
      super.onJsPrompt = value;
    }
    get onLoadError() {
      return this[onLoadError$0];
    }
    set onLoadError(value) {
      super.onLoadError = value;
    }
    get onLoadHttpError() {
      return this[onLoadHttpError$0];
    }
    set onLoadHttpError(value) {
      super.onLoadHttpError = value;
    }
    get onLoadResource() {
      return this[onLoadResource$0];
    }
    set onLoadResource(value) {
      super.onLoadResource = value;
    }
    get onLoadResourceCustomScheme() {
      return this[onLoadResourceCustomScheme$0];
    }
    set onLoadResourceCustomScheme(value) {
      super.onLoadResourceCustomScheme = value;
    }
    get onLoadStart() {
      return this[onLoadStart$0];
    }
    set onLoadStart(value) {
      super.onLoadStart = value;
    }
    get onLoadStop() {
      return this[onLoadStop$0];
    }
    set onLoadStop(value) {
      super.onLoadStop = value;
    }
    get onLongPressHitTestResult() {
      return this[onLongPressHitTestResult$0];
    }
    set onLongPressHitTestResult(value) {
      super.onLongPressHitTestResult = value;
    }
    get onPrint() {
      return this[onPrint$0];
    }
    set onPrint(value) {
      super.onPrint = value;
    }
    get onProgressChanged() {
      return this[onProgressChanged$0];
    }
    set onProgressChanged(value) {
      super.onProgressChanged = value;
    }
    get onReceivedClientCertRequest() {
      return this[onReceivedClientCertRequest$0];
    }
    set onReceivedClientCertRequest(value) {
      super.onReceivedClientCertRequest = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[onReceivedHttpAuthRequest$0];
    }
    set onReceivedHttpAuthRequest(value) {
      super.onReceivedHttpAuthRequest = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[onReceivedServerTrustAuthRequest$0];
    }
    set onReceivedServerTrustAuthRequest(value) {
      super.onReceivedServerTrustAuthRequest = value;
    }
    get onScrollChanged() {
      return this[onScrollChanged$0];
    }
    set onScrollChanged(value) {
      super.onScrollChanged = value;
    }
    get onUpdateVisitedHistory() {
      return this[onUpdateVisitedHistory$0];
    }
    set onUpdateVisitedHistory(value) {
      super.onUpdateVisitedHistory = value;
    }
    get onWebViewCreated() {
      return this[onWebViewCreated$0];
    }
    set onWebViewCreated(value) {
      super.onWebViewCreated = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[shouldInterceptAjaxRequest$0];
    }
    set shouldInterceptAjaxRequest(value) {
      super.shouldInterceptAjaxRequest = value;
    }
    get shouldInterceptFetchRequest() {
      return this[shouldInterceptFetchRequest$0];
    }
    set shouldInterceptFetchRequest(value) {
      super.shouldInterceptFetchRequest = value;
    }
    get shouldOverrideUrlLoading() {
      return this[shouldOverrideUrlLoading$0];
    }
    set shouldOverrideUrlLoading(value) {
      super.shouldOverrideUrlLoading = value;
    }
    get onEnterFullscreen() {
      return this[onEnterFullscreen$0];
    }
    set onEnterFullscreen(value) {
      super.onEnterFullscreen = value;
    }
    get onExitFullscreen() {
      return this[onExitFullscreen$0];
    }
    set onExitFullscreen(value) {
      super.onExitFullscreen = value;
    }
    get androidShouldInterceptRequest() {
      return this[androidShouldInterceptRequest$0];
    }
    set androidShouldInterceptRequest(value) {
      super.androidShouldInterceptRequest = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[androidOnRenderProcessUnresponsive$0];
    }
    set androidOnRenderProcessUnresponsive(value) {
      super.androidOnRenderProcessUnresponsive = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[androidOnRenderProcessResponsive$0];
    }
    set androidOnRenderProcessResponsive(value) {
      super.androidOnRenderProcessResponsive = value;
    }
    get androidOnRenderProcessGone() {
      return this[androidOnRenderProcessGone$0];
    }
    set androidOnRenderProcessGone(value) {
      super.androidOnRenderProcessGone = value;
    }
    get androidOnFormResubmission() {
      return this[androidOnFormResubmission$0];
    }
    set androidOnFormResubmission(value) {
      super.androidOnFormResubmission = value;
    }
    get androidOnScaleChanged() {
      return this[androidOnScaleChanged$0];
    }
    set androidOnScaleChanged(value) {
      super.androidOnScaleChanged = value;
    }
    get androidOnReceivedIcon() {
      return this[androidOnReceivedIcon$0];
    }
    set androidOnReceivedIcon(value) {
      super.androidOnReceivedIcon = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[androidOnReceivedTouchIconUrl$0];
    }
    set androidOnReceivedTouchIconUrl(value) {
      super.androidOnReceivedTouchIconUrl = value;
    }
    get androidOnJsBeforeUnload() {
      return this[androidOnJsBeforeUnload$0];
    }
    set androidOnJsBeforeUnload(value) {
      super.androidOnJsBeforeUnload = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[androidOnReceivedLoginRequest$0];
    }
    set androidOnReceivedLoginRequest(value) {
      super.androidOnReceivedLoginRequest = value;
    }
    handleMethod(call) {
      return async.async(dart.dynamic, (function* handleMethod() {
        let t3;
        switch (call.method) {
          case "onHeadlessWebViewCreated":
          {
            t3 = this.webViewController;
            this.onWebViewCreated(t3);
            break;
          }
          default:
          {
            return this.webViewController.handleMethod(call);
          }
        }
      }).bind(this));
    }
    run() {
      return async.async(dart.void, (function* run() {
        if (!dart.test(this[_isDisposed])) {
          return;
        }
        this[_isDisposed] = false;
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        args[$putIfAbsent]("params", dart.fn(() => {
          let t3, t3$, t3$0, t3$1, t3$2;
          return new (T.IdentityMapOfStringL$dynamic()).from(["initialUrl", dart.str(core.Uri.parse(this.initialUrl)), "initialFile", this.initialFile, "initialData", (t3 = this.initialData, t3 == null ? null : t3.toMap()), "initialHeaders", this.initialHeaders, "initialOptions", (t3$0 = (t3$ = this.initialOptions, t3$ == null ? null : t3$.toMap()), t3$0 == null ? new _js_helper.LinkedMap.new() : t3$0), "contextMenu", (t3$2 = (t3$1 = this.contextMenu, t3$1 == null ? null : t3$1.toMap()), t3$2 == null ? new _js_helper.LinkedMap.new() : t3$2)]);
        }, T.VoidToMapLOfStringL$dynamic()));
        yield headless_in_app_webview.HeadlessInAppWebView._sharedChannel.invokeMethod(dart.dynamic, "createHeadlessWebView", args);
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (dart.test(this[_isDisposed])) {
          return;
        }
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        yield headless_in_app_webview.HeadlessInAppWebView._sharedChannel.invokeMethod(dart.dynamic, "disposeHeadlessWebView", args);
        this[_isDisposed] = true;
      }).bind(this));
    }
  };
  (headless_in_app_webview.HeadlessInAppWebView.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnRequestFocus = opts && 'androidOnRequestFocus' in opts ? opts.androidOnRequestFocus : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let initialUrl = opts && 'initialUrl' in opts ? opts.initialUrl : null;
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : null;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    this[uuid$0] = null;
    this[_isDisposed] = true;
    this[webViewController] = null;
    this[windowId$0] = windowId;
    this[onWebViewCreated$0] = onWebViewCreated;
    this[onLoadStart$0] = onLoadStart;
    this[onLoadStop$0] = onLoadStop;
    this[onLoadError$0] = onLoadError;
    this[onLoadHttpError$0] = onLoadHttpError;
    this[onProgressChanged$0] = onProgressChanged;
    this[onConsoleMessage$0] = onConsoleMessage;
    this[shouldOverrideUrlLoading$0] = shouldOverrideUrlLoading;
    this[onLoadResource$0] = onLoadResource;
    this[onScrollChanged$0] = onScrollChanged;
    this[onDownloadStart$0] = onDownloadStart;
    this[onLoadResourceCustomScheme$0] = onLoadResourceCustomScheme;
    this[onCreateWindow$0] = onCreateWindow;
    this[onCloseWindow$0] = onCloseWindow;
    this[onJsAlert$0] = onJsAlert;
    this[onJsConfirm$0] = onJsConfirm;
    this[onJsPrompt$0] = onJsPrompt;
    this[onReceivedHttpAuthRequest$0] = onReceivedHttpAuthRequest;
    this[onReceivedServerTrustAuthRequest$0] = onReceivedServerTrustAuthRequest;
    this[onReceivedClientCertRequest$0] = onReceivedClientCertRequest;
    this[onFindResultReceived$0] = onFindResultReceived;
    this[shouldInterceptAjaxRequest$0] = shouldInterceptAjaxRequest;
    this[onAjaxReadyStateChange$0] = onAjaxReadyStateChange;
    this[onAjaxProgress$0] = onAjaxProgress;
    this[shouldInterceptFetchRequest$0] = shouldInterceptFetchRequest;
    this[onUpdateVisitedHistory$0] = onUpdateVisitedHistory;
    this[onPrint$0] = onPrint;
    this[onLongPressHitTestResult$0] = onLongPressHitTestResult;
    this[onEnterFullscreen$0] = onEnterFullscreen;
    this[onExitFullscreen$0] = onExitFullscreen;
    this[onPageCommitVisible$0] = onPageCommitVisible;
    this[onTitleChanged$0] = onTitleChanged;
    this[onWindowFocus$0] = onWindowFocus;
    this[onWindowBlur$0] = onWindowBlur;
    this[androidOnSafeBrowsingHit$0] = androidOnSafeBrowsingHit;
    this[androidOnPermissionRequest$0] = androidOnPermissionRequest;
    this[androidOnGeolocationPermissionsShowPrompt$0] = androidOnGeolocationPermissionsShowPrompt;
    this[androidOnGeolocationPermissionsHidePrompt$0] = androidOnGeolocationPermissionsHidePrompt;
    this[androidShouldInterceptRequest$0] = androidShouldInterceptRequest;
    this[androidOnRenderProcessGone$0] = androidOnRenderProcessGone;
    this[androidOnRenderProcessResponsive$0] = androidOnRenderProcessResponsive;
    this[androidOnRenderProcessUnresponsive$0] = androidOnRenderProcessUnresponsive;
    this[androidOnFormResubmission$0] = androidOnFormResubmission;
    this[androidOnScaleChanged$0] = androidOnScaleChanged;
    this[androidOnRequestFocus$0] = androidOnRequestFocus;
    this[androidOnReceivedIcon$0] = androidOnReceivedIcon;
    this[androidOnReceivedTouchIconUrl$0] = androidOnReceivedTouchIconUrl;
    this[androidOnJsBeforeUnload$0] = androidOnJsBeforeUnload;
    this[androidOnReceivedLoginRequest$0] = androidOnReceivedLoginRequest;
    this[iosOnWebContentProcessDidTerminate$0] = iosOnWebContentProcessDidTerminate;
    this[iosOnDidReceiveServerRedirectForProvisionalNavigation$0] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[initialUrl$0] = initialUrl;
    this[initialFile$0] = initialFile;
    this[initialData$0] = initialData;
    this[initialHeaders$0] = initialHeaders;
    this[initialOptions$0] = initialOptions;
    this[contextMenu$0] = contextMenu;
    this.uuid = types.uuidGenerator.v4();
    this.webViewController = new in_app_webview_controller.InAppWebViewController.new(this.uuid, this);
  }).prototype = headless_in_app_webview.HeadlessInAppWebView.prototype;
  dart.addTypeTests(headless_in_app_webview.HeadlessInAppWebView);
  dart.addTypeCaches(headless_in_app_webview.HeadlessInAppWebView);
  headless_in_app_webview.HeadlessInAppWebView[dart.implements] = () => [webview.WebView];
  dart.setMethodSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getMethods(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    handleMethod: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall)]),
    run: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(headless_in_app_webview.HeadlessInAppWebView, I[10]);
  dart.setFieldSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getFields(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    uuid: dart.fieldType(dart.legacy(core.String)),
    [_isDisposed]: dart.fieldType(dart.legacy(core.bool)),
    webViewController: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController)),
    windowId: dart.finalFieldType(dart.legacy(core.int)),
    androidOnGeolocationPermissionsHidePrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnGeolocationPermissionsShowPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.GeolocationPermissionShowPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnPermissionRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.PermissionRequestResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.String)))]))),
    androidOnSafeBrowsingHit: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.SafeBrowsingResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(types.SafeBrowsingThreat)]))),
    initialData: dart.finalFieldType(dart.legacy(types.InAppWebViewInitialData)),
    initialFile: dart.finalFieldType(dart.legacy(core.String)),
    initialHeaders: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    initialOptions: dart.finalFieldType(dart.legacy(types.InAppWebViewGroupOptions)),
    contextMenu: dart.finalFieldType(dart.legacy(context_menu.ContextMenu)),
    initialUrl: dart.finalFieldType(dart.legacy(core.String)),
    onPageCommitVisible: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onTitleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    iosOnWebContentProcessDidTerminate: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onAjaxProgress: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onAjaxReadyStateChange: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onConsoleMessage: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ConsoleMessage)]))),
    onCreateWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.CreateWindowRequest)]))),
    onCloseWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowBlur: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnRequestFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onDownloadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onFindResultReceived: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]))),
    onJsAlert: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsAlertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsAlertRequest)]))),
    onJsConfirm: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsConfirmResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsConfirmRequest)]))),
    onJsPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsPromptRequest)]))),
    onLoadError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onLoadHttpError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onLoadResource: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoadedResource)]))),
    onLoadResourceCustomScheme: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.CustomSchemeResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.String)]))),
    onLoadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLoadStop: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLongPressHitTestResult: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.InAppWebViewHitTestResult)]))),
    onPrint: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onProgressChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int)]))),
    onReceivedClientCertRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ClientCertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ClientCertChallenge)]))),
    onReceivedHttpAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.HttpAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.HttpAuthChallenge)]))),
    onReceivedServerTrustAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ServerTrustAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ServerTrustChallenge)]))),
    onScrollChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int)]))),
    onUpdateVisitedHistory: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    onWebViewCreated: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    shouldInterceptAjaxRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    shouldInterceptFetchRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FetchRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.FetchRequest)]))),
    shouldOverrideUrlLoading: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ShouldOverrideUrlLoadingAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ShouldOverrideUrlLoadingRequest)]))),
    onEnterFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onExitFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidShouldInterceptRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebResourceResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.WebResourceRequest)]))),
    androidOnRenderProcessUnresponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessResponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessGone: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.RenderProcessGoneDetail)]))),
    androidOnFormResubmission: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FormResubmissionAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnScaleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.double), dart.legacy(core.double)]))),
    androidOnReceivedIcon: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(typed_data.Uint8List)]))),
    androidOnReceivedTouchIconUrl: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    androidOnJsBeforeUnload: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsBeforeUnloadResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsBeforeUnloadRequest)]))),
    androidOnReceivedLoginRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoginRequest)])))
  }));
  dart.defineLazy(headless_in_app_webview.HeadlessInAppWebView, {
    /*headless_in_app_webview.HeadlessInAppWebView._sharedChannel*/get _sharedChannel() {
      return C[28] || CT.C28;
    }
  }, true);
  var trigger$ = dart.privateName(content_blocker, "ContentBlocker.trigger");
  var action$0 = dart.privateName(content_blocker, "ContentBlocker.action");
  content_blocker.ContentBlocker = class ContentBlocker extends core.Object {
    get trigger() {
      return this[trigger$];
    }
    set trigger(value) {
      this[trigger$] = value;
    }
    get action() {
      return this[action$0];
    }
    set action(value) {
      this[action$0] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$MapLOfStringL$dynamic()).from(["trigger", this.trigger.toMap(), "action", this.action.toMap()]);
    }
    static fromMap(map) {
      return new content_blocker.ContentBlocker.new({trigger: content_blocker.ContentBlockerTrigger.fromMap(T.LinkedHashMapOfStringL$dynamic().from(map[$_get]("trigger"))), action: content_blocker.ContentBlockerAction.fromMap(T.LinkedHashMapOfStringL$dynamic().from(map[$_get]("action")))});
    }
  };
  (content_blocker.ContentBlocker.new = function(opts) {
    let trigger = opts && 'trigger' in opts ? opts.trigger : null;
    let action = opts && 'action' in opts ? opts.action : null;
    this[trigger$] = trigger;
    this[action$0] = action;
    ;
  }).prototype = content_blocker.ContentBlocker.prototype;
  dart.addTypeTests(content_blocker.ContentBlocker);
  dart.addTypeCaches(content_blocker.ContentBlocker);
  dart.setMethodSignature(content_blocker.ContentBlocker, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlocker.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [])
  }));
  dart.setLibraryUri(content_blocker.ContentBlocker, I[11]);
  dart.setFieldSignature(content_blocker.ContentBlocker, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlocker.__proto__),
    trigger: dart.fieldType(dart.legacy(content_blocker.ContentBlockerTrigger)),
    action: dart.fieldType(dart.legacy(content_blocker.ContentBlockerAction))
  }));
  var urlFilter$ = dart.privateName(content_blocker, "ContentBlockerTrigger.urlFilter");
  var urlFilterIsCaseSensitive$ = dart.privateName(content_blocker, "ContentBlockerTrigger.urlFilterIsCaseSensitive");
  var resourceType$ = dart.privateName(content_blocker, "ContentBlockerTrigger.resourceType");
  var ifDomain$ = dart.privateName(content_blocker, "ContentBlockerTrigger.ifDomain");
  var unlessDomain$ = dart.privateName(content_blocker, "ContentBlockerTrigger.unlessDomain");
  var loadType$ = dart.privateName(content_blocker, "ContentBlockerTrigger.loadType");
  var ifTopUrl$ = dart.privateName(content_blocker, "ContentBlockerTrigger.ifTopUrl");
  var unlessTopUrl$ = dart.privateName(content_blocker, "ContentBlockerTrigger.unlessTopUrl");
  content_blocker.ContentBlockerTrigger = class ContentBlockerTrigger extends core.Object {
    get urlFilter() {
      return this[urlFilter$];
    }
    set urlFilter(value) {
      this[urlFilter$] = value;
    }
    get urlFilterIsCaseSensitive() {
      return this[urlFilterIsCaseSensitive$];
    }
    set urlFilterIsCaseSensitive(value) {
      this[urlFilterIsCaseSensitive$] = value;
    }
    get resourceType() {
      return this[resourceType$];
    }
    set resourceType(value) {
      this[resourceType$] = value;
    }
    get ifDomain() {
      return this[ifDomain$];
    }
    set ifDomain(value) {
      this[ifDomain$] = value;
    }
    get unlessDomain() {
      return this[unlessDomain$];
    }
    set unlessDomain(value) {
      this[unlessDomain$] = value;
    }
    get loadType() {
      return this[loadType$];
    }
    set loadType(value) {
      this[loadType$] = value;
    }
    get ifTopUrl() {
      return this[ifTopUrl$];
    }
    set ifTopUrl(value) {
      this[ifTopUrl$] = value;
    }
    get unlessTopUrl() {
      return this[unlessTopUrl$];
    }
    set unlessTopUrl(value) {
      this[unlessTopUrl$] = value;
    }
    toMap() {
      let resourceTypeStringList = T.JSArrayOfStringL().of([]);
      this.resourceType[$forEach](dart.fn(type => {
        resourceTypeStringList[$add](type.toValue());
      }, T.ContentBlockerTriggerResourceTypeLToNull()));
      let loadTypeStringList = T.JSArrayOfStringL().of([]);
      this.loadType[$forEach](dart.fn(type => {
        loadTypeStringList[$add](type.toValue());
      }, T.ContentBlockerTriggerLoadTypeLToNull()));
      let map = new (T.IdentityMapOfStringL$dynamic()).from(["url-filter", this.urlFilter, "url-filter-is-case-sensitive", this.urlFilterIsCaseSensitive, "if-domain", this.ifDomain, "unless-domain", this.unlessDomain, "resource-type", resourceTypeStringList, "load-type", loadTypeStringList, "if-top-url", this.ifTopUrl, "unless-top-url", this.unlessTopUrl]);
      map[$keys][$where](dart.fn(key => map[$_get](key) == null || T.ListL().is(map[$_get](key)) && T.ListL().as(map[$_get](key))[$length] === 0, T.StringLToboolL()))[$toList]()[$forEach](dart.bind(map, $remove));
      return map;
    }
    static fromMap(map) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3;
      let resourceType = T.JSArrayOfContentBlockerTriggerResourceTypeL().of([]);
      let loadType = T.JSArrayOfContentBlockerTriggerLoadTypeL().of([]);
      let resourceTypeStringList = T.ListOfStringL().from(core.Iterable.as((t3 = map[$_get]("resource-type"), t3 == null ? [] : t3)));
      resourceTypeStringList[$forEach](dart.fn(type => {
        resourceType[$add](types.ContentBlockerTriggerResourceType.fromValue(type));
      }, T.StringLToNull()));
      let loadTypeStringList = T.ListOfStringL().from(core.Iterable.as((t3$ = map[$_get]("load-type"), t3$ == null ? [] : t3$)));
      loadTypeStringList[$forEach](dart.fn(type => {
        loadType[$add](types.ContentBlockerTriggerLoadType.fromValue(type));
      }, T.StringLToNull()));
      return new content_blocker.ContentBlockerTrigger.new({urlFilter: T.StringL().as(map[$_get]("url-filter")), urlFilterIsCaseSensitive: T.boolL().as(map[$_get]("url-filter-is-case-sensitive")), ifDomain: T.ListOfStringL().from(core.Iterable.as((t3$0 = map[$_get]("if-domain"), t3$0 == null ? [] : t3$0))), unlessDomain: T.ListOfStringL().from(core.Iterable.as((t3$1 = map[$_get]("unless-domain"), t3$1 == null ? [] : t3$1))), resourceType: resourceType, loadType: loadType, ifTopUrl: T.ListOfStringL().from(core.Iterable.as((t3$2 = map[$_get]("if-top-url"), t3$2 == null ? [] : t3$2))), unlessTopUrl: T.ListOfStringL().from(core.Iterable.as((t3$3 = map[$_get]("unless-top-url"), t3$3 == null ? [] : t3$3)))});
    }
  };
  (content_blocker.ContentBlockerTrigger.new = function(opts) {
    let urlFilter = opts && 'urlFilter' in opts ? opts.urlFilter : null;
    let urlFilterIsCaseSensitive = opts && 'urlFilterIsCaseSensitive' in opts ? opts.urlFilterIsCaseSensitive : false;
    let resourceType = opts && 'resourceType' in opts ? opts.resourceType : C[29] || CT.C29;
    let ifDomain = opts && 'ifDomain' in opts ? opts.ifDomain : C[30] || CT.C30;
    let unlessDomain = opts && 'unlessDomain' in opts ? opts.unlessDomain : C[30] || CT.C30;
    let loadType = opts && 'loadType' in opts ? opts.loadType : C[31] || CT.C31;
    let ifTopUrl = opts && 'ifTopUrl' in opts ? opts.ifTopUrl : C[30] || CT.C30;
    let unlessTopUrl = opts && 'unlessTopUrl' in opts ? opts.unlessTopUrl : C[30] || CT.C30;
    this[urlFilter$] = null;
    this[urlFilterIsCaseSensitive$] = null;
    this[resourceType$] = null;
    this[ifDomain$] = null;
    this[unlessDomain$] = null;
    this[loadType$] = null;
    this[ifTopUrl$] = null;
    this[unlessTopUrl$] = null;
    this.urlFilter = urlFilter;
    if (!(this.urlFilter != null)) dart.assertFailed(null, I[12], 77, 12, "this.urlFilter != null");
    this.resourceType = resourceType;
    this.urlFilterIsCaseSensitive = urlFilterIsCaseSensitive;
    this.ifDomain = ifDomain;
    this.unlessDomain = unlessDomain;
    if (!(!(dart.test(this.ifDomain[$isEmpty]) || dart.test(this.unlessDomain[$isEmpty])) === false)) dart.assertFailed(null, I[12], 82, 12, "!(this.ifDomain.isEmpty || this.unlessDomain.isEmpty) == false");
    this.loadType = loadType;
    if (!(dart.notNull(this.loadType[$length]) <= 2)) dart.assertFailed(null, I[12], 84, 12, "this.loadType.length <= 2");
    this.ifTopUrl = ifTopUrl;
    this.unlessTopUrl = unlessTopUrl;
    if (!(!(dart.test(this.ifTopUrl[$isEmpty]) || dart.test(this.unlessTopUrl[$isEmpty])) === false)) dart.assertFailed(null, I[12], 87, 12, "!(this.ifTopUrl.isEmpty || this.unlessTopUrl.isEmpty) == false");
  }).prototype = content_blocker.ContentBlockerTrigger.prototype;
  dart.addTypeTests(content_blocker.ContentBlockerTrigger);
  dart.addTypeCaches(content_blocker.ContentBlockerTrigger);
  dart.setMethodSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlockerTrigger.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(content_blocker.ContentBlockerTrigger, I[11]);
  dart.setFieldSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlockerTrigger.__proto__),
    urlFilter: dart.fieldType(dart.legacy(core.String)),
    urlFilterIsCaseSensitive: dart.fieldType(dart.legacy(core.bool)),
    resourceType: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.ContentBlockerTriggerResourceType)))),
    ifDomain: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    unlessDomain: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    loadType: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.ContentBlockerTriggerLoadType)))),
    ifTopUrl: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    unlessTopUrl: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var type$ = dart.privateName(content_blocker, "ContentBlockerAction.type");
  var selector$ = dart.privateName(content_blocker, "ContentBlockerAction.selector");
  content_blocker.ContentBlockerAction = class ContentBlockerAction extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      this[type$] = value;
    }
    get selector() {
      return this[selector$];
    }
    set selector(value) {
      this[selector$] = value;
    }
    toMap() {
      let map = new (T.IdentityMapOfStringL$dynamic()).from(["type", this.type.toValue(), "selector", this.selector]);
      map[$keys][$where](dart.fn(key => map[$_get](key) == null || T.ListL().is(map[$_get](key)) && T.ListL().as(map[$_get](key))[$length] === 0, T.StringLToboolL()))[$toList]()[$forEach](dart.bind(map, $remove));
      return map;
    }
    static fromMap(map) {
      return new content_blocker.ContentBlockerAction.new({type: types.ContentBlockerActionType.fromValue(T.StringL().as(map[$_get]("type"))), selector: T.StringL().as(map[$_get]("selector"))});
    }
  };
  (content_blocker.ContentBlockerAction.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let selector = opts && 'selector' in opts ? opts.selector : null;
    this[type$] = null;
    this[selector$] = null;
    this.type = type;
    if (!(this.type != null)) dart.assertFailed(null, I[12], 164, 12, "this.type != null");
    if (dart.equals(this.type, types.ContentBlockerActionType.CSS_DISPLAY_NONE)) {
      if (!(selector != null)) dart.assertFailed(null, I[12], 166, 14, "selector != null");
    }
    this.selector = selector;
  }).prototype = content_blocker.ContentBlockerAction.prototype;
  dart.addTypeTests(content_blocker.ContentBlockerAction);
  dart.addTypeCaches(content_blocker.ContentBlockerAction);
  dart.setMethodSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlockerAction.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(content_blocker.ContentBlockerAction, I[11]);
  dart.setFieldSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlockerAction.__proto__),
    type: dart.fieldType(dart.legacy(types.ContentBlockerActionType)),
    selector: dart.fieldType(dart.legacy(core.String))
  }));
  webview_options.AndroidOptions = class AndroidOptions extends core.Object {};
  (webview_options.AndroidOptions.new = function() {
    ;
  }).prototype = webview_options.AndroidOptions.prototype;
  dart.addTypeTests(webview_options.AndroidOptions);
  dart.addTypeCaches(webview_options.AndroidOptions);
  dart.setLibraryUri(webview_options.AndroidOptions, I[13]);
  webview_options.IosOptions = class IosOptions extends core.Object {};
  (webview_options.IosOptions.new = function() {
    ;
  }).prototype = webview_options.IosOptions.prototype;
  dart.addTypeTests(webview_options.IosOptions);
  dart.addTypeCaches(webview_options.IosOptions);
  dart.setLibraryUri(webview_options.IosOptions, I[13]);
  webview_options.WebViewOptions = class WebViewOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).new();
    }
    static fromMap(map) {
      return null;
    }
    copy() {
      return webview_options.WebViewOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (webview_options.WebViewOptions.new = function() {
    ;
  }).prototype = webview_options.WebViewOptions.prototype;
  dart.addTypeTests(webview_options.WebViewOptions);
  dart.addTypeCaches(webview_options.WebViewOptions);
  dart.setMethodSignature(webview_options.WebViewOptions, () => ({
    __proto__: dart.getMethods(webview_options.WebViewOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    copy: dart.fnType(dart.legacy(webview_options.WebViewOptions), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(webview_options.WebViewOptions, I[13]);
  dart.defineExtensionMethods(webview_options.WebViewOptions, ['toString']);
  webview_options.BrowserOptions = class BrowserOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).new();
    }
    static fromMap(map) {
      return null;
    }
    copy() {
      return webview_options.BrowserOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (webview_options.BrowserOptions.new = function() {
    ;
  }).prototype = webview_options.BrowserOptions.prototype;
  dart.addTypeTests(webview_options.BrowserOptions);
  dart.addTypeCaches(webview_options.BrowserOptions);
  dart.setMethodSignature(webview_options.BrowserOptions, () => ({
    __proto__: dart.getMethods(webview_options.BrowserOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    copy: dart.fnType(dart.legacy(webview_options.BrowserOptions), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(webview_options.BrowserOptions, I[13]);
  dart.defineExtensionMethods(webview_options.BrowserOptions, ['toString']);
  webview_options.ChromeSafariBrowserOptions = class ChromeSafariBrowserOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).new();
    }
    static fromMap(map) {
      return null;
    }
    copy() {
      return webview_options.ChromeSafariBrowserOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (webview_options.ChromeSafariBrowserOptions.new = function() {
    ;
  }).prototype = webview_options.ChromeSafariBrowserOptions.prototype;
  dart.addTypeTests(webview_options.ChromeSafariBrowserOptions);
  dart.addTypeCaches(webview_options.ChromeSafariBrowserOptions);
  dart.setMethodSignature(webview_options.ChromeSafariBrowserOptions, () => ({
    __proto__: dart.getMethods(webview_options.ChromeSafariBrowserOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    copy: dart.fnType(dart.legacy(webview_options.ChromeSafariBrowserOptions), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(webview_options.ChromeSafariBrowserOptions, I[13]);
  dart.defineExtensionMethods(webview_options.ChromeSafariBrowserOptions, ['toString']);
  var useShouldOverrideUrlLoading$ = dart.privateName(webview_options, "InAppWebViewOptions.useShouldOverrideUrlLoading");
  var useOnLoadResource$ = dart.privateName(webview_options, "InAppWebViewOptions.useOnLoadResource");
  var useOnDownloadStart$ = dart.privateName(webview_options, "InAppWebViewOptions.useOnDownloadStart");
  var clearCache$ = dart.privateName(webview_options, "InAppWebViewOptions.clearCache");
  var userAgent$ = dart.privateName(webview_options, "InAppWebViewOptions.userAgent");
  var applicationNameForUserAgent$ = dart.privateName(webview_options, "InAppWebViewOptions.applicationNameForUserAgent");
  var javaScriptEnabled$ = dart.privateName(webview_options, "InAppWebViewOptions.javaScriptEnabled");
  var debuggingEnabled$ = dart.privateName(webview_options, "InAppWebViewOptions.debuggingEnabled");
  var javaScriptCanOpenWindowsAutomatically$ = dart.privateName(webview_options, "InAppWebViewOptions.javaScriptCanOpenWindowsAutomatically");
  var mediaPlaybackRequiresUserGesture$ = dart.privateName(webview_options, "InAppWebViewOptions.mediaPlaybackRequiresUserGesture");
  var minimumFontSize$ = dart.privateName(webview_options, "InAppWebViewOptions.minimumFontSize");
  var verticalScrollBarEnabled$ = dart.privateName(webview_options, "InAppWebViewOptions.verticalScrollBarEnabled");
  var horizontalScrollBarEnabled$ = dart.privateName(webview_options, "InAppWebViewOptions.horizontalScrollBarEnabled");
  var resourceCustomSchemes$ = dart.privateName(webview_options, "InAppWebViewOptions.resourceCustomSchemes");
  var contentBlockers$ = dart.privateName(webview_options, "InAppWebViewOptions.contentBlockers");
  var preferredContentMode$ = dart.privateName(webview_options, "InAppWebViewOptions.preferredContentMode");
  var useShouldInterceptAjaxRequest$ = dart.privateName(webview_options, "InAppWebViewOptions.useShouldInterceptAjaxRequest");
  var useShouldInterceptFetchRequest$ = dart.privateName(webview_options, "InAppWebViewOptions.useShouldInterceptFetchRequest");
  var incognito$ = dart.privateName(webview_options, "InAppWebViewOptions.incognito");
  var cacheEnabled$ = dart.privateName(webview_options, "InAppWebViewOptions.cacheEnabled");
  var transparentBackground$ = dart.privateName(webview_options, "InAppWebViewOptions.transparentBackground");
  var disableVerticalScroll$ = dart.privateName(webview_options, "InAppWebViewOptions.disableVerticalScroll");
  var disableHorizontalScroll$ = dart.privateName(webview_options, "InAppWebViewOptions.disableHorizontalScroll");
  var disableContextMenu$ = dart.privateName(webview_options, "InAppWebViewOptions.disableContextMenu");
  var supportZoom$ = dart.privateName(webview_options, "InAppWebViewOptions.supportZoom");
  var UserPreferredContentMode__value = dart.privateName(types, "UserPreferredContentMode._value");
  webview_options.InAppWebViewOptions = class InAppWebViewOptions extends core.Object {
    get useShouldOverrideUrlLoading() {
      return this[useShouldOverrideUrlLoading$];
    }
    set useShouldOverrideUrlLoading(value) {
      this[useShouldOverrideUrlLoading$] = value;
    }
    get useOnLoadResource() {
      return this[useOnLoadResource$];
    }
    set useOnLoadResource(value) {
      this[useOnLoadResource$] = value;
    }
    get useOnDownloadStart() {
      return this[useOnDownloadStart$];
    }
    set useOnDownloadStart(value) {
      this[useOnDownloadStart$] = value;
    }
    get clearCache() {
      return this[clearCache$];
    }
    set clearCache(value) {
      this[clearCache$] = value;
    }
    get userAgent() {
      return this[userAgent$];
    }
    set userAgent(value) {
      this[userAgent$] = value;
    }
    get applicationNameForUserAgent() {
      return this[applicationNameForUserAgent$];
    }
    set applicationNameForUserAgent(value) {
      this[applicationNameForUserAgent$] = value;
    }
    get javaScriptEnabled() {
      return this[javaScriptEnabled$];
    }
    set javaScriptEnabled(value) {
      this[javaScriptEnabled$] = value;
    }
    get debuggingEnabled() {
      return this[debuggingEnabled$];
    }
    set debuggingEnabled(value) {
      this[debuggingEnabled$] = value;
    }
    get javaScriptCanOpenWindowsAutomatically() {
      return this[javaScriptCanOpenWindowsAutomatically$];
    }
    set javaScriptCanOpenWindowsAutomatically(value) {
      this[javaScriptCanOpenWindowsAutomatically$] = value;
    }
    get mediaPlaybackRequiresUserGesture() {
      return this[mediaPlaybackRequiresUserGesture$];
    }
    set mediaPlaybackRequiresUserGesture(value) {
      this[mediaPlaybackRequiresUserGesture$] = value;
    }
    get minimumFontSize() {
      return this[minimumFontSize$];
    }
    set minimumFontSize(value) {
      this[minimumFontSize$] = value;
    }
    get verticalScrollBarEnabled() {
      return this[verticalScrollBarEnabled$];
    }
    set verticalScrollBarEnabled(value) {
      this[verticalScrollBarEnabled$] = value;
    }
    get horizontalScrollBarEnabled() {
      return this[horizontalScrollBarEnabled$];
    }
    set horizontalScrollBarEnabled(value) {
      this[horizontalScrollBarEnabled$] = value;
    }
    get resourceCustomSchemes() {
      return this[resourceCustomSchemes$];
    }
    set resourceCustomSchemes(value) {
      this[resourceCustomSchemes$] = value;
    }
    get contentBlockers() {
      return this[contentBlockers$];
    }
    set contentBlockers(value) {
      this[contentBlockers$] = value;
    }
    get preferredContentMode() {
      return this[preferredContentMode$];
    }
    set preferredContentMode(value) {
      this[preferredContentMode$] = value;
    }
    get useShouldInterceptAjaxRequest() {
      return this[useShouldInterceptAjaxRequest$];
    }
    set useShouldInterceptAjaxRequest(value) {
      this[useShouldInterceptAjaxRequest$] = value;
    }
    get useShouldInterceptFetchRequest() {
      return this[useShouldInterceptFetchRequest$];
    }
    set useShouldInterceptFetchRequest(value) {
      this[useShouldInterceptFetchRequest$] = value;
    }
    get incognito() {
      return this[incognito$];
    }
    set incognito(value) {
      this[incognito$] = value;
    }
    get cacheEnabled() {
      return this[cacheEnabled$];
    }
    set cacheEnabled(value) {
      this[cacheEnabled$] = value;
    }
    get transparentBackground() {
      return this[transparentBackground$];
    }
    set transparentBackground(value) {
      this[transparentBackground$] = value;
    }
    get disableVerticalScroll() {
      return this[disableVerticalScroll$];
    }
    set disableVerticalScroll(value) {
      this[disableVerticalScroll$] = value;
    }
    get disableHorizontalScroll() {
      return this[disableHorizontalScroll$];
    }
    set disableHorizontalScroll(value) {
      this[disableHorizontalScroll$] = value;
    }
    get disableContextMenu() {
      return this[disableContextMenu$];
    }
    set disableContextMenu(value) {
      this[disableContextMenu$] = value;
    }
    get supportZoom() {
      return this[supportZoom$];
    }
    set supportZoom(value) {
      this[supportZoom$] = value;
    }
    toMap() {
      let t3;
      let contentBlockersMapList = T.JSArrayOfMapLOfStringL$MapLOfStringL$dynamic().of([]);
      this.contentBlockers[$forEach](dart.fn(contentBlocker => {
        contentBlockersMapList[$add](contentBlocker.toMap());
      }, T.ContentBlockerLToNull()));
      return new (T.IdentityMapOfStringL$dynamic()).from(["useShouldOverrideUrlLoading", this.useShouldOverrideUrlLoading, "useOnLoadResource", this.useOnLoadResource, "useOnDownloadStart", this.useOnDownloadStart, "clearCache", this.clearCache, "userAgent", this.userAgent, "applicationNameForUserAgent", this.applicationNameForUserAgent, "javaScriptEnabled", this.javaScriptEnabled, "debuggingEnabled", this.debuggingEnabled, "javaScriptCanOpenWindowsAutomatically", this.javaScriptCanOpenWindowsAutomatically, "mediaPlaybackRequiresUserGesture", this.mediaPlaybackRequiresUserGesture, "verticalScrollBarEnabled", this.verticalScrollBarEnabled, "horizontalScrollBarEnabled", this.horizontalScrollBarEnabled, "resourceCustomSchemes", this.resourceCustomSchemes, "contentBlockers", contentBlockersMapList, "preferredContentMode", (t3 = this.preferredContentMode, t3 == null ? null : t3.toValue()), "useShouldInterceptAjaxRequest", this.useShouldInterceptAjaxRequest, "useShouldInterceptFetchRequest", this.useShouldInterceptFetchRequest, "incognito", this.incognito, "cacheEnabled", this.cacheEnabled, "transparentBackground", this.transparentBackground, "disableVerticalScroll", this.disableVerticalScroll, "disableHorizontalScroll", this.disableHorizontalScroll, "disableContextMenu", this.disableContextMenu, "supportZoom", this.supportZoom]);
    }
    static fromMap(map) {
      let t3;
      let contentBlockers = T.JSArrayOfContentBlockerL().of([]);
      let contentBlockersMapList = T.ListL().as(map[$_get]("contentBlockers"));
      if (contentBlockersMapList != null) {
        contentBlockersMapList[$forEach](dart.fn(contentBlocker => {
          contentBlockers[$add](content_blocker.ContentBlocker.fromMap(T.LinkedHashMapOfdynamic$MapL().from(collection.LinkedHashMap.from(core.Map.as(contentBlocker)))));
        }, T.dynamicToNull()));
      }
      let options = new webview_options.InAppWebViewOptions.new();
      options.useShouldOverrideUrlLoading = T.boolL().as(map[$_get]("useShouldOverrideUrlLoading"));
      options.useOnLoadResource = T.boolL().as(map[$_get]("useOnLoadResource"));
      options.useOnDownloadStart = T.boolL().as(map[$_get]("useOnDownloadStart"));
      options.clearCache = T.boolL().as(map[$_get]("clearCache"));
      options.userAgent = T.StringL().as(map[$_get]("userAgent"));
      options.applicationNameForUserAgent = T.StringL().as(map[$_get]("applicationNameForUserAgent"));
      options.javaScriptEnabled = T.boolL().as(map[$_get]("javaScriptEnabled"));
      options.debuggingEnabled = T.boolL().as(map[$_get]("debuggingEnabled"));
      options.javaScriptCanOpenWindowsAutomatically = T.boolL().as(map[$_get]("javaScriptCanOpenWindowsAutomatically"));
      options.mediaPlaybackRequiresUserGesture = T.boolL().as(map[$_get]("mediaPlaybackRequiresUserGesture"));
      options.verticalScrollBarEnabled = T.boolL().as(map[$_get]("verticalScrollBarEnabled"));
      options.horizontalScrollBarEnabled = T.boolL().as(map[$_get]("horizontalScrollBarEnabled"));
      options.resourceCustomSchemes = T.ListOfStringL().from(core.Iterable.as((t3 = map[$_get]("resourceCustomSchemes"), t3 == null ? [] : t3)));
      options.contentBlockers = contentBlockers;
      options.preferredContentMode = types.UserPreferredContentMode.fromValue(T.intL().as(map[$_get]("preferredContentMode")));
      options.useShouldInterceptAjaxRequest = T.boolL().as(map[$_get]("useShouldInterceptAjaxRequest"));
      options.useShouldInterceptFetchRequest = T.boolL().as(map[$_get]("useShouldInterceptFetchRequest"));
      options.incognito = T.boolL().as(map[$_get]("incognito"));
      options.cacheEnabled = T.boolL().as(map[$_get]("cacheEnabled"));
      options.transparentBackground = T.boolL().as(map[$_get]("transparentBackground"));
      options.disableVerticalScroll = T.boolL().as(map[$_get]("disableVerticalScroll"));
      options.disableHorizontalScroll = T.boolL().as(map[$_get]("disableHorizontalScroll"));
      options.disableContextMenu = T.boolL().as(map[$_get]("disableContextMenu"));
      options.supportZoom = T.boolL().as(map[$_get]("supportZoom"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.InAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (webview_options.InAppWebViewOptions.new = function(opts) {
    let useShouldOverrideUrlLoading = opts && 'useShouldOverrideUrlLoading' in opts ? opts.useShouldOverrideUrlLoading : false;
    let useOnLoadResource = opts && 'useOnLoadResource' in opts ? opts.useOnLoadResource : false;
    let useOnDownloadStart = opts && 'useOnDownloadStart' in opts ? opts.useOnDownloadStart : false;
    let clearCache = opts && 'clearCache' in opts ? opts.clearCache : false;
    let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "";
    let applicationNameForUserAgent = opts && 'applicationNameForUserAgent' in opts ? opts.applicationNameForUserAgent : "";
    let javaScriptEnabled = opts && 'javaScriptEnabled' in opts ? opts.javaScriptEnabled : true;
    let debuggingEnabled = opts && 'debuggingEnabled' in opts ? opts.debuggingEnabled : false;
    let javaScriptCanOpenWindowsAutomatically = opts && 'javaScriptCanOpenWindowsAutomatically' in opts ? opts.javaScriptCanOpenWindowsAutomatically : false;
    let mediaPlaybackRequiresUserGesture = opts && 'mediaPlaybackRequiresUserGesture' in opts ? opts.mediaPlaybackRequiresUserGesture : true;
    let minimumFontSize = opts && 'minimumFontSize' in opts ? opts.minimumFontSize : null;
    let verticalScrollBarEnabled = opts && 'verticalScrollBarEnabled' in opts ? opts.verticalScrollBarEnabled : true;
    let horizontalScrollBarEnabled = opts && 'horizontalScrollBarEnabled' in opts ? opts.horizontalScrollBarEnabled : true;
    let resourceCustomSchemes = opts && 'resourceCustomSchemes' in opts ? opts.resourceCustomSchemes : C[30] || CT.C30;
    let contentBlockers = opts && 'contentBlockers' in opts ? opts.contentBlockers : C[32] || CT.C32;
    let preferredContentMode = opts && 'preferredContentMode' in opts ? opts.preferredContentMode : C[33] || CT.C33;
    let useShouldInterceptAjaxRequest = opts && 'useShouldInterceptAjaxRequest' in opts ? opts.useShouldInterceptAjaxRequest : false;
    let useShouldInterceptFetchRequest = opts && 'useShouldInterceptFetchRequest' in opts ? opts.useShouldInterceptFetchRequest : false;
    let incognito = opts && 'incognito' in opts ? opts.incognito : false;
    let cacheEnabled = opts && 'cacheEnabled' in opts ? opts.cacheEnabled : true;
    let transparentBackground = opts && 'transparentBackground' in opts ? opts.transparentBackground : false;
    let disableVerticalScroll = opts && 'disableVerticalScroll' in opts ? opts.disableVerticalScroll : false;
    let disableHorizontalScroll = opts && 'disableHorizontalScroll' in opts ? opts.disableHorizontalScroll : false;
    let disableContextMenu = opts && 'disableContextMenu' in opts ? opts.disableContextMenu : false;
    let supportZoom = opts && 'supportZoom' in opts ? opts.supportZoom : true;
    this[useShouldOverrideUrlLoading$] = useShouldOverrideUrlLoading;
    this[useOnLoadResource$] = useOnLoadResource;
    this[useOnDownloadStart$] = useOnDownloadStart;
    this[clearCache$] = clearCache;
    this[userAgent$] = userAgent;
    this[applicationNameForUserAgent$] = applicationNameForUserAgent;
    this[javaScriptEnabled$] = javaScriptEnabled;
    this[debuggingEnabled$] = debuggingEnabled;
    this[javaScriptCanOpenWindowsAutomatically$] = javaScriptCanOpenWindowsAutomatically;
    this[mediaPlaybackRequiresUserGesture$] = mediaPlaybackRequiresUserGesture;
    this[minimumFontSize$] = minimumFontSize;
    this[verticalScrollBarEnabled$] = verticalScrollBarEnabled;
    this[horizontalScrollBarEnabled$] = horizontalScrollBarEnabled;
    this[resourceCustomSchemes$] = resourceCustomSchemes;
    this[contentBlockers$] = contentBlockers;
    this[preferredContentMode$] = preferredContentMode;
    this[useShouldInterceptAjaxRequest$] = useShouldInterceptAjaxRequest;
    this[useShouldInterceptFetchRequest$] = useShouldInterceptFetchRequest;
    this[incognito$] = incognito;
    this[cacheEnabled$] = cacheEnabled;
    this[transparentBackground$] = transparentBackground;
    this[disableVerticalScroll$] = disableVerticalScroll;
    this[disableHorizontalScroll$] = disableHorizontalScroll;
    this[disableContextMenu$] = disableContextMenu;
    this[supportZoom$] = supportZoom;
    if (this.minimumFontSize == null) this.minimumFontSize = dart.test(io.Platform.isAndroid) ? 8 : 0;
    if (!(!dart.test(this.resourceCustomSchemes[$contains]("http")) && !dart.test(this.resourceCustomSchemes[$contains]("https")))) dart.assertFailed(null, I[14], 205, 12, "!this.resourceCustomSchemes.contains(\"http\") &&\n        !this.resourceCustomSchemes.contains(\"https\")");
  }).prototype = webview_options.InAppWebViewOptions.prototype;
  dart.addTypeTests(webview_options.InAppWebViewOptions);
  dart.addTypeCaches(webview_options.InAppWebViewOptions);
  webview_options.InAppWebViewOptions[dart.implements] = () => [webview_options.WebViewOptions, webview_options.BrowserOptions, webview_options.AndroidOptions, webview_options.IosOptions];
  dart.setMethodSignature(webview_options.InAppWebViewOptions, () => ({
    __proto__: dart.getMethods(webview_options.InAppWebViewOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.InAppWebViewOptions), [])
  }));
  dart.setLibraryUri(webview_options.InAppWebViewOptions, I[13]);
  dart.setFieldSignature(webview_options.InAppWebViewOptions, () => ({
    __proto__: dart.getFields(webview_options.InAppWebViewOptions.__proto__),
    useShouldOverrideUrlLoading: dart.fieldType(dart.legacy(core.bool)),
    useOnLoadResource: dart.fieldType(dart.legacy(core.bool)),
    useOnDownloadStart: dart.fieldType(dart.legacy(core.bool)),
    clearCache: dart.fieldType(dart.legacy(core.bool)),
    userAgent: dart.fieldType(dart.legacy(core.String)),
    applicationNameForUserAgent: dart.fieldType(dart.legacy(core.String)),
    javaScriptEnabled: dart.fieldType(dart.legacy(core.bool)),
    debuggingEnabled: dart.fieldType(dart.legacy(core.bool)),
    javaScriptCanOpenWindowsAutomatically: dart.fieldType(dart.legacy(core.bool)),
    mediaPlaybackRequiresUserGesture: dart.fieldType(dart.legacy(core.bool)),
    minimumFontSize: dart.fieldType(dart.legacy(core.int)),
    verticalScrollBarEnabled: dart.fieldType(dart.legacy(core.bool)),
    horizontalScrollBarEnabled: dart.fieldType(dart.legacy(core.bool)),
    resourceCustomSchemes: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    contentBlockers: dart.fieldType(dart.legacy(core.List$(dart.legacy(content_blocker.ContentBlocker)))),
    preferredContentMode: dart.fieldType(dart.legacy(types.UserPreferredContentMode)),
    useShouldInterceptAjaxRequest: dart.fieldType(dart.legacy(core.bool)),
    useShouldInterceptFetchRequest: dart.fieldType(dart.legacy(core.bool)),
    incognito: dart.fieldType(dart.legacy(core.bool)),
    cacheEnabled: dart.fieldType(dart.legacy(core.bool)),
    transparentBackground: dart.fieldType(dart.legacy(core.bool)),
    disableVerticalScroll: dart.fieldType(dart.legacy(core.bool)),
    disableHorizontalScroll: dart.fieldType(dart.legacy(core.bool)),
    disableContextMenu: dart.fieldType(dart.legacy(core.bool)),
    supportZoom: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.InAppWebViewOptions, ['toString']);
  var textZoom$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.textZoom");
  var clearSessionCache$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.clearSessionCache");
  var builtInZoomControls$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.builtInZoomControls");
  var displayZoomControls$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.displayZoomControls");
  var databaseEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.databaseEnabled");
  var domStorageEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.domStorageEnabled");
  var useWideViewPort$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.useWideViewPort");
  var safeBrowsingEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.safeBrowsingEnabled");
  var mixedContentMode$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.mixedContentMode");
  var allowContentAccess$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.allowContentAccess");
  var allowFileAccess$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.allowFileAccess");
  var allowFileAccessFromFileURLs$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.allowFileAccessFromFileURLs");
  var allowUniversalAccessFromFileURLs$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.allowUniversalAccessFromFileURLs");
  var appCachePath$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.appCachePath");
  var blockNetworkImage$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.blockNetworkImage");
  var blockNetworkLoads$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.blockNetworkLoads");
  var cacheMode$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.cacheMode");
  var cursiveFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.cursiveFontFamily");
  var defaultFixedFontSize$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.defaultFixedFontSize");
  var defaultFontSize$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.defaultFontSize");
  var defaultTextEncodingName$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.defaultTextEncodingName");
  var disabledActionModeMenuItems$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.disabledActionModeMenuItems");
  var fantasyFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.fantasyFontFamily");
  var fixedFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.fixedFontFamily");
  var forceDark$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.forceDark");
  var geolocationEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.geolocationEnabled");
  var layoutAlgorithm$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.layoutAlgorithm");
  var loadWithOverviewMode$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.loadWithOverviewMode");
  var loadsImagesAutomatically$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.loadsImagesAutomatically");
  var minimumLogicalFontSize$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.minimumLogicalFontSize");
  var initialScale$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.initialScale");
  var needInitialFocus$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.needInitialFocus");
  var offscreenPreRaster$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.offscreenPreRaster");
  var sansSerifFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.sansSerifFontFamily");
  var serifFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.serifFontFamily");
  var standardFontFamily$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.standardFontFamily");
  var saveFormData$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.saveFormData");
  var thirdPartyCookiesEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.thirdPartyCookiesEnabled");
  var hardwareAcceleration$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.hardwareAcceleration");
  var supportMultipleWindows$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.supportMultipleWindows");
  var regexToCancelSubFramesLoading$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.regexToCancelSubFramesLoading");
  var useShouldInterceptRequest$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.useShouldInterceptRequest");
  var useOnRenderProcessGone$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.useOnRenderProcessGone");
  var overScrollMode$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.overScrollMode");
  var networkAvailable$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.networkAvailable");
  var scrollBarStyle$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.scrollBarStyle");
  var verticalScrollbarPosition$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.verticalScrollbarPosition");
  var scrollBarDefaultDelayBeforeFade$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.scrollBarDefaultDelayBeforeFade");
  var scrollbarFadingEnabled$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.scrollbarFadingEnabled");
  var scrollBarFadeDuration$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.scrollBarFadeDuration");
  var rendererPriorityPolicy$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.rendererPriorityPolicy");
  var disableDefaultErrorPage$ = dart.privateName(webview_options, "AndroidInAppWebViewOptions.disableDefaultErrorPage");
  var AndroidCacheMode__value = dart.privateName(types, "AndroidCacheMode._value");
  var AndroidForceDark__value = dart.privateName(types, "AndroidForceDark._value");
  var AndroidOverScrollMode__value = dart.privateName(types, "AndroidOverScrollMode._value");
  var AndroidScrollBarStyle__value = dart.privateName(types, "AndroidScrollBarStyle._value");
  var AndroidVerticalScrollbarPosition__value = dart.privateName(types, "AndroidVerticalScrollbarPosition._value");
  webview_options.AndroidInAppWebViewOptions = class AndroidInAppWebViewOptions extends core.Object {
    get textZoom() {
      return this[textZoom$];
    }
    set textZoom(value) {
      this[textZoom$] = value;
    }
    get clearSessionCache() {
      return this[clearSessionCache$];
    }
    set clearSessionCache(value) {
      this[clearSessionCache$] = value;
    }
    get builtInZoomControls() {
      return this[builtInZoomControls$];
    }
    set builtInZoomControls(value) {
      this[builtInZoomControls$] = value;
    }
    get displayZoomControls() {
      return this[displayZoomControls$];
    }
    set displayZoomControls(value) {
      this[displayZoomControls$] = value;
    }
    get databaseEnabled() {
      return this[databaseEnabled$];
    }
    set databaseEnabled(value) {
      this[databaseEnabled$] = value;
    }
    get domStorageEnabled() {
      return this[domStorageEnabled$];
    }
    set domStorageEnabled(value) {
      this[domStorageEnabled$] = value;
    }
    get useWideViewPort() {
      return this[useWideViewPort$];
    }
    set useWideViewPort(value) {
      this[useWideViewPort$] = value;
    }
    get safeBrowsingEnabled() {
      return this[safeBrowsingEnabled$];
    }
    set safeBrowsingEnabled(value) {
      this[safeBrowsingEnabled$] = value;
    }
    get mixedContentMode() {
      return this[mixedContentMode$];
    }
    set mixedContentMode(value) {
      this[mixedContentMode$] = value;
    }
    get allowContentAccess() {
      return this[allowContentAccess$];
    }
    set allowContentAccess(value) {
      this[allowContentAccess$] = value;
    }
    get allowFileAccess() {
      return this[allowFileAccess$];
    }
    set allowFileAccess(value) {
      this[allowFileAccess$] = value;
    }
    get allowFileAccessFromFileURLs() {
      return this[allowFileAccessFromFileURLs$];
    }
    set allowFileAccessFromFileURLs(value) {
      this[allowFileAccessFromFileURLs$] = value;
    }
    get allowUniversalAccessFromFileURLs() {
      return this[allowUniversalAccessFromFileURLs$];
    }
    set allowUniversalAccessFromFileURLs(value) {
      this[allowUniversalAccessFromFileURLs$] = value;
    }
    get appCachePath() {
      return this[appCachePath$];
    }
    set appCachePath(value) {
      this[appCachePath$] = value;
    }
    get blockNetworkImage() {
      return this[blockNetworkImage$];
    }
    set blockNetworkImage(value) {
      this[blockNetworkImage$] = value;
    }
    get blockNetworkLoads() {
      return this[blockNetworkLoads$];
    }
    set blockNetworkLoads(value) {
      this[blockNetworkLoads$] = value;
    }
    get cacheMode() {
      return this[cacheMode$];
    }
    set cacheMode(value) {
      this[cacheMode$] = value;
    }
    get cursiveFontFamily() {
      return this[cursiveFontFamily$];
    }
    set cursiveFontFamily(value) {
      this[cursiveFontFamily$] = value;
    }
    get defaultFixedFontSize() {
      return this[defaultFixedFontSize$];
    }
    set defaultFixedFontSize(value) {
      this[defaultFixedFontSize$] = value;
    }
    get defaultFontSize() {
      return this[defaultFontSize$];
    }
    set defaultFontSize(value) {
      this[defaultFontSize$] = value;
    }
    get defaultTextEncodingName() {
      return this[defaultTextEncodingName$];
    }
    set defaultTextEncodingName(value) {
      this[defaultTextEncodingName$] = value;
    }
    get disabledActionModeMenuItems() {
      return this[disabledActionModeMenuItems$];
    }
    set disabledActionModeMenuItems(value) {
      this[disabledActionModeMenuItems$] = value;
    }
    get fantasyFontFamily() {
      return this[fantasyFontFamily$];
    }
    set fantasyFontFamily(value) {
      this[fantasyFontFamily$] = value;
    }
    get fixedFontFamily() {
      return this[fixedFontFamily$];
    }
    set fixedFontFamily(value) {
      this[fixedFontFamily$] = value;
    }
    get forceDark() {
      return this[forceDark$];
    }
    set forceDark(value) {
      this[forceDark$] = value;
    }
    get geolocationEnabled() {
      return this[geolocationEnabled$];
    }
    set geolocationEnabled(value) {
      this[geolocationEnabled$] = value;
    }
    get layoutAlgorithm() {
      return this[layoutAlgorithm$];
    }
    set layoutAlgorithm(value) {
      this[layoutAlgorithm$] = value;
    }
    get loadWithOverviewMode() {
      return this[loadWithOverviewMode$];
    }
    set loadWithOverviewMode(value) {
      this[loadWithOverviewMode$] = value;
    }
    get loadsImagesAutomatically() {
      return this[loadsImagesAutomatically$];
    }
    set loadsImagesAutomatically(value) {
      this[loadsImagesAutomatically$] = value;
    }
    get minimumLogicalFontSize() {
      return this[minimumLogicalFontSize$];
    }
    set minimumLogicalFontSize(value) {
      this[minimumLogicalFontSize$] = value;
    }
    get initialScale() {
      return this[initialScale$];
    }
    set initialScale(value) {
      this[initialScale$] = value;
    }
    get needInitialFocus() {
      return this[needInitialFocus$];
    }
    set needInitialFocus(value) {
      this[needInitialFocus$] = value;
    }
    get offscreenPreRaster() {
      return this[offscreenPreRaster$];
    }
    set offscreenPreRaster(value) {
      this[offscreenPreRaster$] = value;
    }
    get sansSerifFontFamily() {
      return this[sansSerifFontFamily$];
    }
    set sansSerifFontFamily(value) {
      this[sansSerifFontFamily$] = value;
    }
    get serifFontFamily() {
      return this[serifFontFamily$];
    }
    set serifFontFamily(value) {
      this[serifFontFamily$] = value;
    }
    get standardFontFamily() {
      return this[standardFontFamily$];
    }
    set standardFontFamily(value) {
      this[standardFontFamily$] = value;
    }
    get saveFormData() {
      return this[saveFormData$];
    }
    set saveFormData(value) {
      this[saveFormData$] = value;
    }
    get thirdPartyCookiesEnabled() {
      return this[thirdPartyCookiesEnabled$];
    }
    set thirdPartyCookiesEnabled(value) {
      this[thirdPartyCookiesEnabled$] = value;
    }
    get hardwareAcceleration() {
      return this[hardwareAcceleration$];
    }
    set hardwareAcceleration(value) {
      this[hardwareAcceleration$] = value;
    }
    get supportMultipleWindows() {
      return this[supportMultipleWindows$];
    }
    set supportMultipleWindows(value) {
      this[supportMultipleWindows$] = value;
    }
    get regexToCancelSubFramesLoading() {
      return this[regexToCancelSubFramesLoading$];
    }
    set regexToCancelSubFramesLoading(value) {
      this[regexToCancelSubFramesLoading$] = value;
    }
    get useShouldInterceptRequest() {
      return this[useShouldInterceptRequest$];
    }
    set useShouldInterceptRequest(value) {
      this[useShouldInterceptRequest$] = value;
    }
    get useOnRenderProcessGone() {
      return this[useOnRenderProcessGone$];
    }
    set useOnRenderProcessGone(value) {
      this[useOnRenderProcessGone$] = value;
    }
    get overScrollMode() {
      return this[overScrollMode$];
    }
    set overScrollMode(value) {
      this[overScrollMode$] = value;
    }
    get networkAvailable() {
      return this[networkAvailable$];
    }
    set networkAvailable(value) {
      this[networkAvailable$] = value;
    }
    get scrollBarStyle() {
      return this[scrollBarStyle$];
    }
    set scrollBarStyle(value) {
      this[scrollBarStyle$] = value;
    }
    get verticalScrollbarPosition() {
      return this[verticalScrollbarPosition$];
    }
    set verticalScrollbarPosition(value) {
      this[verticalScrollbarPosition$] = value;
    }
    get scrollBarDefaultDelayBeforeFade() {
      return this[scrollBarDefaultDelayBeforeFade$];
    }
    set scrollBarDefaultDelayBeforeFade(value) {
      this[scrollBarDefaultDelayBeforeFade$] = value;
    }
    get scrollbarFadingEnabled() {
      return this[scrollbarFadingEnabled$];
    }
    set scrollbarFadingEnabled(value) {
      this[scrollbarFadingEnabled$] = value;
    }
    get scrollBarFadeDuration() {
      return this[scrollBarFadeDuration$];
    }
    set scrollBarFadeDuration(value) {
      this[scrollBarFadeDuration$] = value;
    }
    get rendererPriorityPolicy() {
      return this[rendererPriorityPolicy$];
    }
    set rendererPriorityPolicy(value) {
      this[rendererPriorityPolicy$] = value;
    }
    get disableDefaultErrorPage() {
      return this[disableDefaultErrorPage$];
    }
    set disableDefaultErrorPage(value) {
      this[disableDefaultErrorPage$] = value;
    }
    toMap() {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4, t3$5, t3$6;
      return new (T.IdentityMapOfStringL$dynamic()).from(["textZoom", this.textZoom, "clearSessionCache", this.clearSessionCache, "builtInZoomControls", this.builtInZoomControls, "displayZoomControls", this.displayZoomControls, "databaseEnabled", this.databaseEnabled, "domStorageEnabled", this.domStorageEnabled, "useWideViewPort", this.useWideViewPort, "safeBrowsingEnabled", this.safeBrowsingEnabled, "mixedContentMode", (t3 = this.mixedContentMode, t3 == null ? null : t3.toValue()), "allowContentAccess", this.allowContentAccess, "allowFileAccess", this.allowFileAccess, "allowFileAccessFromFileURLs", this.allowFileAccessFromFileURLs, "allowUniversalAccessFromFileURLs", this.allowUniversalAccessFromFileURLs, "appCachePath", this.appCachePath, "blockNetworkImage", this.blockNetworkImage, "blockNetworkLoads", this.blockNetworkLoads, "cacheMode", (t3$ = this.cacheMode, t3$ == null ? null : t3$.toValue()), "cursiveFontFamily", this.cursiveFontFamily, "defaultFixedFontSize", this.defaultFixedFontSize, "defaultFontSize", this.defaultFontSize, "defaultTextEncodingName", this.defaultTextEncodingName, "disabledActionModeMenuItems", (t3$0 = this.disabledActionModeMenuItems, t3$0 == null ? null : t3$0.toValue()), "fantasyFontFamily", this.fantasyFontFamily, "fixedFontFamily", this.fixedFontFamily, "forceDark", (t3$1 = this.forceDark, t3$1 == null ? null : t3$1.toValue()), "geolocationEnabled", this.geolocationEnabled, "layoutAlgorithm", (t3$2 = this.layoutAlgorithm, t3$2 == null ? null : t3$2.toValue()), "loadWithOverviewMode", this.loadWithOverviewMode, "loadsImagesAutomatically", this.loadsImagesAutomatically, "minimumLogicalFontSize", this.minimumLogicalFontSize, "initialScale", this.initialScale, "needInitialFocus", this.needInitialFocus, "offscreenPreRaster", this.offscreenPreRaster, "sansSerifFontFamily", this.sansSerifFontFamily, "serifFontFamily", this.serifFontFamily, "standardFontFamily", this.standardFontFamily, "saveFormData", this.saveFormData, "thirdPartyCookiesEnabled", this.thirdPartyCookiesEnabled, "hardwareAcceleration", this.hardwareAcceleration, "supportMultipleWindows", this.supportMultipleWindows, "regexToCancelSubFramesLoading", this.regexToCancelSubFramesLoading, "useShouldInterceptRequest", this.useShouldInterceptRequest, "useOnRenderProcessGone", this.useOnRenderProcessGone, "overScrollMode", (t3$3 = this.overScrollMode, t3$3 == null ? null : t3$3.toValue()), "networkAvailable", this.networkAvailable, "scrollBarStyle", (t3$4 = this.scrollBarStyle, t3$4 == null ? null : t3$4.toValue()), "verticalScrollbarPosition", (t3$5 = this.verticalScrollbarPosition, t3$5 == null ? null : t3$5.toValue()), "scrollBarDefaultDelayBeforeFade", this.scrollBarDefaultDelayBeforeFade, "scrollbarFadingEnabled", this.scrollbarFadingEnabled, "scrollBarFadeDuration", this.scrollBarFadeDuration, "rendererPriorityPolicy", (t3$6 = this.rendererPriorityPolicy, t3$6 == null ? null : t3$6.toMap()), "disableDefaultErrorPage", this.disableDefaultErrorPage]);
    }
    static fromMap(map) {
      let t3;
      let options = new webview_options.AndroidInAppWebViewOptions.new();
      options.textZoom = T.intL().as(map[$_get]("textZoom"));
      options.clearSessionCache = T.boolL().as(map[$_get]("clearSessionCache"));
      options.builtInZoomControls = T.boolL().as(map[$_get]("builtInZoomControls"));
      options.displayZoomControls = T.boolL().as(map[$_get]("displayZoomControls"));
      options.databaseEnabled = T.boolL().as(map[$_get]("databaseEnabled"));
      options.domStorageEnabled = T.boolL().as(map[$_get]("domStorageEnabled"));
      options.useWideViewPort = T.boolL().as(map[$_get]("useWideViewPort"));
      options.safeBrowsingEnabled = T.boolL().as(map[$_get]("safeBrowsingEnabled"));
      options.mixedContentMode = types.AndroidMixedContentMode.fromValue(T.intL().as(map[$_get]("mixedContentMode")));
      options.allowContentAccess = T.boolL().as(map[$_get]("allowContentAccess"));
      options.allowFileAccess = T.boolL().as(map[$_get]("allowFileAccess"));
      options.allowFileAccessFromFileURLs = T.boolL().as(map[$_get]("allowFileAccessFromFileURLs"));
      options.allowUniversalAccessFromFileURLs = T.boolL().as(map[$_get]("allowUniversalAccessFromFileURLs"));
      options.appCachePath = T.StringL().as(map[$_get]("appCachePath"));
      options.blockNetworkImage = T.boolL().as(map[$_get]("blockNetworkImage"));
      options.blockNetworkLoads = T.boolL().as(map[$_get]("blockNetworkLoads"));
      options.cacheMode = types.AndroidCacheMode.fromValue(T.intL().as(map[$_get]("cacheMode")));
      options.cursiveFontFamily = T.StringL().as(map[$_get]("cursiveFontFamily"));
      options.defaultFixedFontSize = T.intL().as(map[$_get]("defaultFixedFontSize"));
      options.defaultFontSize = T.intL().as(map[$_get]("defaultFontSize"));
      options.defaultTextEncodingName = T.StringL().as(map[$_get]("defaultTextEncodingName"));
      options.disabledActionModeMenuItems = types.AndroidActionModeMenuItem.fromValue(T.intL().as(map[$_get]("disabledActionModeMenuItems")));
      options.fantasyFontFamily = T.StringL().as(map[$_get]("fantasyFontFamily"));
      options.fixedFontFamily = T.StringL().as(map[$_get]("fixedFontFamily"));
      options.forceDark = types.AndroidForceDark.fromValue(T.intL().as(map[$_get]("forceDark")));
      options.geolocationEnabled = T.boolL().as(map[$_get]("geolocationEnabled"));
      options.layoutAlgorithm = types.AndroidLayoutAlgorithm.fromValue(T.StringL().as(map[$_get]("layoutAlgorithm")));
      options.loadWithOverviewMode = T.boolL().as(map[$_get]("loadWithOverviewMode"));
      options.loadsImagesAutomatically = T.boolL().as(map[$_get]("loadsImagesAutomatically"));
      options.minimumLogicalFontSize = T.intL().as(map[$_get]("minimumLogicalFontSize"));
      options.initialScale = T.intL().as(map[$_get]("initialScale"));
      options.needInitialFocus = T.boolL().as(map[$_get]("needInitialFocus"));
      options.offscreenPreRaster = T.boolL().as(map[$_get]("offscreenPreRaster"));
      options.sansSerifFontFamily = T.StringL().as(map[$_get]("sansSerifFontFamily"));
      options.serifFontFamily = T.StringL().as(map[$_get]("serifFontFamily"));
      options.standardFontFamily = T.StringL().as(map[$_get]("standardFontFamily"));
      options.saveFormData = T.boolL().as(map[$_get]("saveFormData"));
      options.thirdPartyCookiesEnabled = T.boolL().as(map[$_get]("thirdPartyCookiesEnabled"));
      options.hardwareAcceleration = T.boolL().as(map[$_get]("hardwareAcceleration"));
      options.supportMultipleWindows = T.boolL().as(map[$_get]("supportMultipleWindows"));
      options.regexToCancelSubFramesLoading = T.StringL().as(map[$_get]("regexToCancelSubFramesLoading"));
      options.useShouldInterceptRequest = T.boolL().as(map[$_get]("useShouldInterceptRequest"));
      options.useOnRenderProcessGone = T.boolL().as(map[$_get]("useOnRenderProcessGone"));
      options.overScrollMode = types.AndroidOverScrollMode.fromValue(T.intL().as(map[$_get]("overScrollMode")));
      options.networkAvailable = T.boolL().as(map[$_get]("networkAvailable"));
      options.scrollBarStyle = types.AndroidScrollBarStyle.fromValue(T.intL().as(map[$_get]("scrollBarStyle")));
      options.verticalScrollbarPosition = types.AndroidVerticalScrollbarPosition.fromValue(T.intL().as(map[$_get]("verticalScrollbarPosition")));
      options.scrollBarDefaultDelayBeforeFade = T.intL().as(map[$_get]("scrollBarDefaultDelayBeforeFade"));
      options.scrollbarFadingEnabled = T.boolL().as(map[$_get]("scrollbarFadingEnabled"));
      options.scrollBarFadeDuration = T.intL().as(map[$_get]("scrollBarFadeDuration"));
      options.rendererPriorityPolicy = types.RendererPriorityPolicy.fromMap(T.MapLOfStringL$dynamic().as((t3 = map[$_get]("rendererPriorityPolicy"), t3 == null ? null : dart.dgsend(t3, [T.StringL(), dart.dynamic], 'cast', []))));
      options.disableDefaultErrorPage = T.boolL().as(map[$_get]("disableDefaultErrorPage"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.AndroidInAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (webview_options.AndroidInAppWebViewOptions.new = function(opts) {
    let textZoom = opts && 'textZoom' in opts ? opts.textZoom : 100;
    let clearSessionCache = opts && 'clearSessionCache' in opts ? opts.clearSessionCache : false;
    let builtInZoomControls = opts && 'builtInZoomControls' in opts ? opts.builtInZoomControls : true;
    let displayZoomControls = opts && 'displayZoomControls' in opts ? opts.displayZoomControls : false;
    let databaseEnabled = opts && 'databaseEnabled' in opts ? opts.databaseEnabled : true;
    let domStorageEnabled = opts && 'domStorageEnabled' in opts ? opts.domStorageEnabled : true;
    let useWideViewPort = opts && 'useWideViewPort' in opts ? opts.useWideViewPort : true;
    let safeBrowsingEnabled = opts && 'safeBrowsingEnabled' in opts ? opts.safeBrowsingEnabled : true;
    let mixedContentMode = opts && 'mixedContentMode' in opts ? opts.mixedContentMode : null;
    let allowContentAccess = opts && 'allowContentAccess' in opts ? opts.allowContentAccess : true;
    let allowFileAccess = opts && 'allowFileAccess' in opts ? opts.allowFileAccess : true;
    let allowFileAccessFromFileURLs = opts && 'allowFileAccessFromFileURLs' in opts ? opts.allowFileAccessFromFileURLs : false;
    let allowUniversalAccessFromFileURLs = opts && 'allowUniversalAccessFromFileURLs' in opts ? opts.allowUniversalAccessFromFileURLs : false;
    let appCachePath = opts && 'appCachePath' in opts ? opts.appCachePath : null;
    let blockNetworkImage = opts && 'blockNetworkImage' in opts ? opts.blockNetworkImage : false;
    let blockNetworkLoads = opts && 'blockNetworkLoads' in opts ? opts.blockNetworkLoads : false;
    let cacheMode = opts && 'cacheMode' in opts ? opts.cacheMode : C[34] || CT.C34;
    let cursiveFontFamily = opts && 'cursiveFontFamily' in opts ? opts.cursiveFontFamily : "cursive";
    let defaultFixedFontSize = opts && 'defaultFixedFontSize' in opts ? opts.defaultFixedFontSize : 16;
    let defaultFontSize = opts && 'defaultFontSize' in opts ? opts.defaultFontSize : 16;
    let defaultTextEncodingName = opts && 'defaultTextEncodingName' in opts ? opts.defaultTextEncodingName : "UTF-8";
    let disabledActionModeMenuItems = opts && 'disabledActionModeMenuItems' in opts ? opts.disabledActionModeMenuItems : null;
    let fantasyFontFamily = opts && 'fantasyFontFamily' in opts ? opts.fantasyFontFamily : "fantasy";
    let fixedFontFamily = opts && 'fixedFontFamily' in opts ? opts.fixedFontFamily : "monospace";
    let forceDark = opts && 'forceDark' in opts ? opts.forceDark : C[35] || CT.C35;
    let geolocationEnabled = opts && 'geolocationEnabled' in opts ? opts.geolocationEnabled : true;
    let layoutAlgorithm = opts && 'layoutAlgorithm' in opts ? opts.layoutAlgorithm : null;
    let loadWithOverviewMode = opts && 'loadWithOverviewMode' in opts ? opts.loadWithOverviewMode : true;
    let loadsImagesAutomatically = opts && 'loadsImagesAutomatically' in opts ? opts.loadsImagesAutomatically : true;
    let minimumLogicalFontSize = opts && 'minimumLogicalFontSize' in opts ? opts.minimumLogicalFontSize : 8;
    let needInitialFocus = opts && 'needInitialFocus' in opts ? opts.needInitialFocus : true;
    let offscreenPreRaster = opts && 'offscreenPreRaster' in opts ? opts.offscreenPreRaster : false;
    let sansSerifFontFamily = opts && 'sansSerifFontFamily' in opts ? opts.sansSerifFontFamily : "sans-serif";
    let serifFontFamily = opts && 'serifFontFamily' in opts ? opts.serifFontFamily : "sans-serif";
    let standardFontFamily = opts && 'standardFontFamily' in opts ? opts.standardFontFamily : "sans-serif";
    let saveFormData = opts && 'saveFormData' in opts ? opts.saveFormData : true;
    let thirdPartyCookiesEnabled = opts && 'thirdPartyCookiesEnabled' in opts ? opts.thirdPartyCookiesEnabled : true;
    let hardwareAcceleration = opts && 'hardwareAcceleration' in opts ? opts.hardwareAcceleration : true;
    let initialScale = opts && 'initialScale' in opts ? opts.initialScale : 0;
    let supportMultipleWindows = opts && 'supportMultipleWindows' in opts ? opts.supportMultipleWindows : false;
    let regexToCancelSubFramesLoading = opts && 'regexToCancelSubFramesLoading' in opts ? opts.regexToCancelSubFramesLoading : null;
    let useShouldInterceptRequest = opts && 'useShouldInterceptRequest' in opts ? opts.useShouldInterceptRequest : false;
    let useOnRenderProcessGone = opts && 'useOnRenderProcessGone' in opts ? opts.useOnRenderProcessGone : false;
    let overScrollMode = opts && 'overScrollMode' in opts ? opts.overScrollMode : C[36] || CT.C36;
    let networkAvailable = opts && 'networkAvailable' in opts ? opts.networkAvailable : null;
    let scrollBarStyle = opts && 'scrollBarStyle' in opts ? opts.scrollBarStyle : C[37] || CT.C37;
    let verticalScrollbarPosition = opts && 'verticalScrollbarPosition' in opts ? opts.verticalScrollbarPosition : C[38] || CT.C38;
    let scrollBarDefaultDelayBeforeFade = opts && 'scrollBarDefaultDelayBeforeFade' in opts ? opts.scrollBarDefaultDelayBeforeFade : null;
    let scrollbarFadingEnabled = opts && 'scrollbarFadingEnabled' in opts ? opts.scrollbarFadingEnabled : true;
    let scrollBarFadeDuration = opts && 'scrollBarFadeDuration' in opts ? opts.scrollBarFadeDuration : null;
    let rendererPriorityPolicy = opts && 'rendererPriorityPolicy' in opts ? opts.rendererPriorityPolicy : null;
    let disableDefaultErrorPage = opts && 'disableDefaultErrorPage' in opts ? opts.disableDefaultErrorPage : null;
    this[textZoom$] = textZoom;
    this[clearSessionCache$] = clearSessionCache;
    this[builtInZoomControls$] = builtInZoomControls;
    this[displayZoomControls$] = displayZoomControls;
    this[databaseEnabled$] = databaseEnabled;
    this[domStorageEnabled$] = domStorageEnabled;
    this[useWideViewPort$] = useWideViewPort;
    this[safeBrowsingEnabled$] = safeBrowsingEnabled;
    this[mixedContentMode$] = mixedContentMode;
    this[allowContentAccess$] = allowContentAccess;
    this[allowFileAccess$] = allowFileAccess;
    this[allowFileAccessFromFileURLs$] = allowFileAccessFromFileURLs;
    this[allowUniversalAccessFromFileURLs$] = allowUniversalAccessFromFileURLs;
    this[appCachePath$] = appCachePath;
    this[blockNetworkImage$] = blockNetworkImage;
    this[blockNetworkLoads$] = blockNetworkLoads;
    this[cacheMode$] = cacheMode;
    this[cursiveFontFamily$] = cursiveFontFamily;
    this[defaultFixedFontSize$] = defaultFixedFontSize;
    this[defaultFontSize$] = defaultFontSize;
    this[defaultTextEncodingName$] = defaultTextEncodingName;
    this[disabledActionModeMenuItems$] = disabledActionModeMenuItems;
    this[fantasyFontFamily$] = fantasyFontFamily;
    this[fixedFontFamily$] = fixedFontFamily;
    this[forceDark$] = forceDark;
    this[geolocationEnabled$] = geolocationEnabled;
    this[layoutAlgorithm$] = layoutAlgorithm;
    this[loadWithOverviewMode$] = loadWithOverviewMode;
    this[loadsImagesAutomatically$] = loadsImagesAutomatically;
    this[minimumLogicalFontSize$] = minimumLogicalFontSize;
    this[needInitialFocus$] = needInitialFocus;
    this[offscreenPreRaster$] = offscreenPreRaster;
    this[sansSerifFontFamily$] = sansSerifFontFamily;
    this[serifFontFamily$] = serifFontFamily;
    this[standardFontFamily$] = standardFontFamily;
    this[saveFormData$] = saveFormData;
    this[thirdPartyCookiesEnabled$] = thirdPartyCookiesEnabled;
    this[hardwareAcceleration$] = hardwareAcceleration;
    this[initialScale$] = initialScale;
    this[supportMultipleWindows$] = supportMultipleWindows;
    this[regexToCancelSubFramesLoading$] = regexToCancelSubFramesLoading;
    this[useShouldInterceptRequest$] = useShouldInterceptRequest;
    this[useOnRenderProcessGone$] = useOnRenderProcessGone;
    this[overScrollMode$] = overScrollMode;
    this[networkAvailable$] = networkAvailable;
    this[scrollBarStyle$] = scrollBarStyle;
    this[verticalScrollbarPosition$] = verticalScrollbarPosition;
    this[scrollBarDefaultDelayBeforeFade$] = scrollBarDefaultDelayBeforeFade;
    this[scrollbarFadingEnabled$] = scrollbarFadingEnabled;
    this[scrollBarFadeDuration$] = scrollBarFadeDuration;
    this[rendererPriorityPolicy$] = rendererPriorityPolicy;
    this[disableDefaultErrorPage$] = disableDefaultErrorPage;
    ;
  }).prototype = webview_options.AndroidInAppWebViewOptions.prototype;
  dart.addTypeTests(webview_options.AndroidInAppWebViewOptions);
  dart.addTypeCaches(webview_options.AndroidInAppWebViewOptions);
  webview_options.AndroidInAppWebViewOptions[dart.implements] = () => [webview_options.WebViewOptions, webview_options.BrowserOptions, webview_options.AndroidOptions];
  dart.setMethodSignature(webview_options.AndroidInAppWebViewOptions, () => ({
    __proto__: dart.getMethods(webview_options.AndroidInAppWebViewOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.AndroidInAppWebViewOptions), [])
  }));
  dart.setLibraryUri(webview_options.AndroidInAppWebViewOptions, I[13]);
  dart.setFieldSignature(webview_options.AndroidInAppWebViewOptions, () => ({
    __proto__: dart.getFields(webview_options.AndroidInAppWebViewOptions.__proto__),
    textZoom: dart.fieldType(dart.legacy(core.int)),
    clearSessionCache: dart.fieldType(dart.legacy(core.bool)),
    builtInZoomControls: dart.fieldType(dart.legacy(core.bool)),
    displayZoomControls: dart.fieldType(dart.legacy(core.bool)),
    databaseEnabled: dart.fieldType(dart.legacy(core.bool)),
    domStorageEnabled: dart.fieldType(dart.legacy(core.bool)),
    useWideViewPort: dart.fieldType(dart.legacy(core.bool)),
    safeBrowsingEnabled: dart.fieldType(dart.legacy(core.bool)),
    mixedContentMode: dart.fieldType(dart.legacy(types.AndroidMixedContentMode)),
    allowContentAccess: dart.fieldType(dart.legacy(core.bool)),
    allowFileAccess: dart.fieldType(dart.legacy(core.bool)),
    allowFileAccessFromFileURLs: dart.fieldType(dart.legacy(core.bool)),
    allowUniversalAccessFromFileURLs: dart.fieldType(dart.legacy(core.bool)),
    appCachePath: dart.fieldType(dart.legacy(core.String)),
    blockNetworkImage: dart.fieldType(dart.legacy(core.bool)),
    blockNetworkLoads: dart.fieldType(dart.legacy(core.bool)),
    cacheMode: dart.fieldType(dart.legacy(types.AndroidCacheMode)),
    cursiveFontFamily: dart.fieldType(dart.legacy(core.String)),
    defaultFixedFontSize: dart.fieldType(dart.legacy(core.int)),
    defaultFontSize: dart.fieldType(dart.legacy(core.int)),
    defaultTextEncodingName: dart.fieldType(dart.legacy(core.String)),
    disabledActionModeMenuItems: dart.fieldType(dart.legacy(types.AndroidActionModeMenuItem)),
    fantasyFontFamily: dart.fieldType(dart.legacy(core.String)),
    fixedFontFamily: dart.fieldType(dart.legacy(core.String)),
    forceDark: dart.fieldType(dart.legacy(types.AndroidForceDark)),
    geolocationEnabled: dart.fieldType(dart.legacy(core.bool)),
    layoutAlgorithm: dart.fieldType(dart.legacy(types.AndroidLayoutAlgorithm)),
    loadWithOverviewMode: dart.fieldType(dart.legacy(core.bool)),
    loadsImagesAutomatically: dart.fieldType(dart.legacy(core.bool)),
    minimumLogicalFontSize: dart.fieldType(dart.legacy(core.int)),
    initialScale: dart.fieldType(dart.legacy(core.int)),
    needInitialFocus: dart.fieldType(dart.legacy(core.bool)),
    offscreenPreRaster: dart.fieldType(dart.legacy(core.bool)),
    sansSerifFontFamily: dart.fieldType(dart.legacy(core.String)),
    serifFontFamily: dart.fieldType(dart.legacy(core.String)),
    standardFontFamily: dart.fieldType(dart.legacy(core.String)),
    saveFormData: dart.fieldType(dart.legacy(core.bool)),
    thirdPartyCookiesEnabled: dart.fieldType(dart.legacy(core.bool)),
    hardwareAcceleration: dart.fieldType(dart.legacy(core.bool)),
    supportMultipleWindows: dart.fieldType(dart.legacy(core.bool)),
    regexToCancelSubFramesLoading: dart.fieldType(dart.legacy(core.String)),
    useShouldInterceptRequest: dart.fieldType(dart.legacy(core.bool)),
    useOnRenderProcessGone: dart.fieldType(dart.legacy(core.bool)),
    overScrollMode: dart.fieldType(dart.legacy(types.AndroidOverScrollMode)),
    networkAvailable: dart.fieldType(dart.legacy(core.bool)),
    scrollBarStyle: dart.fieldType(dart.legacy(types.AndroidScrollBarStyle)),
    verticalScrollbarPosition: dart.fieldType(dart.legacy(types.AndroidVerticalScrollbarPosition)),
    scrollBarDefaultDelayBeforeFade: dart.fieldType(dart.legacy(core.int)),
    scrollbarFadingEnabled: dart.fieldType(dart.legacy(core.bool)),
    scrollBarFadeDuration: dart.fieldType(dart.legacy(core.int)),
    rendererPriorityPolicy: dart.fieldType(dart.legacy(types.RendererPriorityPolicy)),
    disableDefaultErrorPage: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.AndroidInAppWebViewOptions, ['toString']);
  var disallowOverScroll$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.disallowOverScroll");
  var enableViewportScale$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.enableViewportScale");
  var suppressesIncrementalRendering$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.suppressesIncrementalRendering");
  var allowsAirPlayForMediaPlayback$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.allowsAirPlayForMediaPlayback");
  var allowsBackForwardNavigationGestures$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.allowsBackForwardNavigationGestures");
  var allowsLinkPreview$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.allowsLinkPreview");
  var ignoresViewportScaleLimits$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.ignoresViewportScaleLimits");
  var allowsInlineMediaPlayback$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.allowsInlineMediaPlayback");
  var allowsPictureInPictureMediaPlayback$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.allowsPictureInPictureMediaPlayback");
  var isFraudulentWebsiteWarningEnabled$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.isFraudulentWebsiteWarningEnabled");
  var selectionGranularity$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.selectionGranularity");
  var dataDetectorTypes$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.dataDetectorTypes");
  var sharedCookiesEnabled$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.sharedCookiesEnabled");
  var automaticallyAdjustsScrollIndicatorInsets$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.automaticallyAdjustsScrollIndicatorInsets");
  var accessibilityIgnoresInvertColors$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.accessibilityIgnoresInvertColors");
  var decelerationRate$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.decelerationRate");
  var alwaysBounceVertical$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.alwaysBounceVertical");
  var alwaysBounceHorizontal$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.alwaysBounceHorizontal");
  var scrollsToTop$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.scrollsToTop");
  var isPagingEnabled$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.isPagingEnabled");
  var maximumZoomScale$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.maximumZoomScale");
  var minimumZoomScale$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.minimumZoomScale");
  var contentInsetAdjustmentBehavior$ = dart.privateName(webview_options, "IOSInAppWebViewOptions.contentInsetAdjustmentBehavior");
  var IOSWKSelectionGranularity__value = dart.privateName(types, "IOSWKSelectionGranularity._value");
  var IOSWKDataDetectorTypes__value = dart.privateName(types, "IOSWKDataDetectorTypes._value");
  var IOSUIScrollViewDecelerationRate__value = dart.privateName(types, "IOSUIScrollViewDecelerationRate._value");
  var IOSUIScrollViewContentInsetAdjustmentBehavior__value = dart.privateName(types, "IOSUIScrollViewContentInsetAdjustmentBehavior._value");
  webview_options.IOSInAppWebViewOptions = class IOSInAppWebViewOptions extends core.Object {
    get disallowOverScroll() {
      return this[disallowOverScroll$];
    }
    set disallowOverScroll(value) {
      this[disallowOverScroll$] = value;
    }
    get enableViewportScale() {
      return this[enableViewportScale$];
    }
    set enableViewportScale(value) {
      this[enableViewportScale$] = value;
    }
    get suppressesIncrementalRendering() {
      return this[suppressesIncrementalRendering$];
    }
    set suppressesIncrementalRendering(value) {
      this[suppressesIncrementalRendering$] = value;
    }
    get allowsAirPlayForMediaPlayback() {
      return this[allowsAirPlayForMediaPlayback$];
    }
    set allowsAirPlayForMediaPlayback(value) {
      this[allowsAirPlayForMediaPlayback$] = value;
    }
    get allowsBackForwardNavigationGestures() {
      return this[allowsBackForwardNavigationGestures$];
    }
    set allowsBackForwardNavigationGestures(value) {
      this[allowsBackForwardNavigationGestures$] = value;
    }
    get allowsLinkPreview() {
      return this[allowsLinkPreview$];
    }
    set allowsLinkPreview(value) {
      this[allowsLinkPreview$] = value;
    }
    get ignoresViewportScaleLimits() {
      return this[ignoresViewportScaleLimits$];
    }
    set ignoresViewportScaleLimits(value) {
      this[ignoresViewportScaleLimits$] = value;
    }
    get allowsInlineMediaPlayback() {
      return this[allowsInlineMediaPlayback$];
    }
    set allowsInlineMediaPlayback(value) {
      this[allowsInlineMediaPlayback$] = value;
    }
    get allowsPictureInPictureMediaPlayback() {
      return this[allowsPictureInPictureMediaPlayback$];
    }
    set allowsPictureInPictureMediaPlayback(value) {
      this[allowsPictureInPictureMediaPlayback$] = value;
    }
    get isFraudulentWebsiteWarningEnabled() {
      return this[isFraudulentWebsiteWarningEnabled$];
    }
    set isFraudulentWebsiteWarningEnabled(value) {
      this[isFraudulentWebsiteWarningEnabled$] = value;
    }
    get selectionGranularity() {
      return this[selectionGranularity$];
    }
    set selectionGranularity(value) {
      this[selectionGranularity$] = value;
    }
    get dataDetectorTypes() {
      return this[dataDetectorTypes$];
    }
    set dataDetectorTypes(value) {
      this[dataDetectorTypes$] = value;
    }
    get sharedCookiesEnabled() {
      return this[sharedCookiesEnabled$];
    }
    set sharedCookiesEnabled(value) {
      this[sharedCookiesEnabled$] = value;
    }
    get automaticallyAdjustsScrollIndicatorInsets() {
      return this[automaticallyAdjustsScrollIndicatorInsets$];
    }
    set automaticallyAdjustsScrollIndicatorInsets(value) {
      this[automaticallyAdjustsScrollIndicatorInsets$] = value;
    }
    get accessibilityIgnoresInvertColors() {
      return this[accessibilityIgnoresInvertColors$];
    }
    set accessibilityIgnoresInvertColors(value) {
      this[accessibilityIgnoresInvertColors$] = value;
    }
    get decelerationRate() {
      return this[decelerationRate$];
    }
    set decelerationRate(value) {
      this[decelerationRate$] = value;
    }
    get alwaysBounceVertical() {
      return this[alwaysBounceVertical$];
    }
    set alwaysBounceVertical(value) {
      this[alwaysBounceVertical$] = value;
    }
    get alwaysBounceHorizontal() {
      return this[alwaysBounceHorizontal$];
    }
    set alwaysBounceHorizontal(value) {
      this[alwaysBounceHorizontal$] = value;
    }
    get scrollsToTop() {
      return this[scrollsToTop$];
    }
    set scrollsToTop(value) {
      this[scrollsToTop$] = value;
    }
    get isPagingEnabled() {
      return this[isPagingEnabled$];
    }
    set isPagingEnabled(value) {
      this[isPagingEnabled$] = value;
    }
    get maximumZoomScale() {
      return this[maximumZoomScale$];
    }
    set maximumZoomScale(value) {
      this[maximumZoomScale$] = value;
    }
    get minimumZoomScale() {
      return this[minimumZoomScale$];
    }
    set minimumZoomScale(value) {
      this[minimumZoomScale$] = value;
    }
    get contentInsetAdjustmentBehavior() {
      return this[contentInsetAdjustmentBehavior$];
    }
    set contentInsetAdjustmentBehavior(value) {
      this[contentInsetAdjustmentBehavior$] = value;
    }
    toMap() {
      let dataDetectorTypesList = T.JSArrayOfStringL().of([]);
      this.dataDetectorTypes[$forEach](dart.fn(dataDetectorType => {
        dataDetectorTypesList[$add](dataDetectorType.toValue());
      }, T.IOSWKDataDetectorTypesLToNull()));
      return new (T.IdentityMapOfStringL$dynamic()).from(["disallowOverScroll", this.disallowOverScroll, "enableViewportScale", this.enableViewportScale, "suppressesIncrementalRendering", this.suppressesIncrementalRendering, "allowsAirPlayForMediaPlayback", this.allowsAirPlayForMediaPlayback, "allowsBackForwardNavigationGestures", this.allowsBackForwardNavigationGestures, "allowsLinkPreview", this.allowsLinkPreview, "ignoresViewportScaleLimits", this.ignoresViewportScaleLimits, "allowsInlineMediaPlayback", this.allowsInlineMediaPlayback, "allowsPictureInPictureMediaPlayback", this.allowsPictureInPictureMediaPlayback, "isFraudulentWebsiteWarningEnabled", this.isFraudulentWebsiteWarningEnabled, "selectionGranularity", this.selectionGranularity.toValue(), "dataDetectorTypes", dataDetectorTypesList, "sharedCookiesEnabled", this.sharedCookiesEnabled, "automaticallyAdjustsScrollIndicatorInsets", this.automaticallyAdjustsScrollIndicatorInsets, "accessibilityIgnoresInvertColors", this.accessibilityIgnoresInvertColors, "decelerationRate", this.decelerationRate.toValue(), "alwaysBounceVertical", this.alwaysBounceVertical, "alwaysBounceHorizontal", this.alwaysBounceHorizontal, "scrollsToTop", this.scrollsToTop, "isPagingEnabled", this.isPagingEnabled, "maximumZoomScale", this.maximumZoomScale, "minimumZoomScale", this.minimumZoomScale, "contentInsetAdjustmentBehavior", this.contentInsetAdjustmentBehavior.toValue()]);
    }
    static fromMap(map) {
      let t3;
      let dataDetectorTypes = T.JSArrayOfIOSWKDataDetectorTypesL().of([]);
      let dataDetectorTypesList = T.ListOfStringL().from(core.Iterable.as((t3 = map[$_get]("dataDetectorTypes"), t3 == null ? [] : t3)));
      dataDetectorTypesList[$forEach](dart.fn(dataDetectorType => {
        dataDetectorTypes[$add](types.IOSWKDataDetectorTypes.fromValue(dataDetectorType));
      }, T.StringLToNull()));
      let options = new webview_options.IOSInAppWebViewOptions.new();
      options.disallowOverScroll = T.boolL().as(map[$_get]("disallowOverScroll"));
      options.enableViewportScale = T.boolL().as(map[$_get]("enableViewportScale"));
      options.suppressesIncrementalRendering = T.boolL().as(map[$_get]("suppressesIncrementalRendering"));
      options.allowsAirPlayForMediaPlayback = T.boolL().as(map[$_get]("allowsAirPlayForMediaPlayback"));
      options.allowsBackForwardNavigationGestures = T.boolL().as(map[$_get]("allowsBackForwardNavigationGestures"));
      options.allowsLinkPreview = T.boolL().as(map[$_get]("allowsLinkPreview"));
      options.ignoresViewportScaleLimits = T.boolL().as(map[$_get]("ignoresViewportScaleLimits"));
      options.allowsInlineMediaPlayback = T.boolL().as(map[$_get]("allowsInlineMediaPlayback"));
      options.allowsPictureInPictureMediaPlayback = T.boolL().as(map[$_get]("allowsPictureInPictureMediaPlayback"));
      options.isFraudulentWebsiteWarningEnabled = T.boolL().as(map[$_get]("isFraudulentWebsiteWarningEnabled"));
      options.selectionGranularity = types.IOSWKSelectionGranularity.fromValue(T.intL().as(map[$_get]("selectionGranularity")));
      options.dataDetectorTypes = dataDetectorTypes;
      options.sharedCookiesEnabled = T.boolL().as(map[$_get]("sharedCookiesEnabled"));
      options.automaticallyAdjustsScrollIndicatorInsets = T.boolL().as(map[$_get]("automaticallyAdjustsScrollIndicatorInsets"));
      options.accessibilityIgnoresInvertColors = T.boolL().as(map[$_get]("accessibilityIgnoresInvertColors"));
      options.decelerationRate = types.IOSUIScrollViewDecelerationRate.fromValue(T.StringL().as(map[$_get]("decelerationRate")));
      options.alwaysBounceVertical = T.boolL().as(map[$_get]("alwaysBounceVertical"));
      options.alwaysBounceHorizontal = T.boolL().as(map[$_get]("alwaysBounceHorizontal"));
      options.scrollsToTop = T.boolL().as(map[$_get]("scrollsToTop"));
      options.isPagingEnabled = T.boolL().as(map[$_get]("isPagingEnabled"));
      options.maximumZoomScale = T.doubleL().as(map[$_get]("maximumZoomScale"));
      options.minimumZoomScale = T.doubleL().as(map[$_get]("minimumZoomScale"));
      options.contentInsetAdjustmentBehavior = types.IOSUIScrollViewContentInsetAdjustmentBehavior.fromValue(T.intL().as(map[$_get]("contentInsetAdjustmentBehavior")));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.IOSInAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (webview_options.IOSInAppWebViewOptions.new = function(opts) {
    let disallowOverScroll = opts && 'disallowOverScroll' in opts ? opts.disallowOverScroll : false;
    let enableViewportScale = opts && 'enableViewportScale' in opts ? opts.enableViewportScale : false;
    let suppressesIncrementalRendering = opts && 'suppressesIncrementalRendering' in opts ? opts.suppressesIncrementalRendering : false;
    let allowsAirPlayForMediaPlayback = opts && 'allowsAirPlayForMediaPlayback' in opts ? opts.allowsAirPlayForMediaPlayback : true;
    let allowsBackForwardNavigationGestures = opts && 'allowsBackForwardNavigationGestures' in opts ? opts.allowsBackForwardNavigationGestures : true;
    let allowsLinkPreview = opts && 'allowsLinkPreview' in opts ? opts.allowsLinkPreview : true;
    let ignoresViewportScaleLimits = opts && 'ignoresViewportScaleLimits' in opts ? opts.ignoresViewportScaleLimits : false;
    let allowsInlineMediaPlayback = opts && 'allowsInlineMediaPlayback' in opts ? opts.allowsInlineMediaPlayback : false;
    let allowsPictureInPictureMediaPlayback = opts && 'allowsPictureInPictureMediaPlayback' in opts ? opts.allowsPictureInPictureMediaPlayback : true;
    let isFraudulentWebsiteWarningEnabled = opts && 'isFraudulentWebsiteWarningEnabled' in opts ? opts.isFraudulentWebsiteWarningEnabled : true;
    let selectionGranularity = opts && 'selectionGranularity' in opts ? opts.selectionGranularity : C[39] || CT.C39;
    let dataDetectorTypes = opts && 'dataDetectorTypes' in opts ? opts.dataDetectorTypes : C[40] || CT.C40;
    let sharedCookiesEnabled = opts && 'sharedCookiesEnabled' in opts ? opts.sharedCookiesEnabled : false;
    let automaticallyAdjustsScrollIndicatorInsets = opts && 'automaticallyAdjustsScrollIndicatorInsets' in opts ? opts.automaticallyAdjustsScrollIndicatorInsets : false;
    let accessibilityIgnoresInvertColors = opts && 'accessibilityIgnoresInvertColors' in opts ? opts.accessibilityIgnoresInvertColors : false;
    let decelerationRate = opts && 'decelerationRate' in opts ? opts.decelerationRate : C[42] || CT.C42;
    let alwaysBounceVertical = opts && 'alwaysBounceVertical' in opts ? opts.alwaysBounceVertical : false;
    let alwaysBounceHorizontal = opts && 'alwaysBounceHorizontal' in opts ? opts.alwaysBounceHorizontal : false;
    let scrollsToTop = opts && 'scrollsToTop' in opts ? opts.scrollsToTop : true;
    let isPagingEnabled = opts && 'isPagingEnabled' in opts ? opts.isPagingEnabled : false;
    let maximumZoomScale = opts && 'maximumZoomScale' in opts ? opts.maximumZoomScale : 1;
    let minimumZoomScale = opts && 'minimumZoomScale' in opts ? opts.minimumZoomScale : 1;
    let contentInsetAdjustmentBehavior = opts && 'contentInsetAdjustmentBehavior' in opts ? opts.contentInsetAdjustmentBehavior : C[43] || CT.C43;
    this[disallowOverScroll$] = disallowOverScroll;
    this[enableViewportScale$] = enableViewportScale;
    this[suppressesIncrementalRendering$] = suppressesIncrementalRendering;
    this[allowsAirPlayForMediaPlayback$] = allowsAirPlayForMediaPlayback;
    this[allowsBackForwardNavigationGestures$] = allowsBackForwardNavigationGestures;
    this[allowsLinkPreview$] = allowsLinkPreview;
    this[ignoresViewportScaleLimits$] = ignoresViewportScaleLimits;
    this[allowsInlineMediaPlayback$] = allowsInlineMediaPlayback;
    this[allowsPictureInPictureMediaPlayback$] = allowsPictureInPictureMediaPlayback;
    this[isFraudulentWebsiteWarningEnabled$] = isFraudulentWebsiteWarningEnabled;
    this[selectionGranularity$] = selectionGranularity;
    this[dataDetectorTypes$] = dataDetectorTypes;
    this[sharedCookiesEnabled$] = sharedCookiesEnabled;
    this[automaticallyAdjustsScrollIndicatorInsets$] = automaticallyAdjustsScrollIndicatorInsets;
    this[accessibilityIgnoresInvertColors$] = accessibilityIgnoresInvertColors;
    this[decelerationRate$] = decelerationRate;
    this[alwaysBounceVertical$] = alwaysBounceVertical;
    this[alwaysBounceHorizontal$] = alwaysBounceHorizontal;
    this[scrollsToTop$] = scrollsToTop;
    this[isPagingEnabled$] = isPagingEnabled;
    this[maximumZoomScale$] = maximumZoomScale;
    this[minimumZoomScale$] = minimumZoomScale;
    this[contentInsetAdjustmentBehavior$] = contentInsetAdjustmentBehavior;
    ;
  }).prototype = webview_options.IOSInAppWebViewOptions.prototype;
  dart.addTypeTests(webview_options.IOSInAppWebViewOptions);
  dart.addTypeCaches(webview_options.IOSInAppWebViewOptions);
  webview_options.IOSInAppWebViewOptions[dart.implements] = () => [webview_options.WebViewOptions, webview_options.BrowserOptions, webview_options.IosOptions];
  dart.setMethodSignature(webview_options.IOSInAppWebViewOptions, () => ({
    __proto__: dart.getMethods(webview_options.IOSInAppWebViewOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.IOSInAppWebViewOptions), [])
  }));
  dart.setLibraryUri(webview_options.IOSInAppWebViewOptions, I[13]);
  dart.setFieldSignature(webview_options.IOSInAppWebViewOptions, () => ({
    __proto__: dart.getFields(webview_options.IOSInAppWebViewOptions.__proto__),
    disallowOverScroll: dart.fieldType(dart.legacy(core.bool)),
    enableViewportScale: dart.fieldType(dart.legacy(core.bool)),
    suppressesIncrementalRendering: dart.fieldType(dart.legacy(core.bool)),
    allowsAirPlayForMediaPlayback: dart.fieldType(dart.legacy(core.bool)),
    allowsBackForwardNavigationGestures: dart.fieldType(dart.legacy(core.bool)),
    allowsLinkPreview: dart.fieldType(dart.legacy(core.bool)),
    ignoresViewportScaleLimits: dart.fieldType(dart.legacy(core.bool)),
    allowsInlineMediaPlayback: dart.fieldType(dart.legacy(core.bool)),
    allowsPictureInPictureMediaPlayback: dart.fieldType(dart.legacy(core.bool)),
    isFraudulentWebsiteWarningEnabled: dart.fieldType(dart.legacy(core.bool)),
    selectionGranularity: dart.fieldType(dart.legacy(types.IOSWKSelectionGranularity)),
    dataDetectorTypes: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.IOSWKDataDetectorTypes)))),
    sharedCookiesEnabled: dart.fieldType(dart.legacy(core.bool)),
    automaticallyAdjustsScrollIndicatorInsets: dart.fieldType(dart.legacy(core.bool)),
    accessibilityIgnoresInvertColors: dart.fieldType(dart.legacy(core.bool)),
    decelerationRate: dart.fieldType(dart.legacy(types.IOSUIScrollViewDecelerationRate)),
    alwaysBounceVertical: dart.fieldType(dart.legacy(core.bool)),
    alwaysBounceHorizontal: dart.fieldType(dart.legacy(core.bool)),
    scrollsToTop: dart.fieldType(dart.legacy(core.bool)),
    isPagingEnabled: dart.fieldType(dart.legacy(core.bool)),
    maximumZoomScale: dart.fieldType(dart.legacy(core.double)),
    minimumZoomScale: dart.fieldType(dart.legacy(core.double)),
    contentInsetAdjustmentBehavior: dart.fieldType(dart.legacy(types.IOSUIScrollViewContentInsetAdjustmentBehavior))
  }));
  dart.defineExtensionMethods(webview_options.IOSInAppWebViewOptions, ['toString']);
  var hidden$ = dart.privateName(webview_options, "InAppBrowserOptions.hidden");
  var toolbarTop$ = dart.privateName(webview_options, "InAppBrowserOptions.toolbarTop");
  var toolbarTopBackgroundColor$ = dart.privateName(webview_options, "InAppBrowserOptions.toolbarTopBackgroundColor");
  var hideUrlBar$ = dart.privateName(webview_options, "InAppBrowserOptions.hideUrlBar");
  webview_options.InAppBrowserOptions = class InAppBrowserOptions extends core.Object {
    get hidden() {
      return this[hidden$];
    }
    set hidden(value) {
      this[hidden$] = value;
    }
    get toolbarTop() {
      return this[toolbarTop$];
    }
    set toolbarTop(value) {
      this[toolbarTop$] = value;
    }
    get toolbarTopBackgroundColor() {
      return this[toolbarTopBackgroundColor$];
    }
    set toolbarTopBackgroundColor(value) {
      this[toolbarTopBackgroundColor$] = value;
    }
    get hideUrlBar() {
      return this[hideUrlBar$];
    }
    set hideUrlBar(value) {
      this[hideUrlBar$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["hidden", this.hidden, "toolbarTop", this.toolbarTop, "toolbarTopBackgroundColor", this.toolbarTopBackgroundColor, "hideUrlBar", this.hideUrlBar]);
    }
    static fromMap(map) {
      let options = new webview_options.InAppBrowserOptions.new();
      options.hidden = T.boolL().as(map[$_get]("hidden"));
      options.toolbarTop = T.boolL().as(map[$_get]("toolbarTop"));
      options.toolbarTopBackgroundColor = T.StringL().as(map[$_get]("toolbarTopBackgroundColor"));
      options.hideUrlBar = T.boolL().as(map[$_get]("hideUrlBar"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.InAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (webview_options.InAppBrowserOptions.new = function(opts) {
    let hidden = opts && 'hidden' in opts ? opts.hidden : false;
    let toolbarTop = opts && 'toolbarTop' in opts ? opts.toolbarTop : true;
    let toolbarTopBackgroundColor = opts && 'toolbarTopBackgroundColor' in opts ? opts.toolbarTopBackgroundColor : "";
    let hideUrlBar = opts && 'hideUrlBar' in opts ? opts.hideUrlBar : false;
    this[hidden$] = hidden;
    this[toolbarTop$] = toolbarTop;
    this[toolbarTopBackgroundColor$] = toolbarTopBackgroundColor;
    this[hideUrlBar$] = hideUrlBar;
    ;
  }).prototype = webview_options.InAppBrowserOptions.prototype;
  dart.addTypeTests(webview_options.InAppBrowserOptions);
  dart.addTypeCaches(webview_options.InAppBrowserOptions);
  webview_options.InAppBrowserOptions[dart.implements] = () => [webview_options.BrowserOptions, webview_options.AndroidOptions, webview_options.IosOptions];
  dart.setMethodSignature(webview_options.InAppBrowserOptions, () => ({
    __proto__: dart.getMethods(webview_options.InAppBrowserOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.InAppBrowserOptions), [])
  }));
  dart.setLibraryUri(webview_options.InAppBrowserOptions, I[13]);
  dart.setFieldSignature(webview_options.InAppBrowserOptions, () => ({
    __proto__: dart.getFields(webview_options.InAppBrowserOptions.__proto__),
    hidden: dart.fieldType(dart.legacy(core.bool)),
    toolbarTop: dart.fieldType(dart.legacy(core.bool)),
    toolbarTopBackgroundColor: dart.fieldType(dart.legacy(core.String)),
    hideUrlBar: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.InAppBrowserOptions, ['toString']);
  var hideTitleBar$ = dart.privateName(webview_options, "AndroidInAppBrowserOptions.hideTitleBar");
  var toolbarTopFixedTitle$ = dart.privateName(webview_options, "AndroidInAppBrowserOptions.toolbarTopFixedTitle");
  var closeOnCannotGoBack$ = dart.privateName(webview_options, "AndroidInAppBrowserOptions.closeOnCannotGoBack");
  var progressBar$ = dart.privateName(webview_options, "AndroidInAppBrowserOptions.progressBar");
  webview_options.AndroidInAppBrowserOptions = class AndroidInAppBrowserOptions extends core.Object {
    get hideTitleBar() {
      return this[hideTitleBar$];
    }
    set hideTitleBar(value) {
      this[hideTitleBar$] = value;
    }
    get toolbarTopFixedTitle() {
      return this[toolbarTopFixedTitle$];
    }
    set toolbarTopFixedTitle(value) {
      this[toolbarTopFixedTitle$] = value;
    }
    get closeOnCannotGoBack() {
      return this[closeOnCannotGoBack$];
    }
    set closeOnCannotGoBack(value) {
      this[closeOnCannotGoBack$] = value;
    }
    get progressBar() {
      return this[progressBar$];
    }
    set progressBar(value) {
      this[progressBar$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["hideTitleBar", this.hideTitleBar, "toolbarTopFixedTitle", this.toolbarTopFixedTitle, "closeOnCannotGoBack", this.closeOnCannotGoBack, "progressBar", this.progressBar]);
    }
    static fromMap(map) {
      let options = new webview_options.AndroidInAppBrowserOptions.new();
      options.hideTitleBar = T.boolL().as(map[$_get]("hideTitleBar"));
      options.toolbarTopFixedTitle = T.StringL().as(map[$_get]("toolbarTopFixedTitle"));
      options.closeOnCannotGoBack = T.boolL().as(map[$_get]("closeOnCannotGoBack"));
      options.progressBar = T.boolL().as(map[$_get]("progressBar"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.AndroidInAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (webview_options.AndroidInAppBrowserOptions.new = function(opts) {
    let hideTitleBar = opts && 'hideTitleBar' in opts ? opts.hideTitleBar : true;
    let toolbarTopFixedTitle = opts && 'toolbarTopFixedTitle' in opts ? opts.toolbarTopFixedTitle : "";
    let closeOnCannotGoBack = opts && 'closeOnCannotGoBack' in opts ? opts.closeOnCannotGoBack : true;
    let progressBar = opts && 'progressBar' in opts ? opts.progressBar : true;
    this[hideTitleBar$] = hideTitleBar;
    this[toolbarTopFixedTitle$] = toolbarTopFixedTitle;
    this[closeOnCannotGoBack$] = closeOnCannotGoBack;
    this[progressBar$] = progressBar;
    ;
  }).prototype = webview_options.AndroidInAppBrowserOptions.prototype;
  dart.addTypeTests(webview_options.AndroidInAppBrowserOptions);
  dart.addTypeCaches(webview_options.AndroidInAppBrowserOptions);
  webview_options.AndroidInAppBrowserOptions[dart.implements] = () => [webview_options.BrowserOptions, webview_options.AndroidOptions];
  dart.setMethodSignature(webview_options.AndroidInAppBrowserOptions, () => ({
    __proto__: dart.getMethods(webview_options.AndroidInAppBrowserOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.AndroidInAppBrowserOptions), [])
  }));
  dart.setLibraryUri(webview_options.AndroidInAppBrowserOptions, I[13]);
  dart.setFieldSignature(webview_options.AndroidInAppBrowserOptions, () => ({
    __proto__: dart.getFields(webview_options.AndroidInAppBrowserOptions.__proto__),
    hideTitleBar: dart.fieldType(dart.legacy(core.bool)),
    toolbarTopFixedTitle: dart.fieldType(dart.legacy(core.String)),
    closeOnCannotGoBack: dart.fieldType(dart.legacy(core.bool)),
    progressBar: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.AndroidInAppBrowserOptions, ['toString']);
  var toolbarBottom$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.toolbarBottom");
  var toolbarBottomBackgroundColor$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.toolbarBottomBackgroundColor");
  var toolbarBottomTranslucent$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.toolbarBottomTranslucent");
  var closeButtonCaption$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.closeButtonCaption");
  var closeButtonColor$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.closeButtonColor");
  var presentationStyle$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.presentationStyle");
  var transitionStyle$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.transitionStyle");
  var spinner$ = dart.privateName(webview_options, "IOSInAppBrowserOptions.spinner");
  var IOSUIModalPresentationStyle__value = dart.privateName(types, "IOSUIModalPresentationStyle._value");
  var IOSUIModalTransitionStyle__value = dart.privateName(types, "IOSUIModalTransitionStyle._value");
  webview_options.IOSInAppBrowserOptions = class IOSInAppBrowserOptions extends core.Object {
    get toolbarBottom() {
      return this[toolbarBottom$];
    }
    set toolbarBottom(value) {
      this[toolbarBottom$] = value;
    }
    get toolbarBottomBackgroundColor() {
      return this[toolbarBottomBackgroundColor$];
    }
    set toolbarBottomBackgroundColor(value) {
      this[toolbarBottomBackgroundColor$] = value;
    }
    get toolbarBottomTranslucent() {
      return this[toolbarBottomTranslucent$];
    }
    set toolbarBottomTranslucent(value) {
      this[toolbarBottomTranslucent$] = value;
    }
    get closeButtonCaption() {
      return this[closeButtonCaption$];
    }
    set closeButtonCaption(value) {
      this[closeButtonCaption$] = value;
    }
    get closeButtonColor() {
      return this[closeButtonColor$];
    }
    set closeButtonColor(value) {
      this[closeButtonColor$] = value;
    }
    get presentationStyle() {
      return this[presentationStyle$];
    }
    set presentationStyle(value) {
      this[presentationStyle$] = value;
    }
    get transitionStyle() {
      return this[transitionStyle$];
    }
    set transitionStyle(value) {
      this[transitionStyle$] = value;
    }
    get spinner() {
      return this[spinner$];
    }
    set spinner(value) {
      this[spinner$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["toolbarBottom", this.toolbarBottom, "toolbarBottomBackgroundColor", this.toolbarBottomBackgroundColor, "toolbarBottomTranslucent", this.toolbarBottomTranslucent, "closeButtonCaption", this.closeButtonCaption, "closeButtonColor", this.closeButtonColor, "presentationStyle", this.presentationStyle.toValue(), "transitionStyle", this.transitionStyle.toValue(), "spinner", this.spinner]);
    }
    static fromMap(map) {
      let options = new webview_options.IOSInAppBrowserOptions.new();
      options.toolbarBottom = T.boolL().as(map[$_get]("toolbarBottom"));
      options.toolbarBottomBackgroundColor = T.StringL().as(map[$_get]("toolbarBottomBackgroundColor"));
      options.toolbarBottomTranslucent = T.boolL().as(map[$_get]("toolbarBottomTranslucent"));
      options.closeButtonCaption = T.StringL().as(map[$_get]("closeButtonCaption"));
      options.closeButtonColor = T.StringL().as(map[$_get]("closeButtonColor"));
      options.presentationStyle = types.IOSUIModalPresentationStyle.fromValue(T.intL().as(map[$_get]("presentationStyle")));
      options.transitionStyle = types.IOSUIModalTransitionStyle.fromValue(T.intL().as(map[$_get]("transitionStyle")));
      options.spinner = T.boolL().as(map[$_get]("spinner"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.IOSInAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (webview_options.IOSInAppBrowserOptions.new = function(opts) {
    let toolbarBottom = opts && 'toolbarBottom' in opts ? opts.toolbarBottom : true;
    let toolbarBottomBackgroundColor = opts && 'toolbarBottomBackgroundColor' in opts ? opts.toolbarBottomBackgroundColor : "";
    let toolbarBottomTranslucent = opts && 'toolbarBottomTranslucent' in opts ? opts.toolbarBottomTranslucent : true;
    let closeButtonCaption = opts && 'closeButtonCaption' in opts ? opts.closeButtonCaption : "";
    let closeButtonColor = opts && 'closeButtonColor' in opts ? opts.closeButtonColor : "";
    let presentationStyle = opts && 'presentationStyle' in opts ? opts.presentationStyle : C[44] || CT.C44;
    let transitionStyle = opts && 'transitionStyle' in opts ? opts.transitionStyle : C[45] || CT.C45;
    let spinner = opts && 'spinner' in opts ? opts.spinner : true;
    this[toolbarBottom$] = toolbarBottom;
    this[toolbarBottomBackgroundColor$] = toolbarBottomBackgroundColor;
    this[toolbarBottomTranslucent$] = toolbarBottomTranslucent;
    this[closeButtonCaption$] = closeButtonCaption;
    this[closeButtonColor$] = closeButtonColor;
    this[presentationStyle$] = presentationStyle;
    this[transitionStyle$] = transitionStyle;
    this[spinner$] = spinner;
    ;
  }).prototype = webview_options.IOSInAppBrowserOptions.prototype;
  dart.addTypeTests(webview_options.IOSInAppBrowserOptions);
  dart.addTypeCaches(webview_options.IOSInAppBrowserOptions);
  webview_options.IOSInAppBrowserOptions[dart.implements] = () => [webview_options.BrowserOptions, webview_options.IosOptions];
  dart.setMethodSignature(webview_options.IOSInAppBrowserOptions, () => ({
    __proto__: dart.getMethods(webview_options.IOSInAppBrowserOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.IOSInAppBrowserOptions), [])
  }));
  dart.setLibraryUri(webview_options.IOSInAppBrowserOptions, I[13]);
  dart.setFieldSignature(webview_options.IOSInAppBrowserOptions, () => ({
    __proto__: dart.getFields(webview_options.IOSInAppBrowserOptions.__proto__),
    toolbarBottom: dart.fieldType(dart.legacy(core.bool)),
    toolbarBottomBackgroundColor: dart.fieldType(dart.legacy(core.String)),
    toolbarBottomTranslucent: dart.fieldType(dart.legacy(core.bool)),
    closeButtonCaption: dart.fieldType(dart.legacy(core.String)),
    closeButtonColor: dart.fieldType(dart.legacy(core.String)),
    presentationStyle: dart.fieldType(dart.legacy(types.IOSUIModalPresentationStyle)),
    transitionStyle: dart.fieldType(dart.legacy(types.IOSUIModalTransitionStyle)),
    spinner: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.IOSInAppBrowserOptions, ['toString']);
  var addDefaultShareMenuItem$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.addDefaultShareMenuItem");
  var showTitle$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.showTitle");
  var toolbarBackgroundColor$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.toolbarBackgroundColor");
  var enableUrlBarHiding$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.enableUrlBarHiding");
  var instantAppsEnabled$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.instantAppsEnabled");
  var packageName$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.packageName");
  var keepAliveEnabled$ = dart.privateName(webview_options, "AndroidChromeCustomTabsOptions.keepAliveEnabled");
  webview_options.AndroidChromeCustomTabsOptions = class AndroidChromeCustomTabsOptions extends core.Object {
    get addDefaultShareMenuItem() {
      return this[addDefaultShareMenuItem$];
    }
    set addDefaultShareMenuItem(value) {
      this[addDefaultShareMenuItem$] = value;
    }
    get showTitle() {
      return this[showTitle$];
    }
    set showTitle(value) {
      this[showTitle$] = value;
    }
    get toolbarBackgroundColor() {
      return this[toolbarBackgroundColor$];
    }
    set toolbarBackgroundColor(value) {
      this[toolbarBackgroundColor$] = value;
    }
    get enableUrlBarHiding() {
      return this[enableUrlBarHiding$];
    }
    set enableUrlBarHiding(value) {
      this[enableUrlBarHiding$] = value;
    }
    get instantAppsEnabled() {
      return this[instantAppsEnabled$];
    }
    set instantAppsEnabled(value) {
      this[instantAppsEnabled$] = value;
    }
    get packageName() {
      return this[packageName$];
    }
    set packageName(value) {
      this[packageName$] = value;
    }
    get keepAliveEnabled() {
      return this[keepAliveEnabled$];
    }
    set keepAliveEnabled(value) {
      this[keepAliveEnabled$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["addDefaultShareMenuItem", this.addDefaultShareMenuItem, "showTitle", this.showTitle, "toolbarBackgroundColor", this.toolbarBackgroundColor, "enableUrlBarHiding", this.enableUrlBarHiding, "instantAppsEnabled", this.instantAppsEnabled, "packageName", this.packageName, "keepAliveEnabled", this.keepAliveEnabled]);
    }
    static fromMap(map) {
      let options = new webview_options.AndroidChromeCustomTabsOptions.new();
      options.addDefaultShareMenuItem = T.boolL().as(map[$_get]("addDefaultShareMenuItem"));
      options.showTitle = T.boolL().as(map[$_get]("showTitle"));
      options.toolbarBackgroundColor = T.StringL().as(map[$_get]("toolbarBackgroundColor"));
      options.enableUrlBarHiding = T.boolL().as(map[$_get]("enableUrlBarHiding"));
      options.instantAppsEnabled = T.boolL().as(map[$_get]("instantAppsEnabled"));
      options.packageName = T.StringL().as(map[$_get]("packageName"));
      options.keepAliveEnabled = T.boolL().as(map[$_get]("keepAliveEnabled"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.AndroidChromeCustomTabsOptions.fromMap(this.toMap());
    }
  };
  (webview_options.AndroidChromeCustomTabsOptions.new = function(opts) {
    let addDefaultShareMenuItem = opts && 'addDefaultShareMenuItem' in opts ? opts.addDefaultShareMenuItem : true;
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : true;
    let toolbarBackgroundColor = opts && 'toolbarBackgroundColor' in opts ? opts.toolbarBackgroundColor : "";
    let enableUrlBarHiding = opts && 'enableUrlBarHiding' in opts ? opts.enableUrlBarHiding : false;
    let instantAppsEnabled = opts && 'instantAppsEnabled' in opts ? opts.instantAppsEnabled : false;
    let packageName = opts && 'packageName' in opts ? opts.packageName : null;
    let keepAliveEnabled = opts && 'keepAliveEnabled' in opts ? opts.keepAliveEnabled : false;
    this[addDefaultShareMenuItem$] = addDefaultShareMenuItem;
    this[showTitle$] = showTitle;
    this[toolbarBackgroundColor$] = toolbarBackgroundColor;
    this[enableUrlBarHiding$] = enableUrlBarHiding;
    this[instantAppsEnabled$] = instantAppsEnabled;
    this[packageName$] = packageName;
    this[keepAliveEnabled$] = keepAliveEnabled;
    ;
  }).prototype = webview_options.AndroidChromeCustomTabsOptions.prototype;
  dart.addTypeTests(webview_options.AndroidChromeCustomTabsOptions);
  dart.addTypeCaches(webview_options.AndroidChromeCustomTabsOptions);
  webview_options.AndroidChromeCustomTabsOptions[dart.implements] = () => [webview_options.ChromeSafariBrowserOptions, webview_options.AndroidOptions];
  dart.setMethodSignature(webview_options.AndroidChromeCustomTabsOptions, () => ({
    __proto__: dart.getMethods(webview_options.AndroidChromeCustomTabsOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.AndroidChromeCustomTabsOptions), [])
  }));
  dart.setLibraryUri(webview_options.AndroidChromeCustomTabsOptions, I[13]);
  dart.setFieldSignature(webview_options.AndroidChromeCustomTabsOptions, () => ({
    __proto__: dart.getFields(webview_options.AndroidChromeCustomTabsOptions.__proto__),
    addDefaultShareMenuItem: dart.fieldType(dart.legacy(core.bool)),
    showTitle: dart.fieldType(dart.legacy(core.bool)),
    toolbarBackgroundColor: dart.fieldType(dart.legacy(core.String)),
    enableUrlBarHiding: dart.fieldType(dart.legacy(core.bool)),
    instantAppsEnabled: dart.fieldType(dart.legacy(core.bool)),
    packageName: dart.fieldType(dart.legacy(core.String)),
    keepAliveEnabled: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(webview_options.AndroidChromeCustomTabsOptions, ['toString']);
  var entersReaderIfAvailable$ = dart.privateName(webview_options, "IOSSafariOptions.entersReaderIfAvailable");
  var barCollapsingEnabled$ = dart.privateName(webview_options, "IOSSafariOptions.barCollapsingEnabled");
  var dismissButtonStyle$ = dart.privateName(webview_options, "IOSSafariOptions.dismissButtonStyle");
  var preferredBarTintColor$ = dart.privateName(webview_options, "IOSSafariOptions.preferredBarTintColor");
  var preferredControlTintColor$ = dart.privateName(webview_options, "IOSSafariOptions.preferredControlTintColor");
  var presentationStyle$0 = dart.privateName(webview_options, "IOSSafariOptions.presentationStyle");
  var transitionStyle$0 = dart.privateName(webview_options, "IOSSafariOptions.transitionStyle");
  var IOSSafariDismissButtonStyle__value = dart.privateName(types, "IOSSafariDismissButtonStyle._value");
  webview_options.IOSSafariOptions = class IOSSafariOptions extends core.Object {
    get entersReaderIfAvailable() {
      return this[entersReaderIfAvailable$];
    }
    set entersReaderIfAvailable(value) {
      this[entersReaderIfAvailable$] = value;
    }
    get barCollapsingEnabled() {
      return this[barCollapsingEnabled$];
    }
    set barCollapsingEnabled(value) {
      this[barCollapsingEnabled$] = value;
    }
    get dismissButtonStyle() {
      return this[dismissButtonStyle$];
    }
    set dismissButtonStyle(value) {
      this[dismissButtonStyle$] = value;
    }
    get preferredBarTintColor() {
      return this[preferredBarTintColor$];
    }
    set preferredBarTintColor(value) {
      this[preferredBarTintColor$] = value;
    }
    get preferredControlTintColor() {
      return this[preferredControlTintColor$];
    }
    set preferredControlTintColor(value) {
      this[preferredControlTintColor$] = value;
    }
    get presentationStyle() {
      return this[presentationStyle$0];
    }
    set presentationStyle(value) {
      this[presentationStyle$0] = value;
    }
    get transitionStyle() {
      return this[transitionStyle$0];
    }
    set transitionStyle(value) {
      this[transitionStyle$0] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["entersReaderIfAvailable", this.entersReaderIfAvailable, "barCollapsingEnabled", this.barCollapsingEnabled, "dismissButtonStyle", this.dismissButtonStyle.toValue(), "preferredBarTintColor", this.preferredBarTintColor, "preferredControlTintColor", this.preferredControlTintColor, "presentationStyle", this.presentationStyle.toValue(), "transitionStyle", this.transitionStyle.toValue()]);
    }
    static fromMap(map) {
      let options = new webview_options.IOSSafariOptions.new();
      options.entersReaderIfAvailable = T.boolL().as(map[$_get]("entersReaderIfAvailable"));
      options.barCollapsingEnabled = T.boolL().as(map[$_get]("barCollapsingEnabled"));
      options.dismissButtonStyle = types.IOSSafariDismissButtonStyle.fromValue(T.intL().as(map[$_get]("dismissButtonStyle")));
      options.preferredBarTintColor = T.StringL().as(map[$_get]("preferredBarTintColor"));
      options.preferredControlTintColor = T.StringL().as(map[$_get]("preferredControlTintColor"));
      options.presentationStyle = types.IOSUIModalPresentationStyle.fromValue(T.intL().as(map[$_get]("presentationStyle")));
      options.transitionStyle = types.IOSUIModalTransitionStyle.fromValue(T.intL().as(map[$_get]("transitionStyle")));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return webview_options.IOSSafariOptions.fromMap(this.toMap());
    }
  };
  (webview_options.IOSSafariOptions.new = function(opts) {
    let entersReaderIfAvailable = opts && 'entersReaderIfAvailable' in opts ? opts.entersReaderIfAvailable : false;
    let barCollapsingEnabled = opts && 'barCollapsingEnabled' in opts ? opts.barCollapsingEnabled : false;
    let dismissButtonStyle = opts && 'dismissButtonStyle' in opts ? opts.dismissButtonStyle : C[46] || CT.C46;
    let preferredBarTintColor = opts && 'preferredBarTintColor' in opts ? opts.preferredBarTintColor : "";
    let preferredControlTintColor = opts && 'preferredControlTintColor' in opts ? opts.preferredControlTintColor : "";
    let presentationStyle = opts && 'presentationStyle' in opts ? opts.presentationStyle : C[44] || CT.C44;
    let transitionStyle = opts && 'transitionStyle' in opts ? opts.transitionStyle : C[45] || CT.C45;
    this[entersReaderIfAvailable$] = entersReaderIfAvailable;
    this[barCollapsingEnabled$] = barCollapsingEnabled;
    this[dismissButtonStyle$] = dismissButtonStyle;
    this[preferredBarTintColor$] = preferredBarTintColor;
    this[preferredControlTintColor$] = preferredControlTintColor;
    this[presentationStyle$0] = presentationStyle;
    this[transitionStyle$0] = transitionStyle;
    ;
  }).prototype = webview_options.IOSSafariOptions.prototype;
  dart.addTypeTests(webview_options.IOSSafariOptions);
  dart.addTypeCaches(webview_options.IOSSafariOptions);
  webview_options.IOSSafariOptions[dart.implements] = () => [webview_options.ChromeSafariBrowserOptions, webview_options.IosOptions];
  dart.setMethodSignature(webview_options.IOSSafariOptions, () => ({
    __proto__: dart.getMethods(webview_options.IOSSafariOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(webview_options.IOSSafariOptions), [])
  }));
  dart.setLibraryUri(webview_options.IOSSafariOptions, I[13]);
  dart.setFieldSignature(webview_options.IOSSafariOptions, () => ({
    __proto__: dart.getFields(webview_options.IOSSafariOptions.__proto__),
    entersReaderIfAvailable: dart.fieldType(dart.legacy(core.bool)),
    barCollapsingEnabled: dart.fieldType(dart.legacy(core.bool)),
    dismissButtonStyle: dart.fieldType(dart.legacy(types.IOSSafariDismissButtonStyle)),
    preferredBarTintColor: dart.fieldType(dart.legacy(core.String)),
    preferredControlTintColor: dart.fieldType(dart.legacy(core.String)),
    presentationStyle: dart.fieldType(dart.legacy(types.IOSUIModalPresentationStyle)),
    transitionStyle: dart.fieldType(dart.legacy(types.IOSUIModalTransitionStyle))
  }));
  dart.defineExtensionMethods(webview_options.IOSSafariOptions, ['toString']);
  var javaScriptHandlersMap = dart.privateName(in_app_webview_controller, "InAppWebViewController.javaScriptHandlersMap");
  var android$ = dart.privateName(in_app_webview_controller, "InAppWebViewController.android");
  var ios$ = dart.privateName(in_app_webview_controller, "InAppWebViewController.ios");
  var webStorage = dart.privateName(in_app_webview_controller, "InAppWebViewController.webStorage");
  var _webview = dart.privateName(in_app_webview_controller, "_webview");
  var _channel$ = dart.privateName(in_app_webview_controller, "_channel");
  var _isOpened$ = dart.privateName(in_app_webview_controller, "_isOpened");
  var _id = dart.privateName(in_app_webview_controller, "_id");
  var _inAppBrowserUuid = dart.privateName(in_app_webview_controller, "_inAppBrowserUuid");
  var _inAppBrowser = dart.privateName(in_app_webview_controller, "_inAppBrowser");
  var _isUrlAbsolute = dart.privateName(in_app_webview_controller, "_isUrlAbsolute");
  var _createFavicons = dart.privateName(in_app_webview_controller, "_createFavicons");
  in_app_webview_controller.InAppWebViewController = class InAppWebViewController extends core.Object {
    get javaScriptHandlersMap() {
      return this[javaScriptHandlersMap];
    }
    set javaScriptHandlersMap(value) {
      this[javaScriptHandlersMap] = value;
    }
    get android() {
      return this[android$];
    }
    set android(value) {
      this[android$] = value;
    }
    get ios() {
      return this[ios$];
    }
    set ios(value) {
      this[ios$] = value;
    }
    get webStorage() {
      return this[webStorage];
    }
    set webStorage(value) {
      this[webStorage] = value;
    }
    handleMethod(call) {
      return async.async(dart.dynamic, (function* handleMethod() {
        let t3, t4, t3$, t4$, t3$0, t6, t5, t4$0, t3$1, t6$, t5$, t4$1, t3$2, t4$2, t3$3, t3$4, t4$3, t3$5, t3$6, t3$7, t4$4, t3$8, t5$0, t4$5, t3$9, t4$6, t3$10, t5$1, t4$7, t3$11, t6$0, t5$2, t5$3, t6$1, t5$4, t6$2, t5$5, t5$6, t5$7, t5$8, t5$9, t6$3, t5$10, t5$11, t5$12, t6$4, t5$13, t5$14, t5$15, t6$5, t5$16, t5$17, t5$18, t6$6, t5$19, t6$7, t5$20, t5$21, t5$22, t7, t6$8, t5$23, t5$24, t6$9, t5$25, t7$, t6$10, t5$26, t6$11, t5$27, t5$28, t5$29, t6$12, t5$30, t5$31, t5$32, t6$13, t5$33, t5$34, t5$35, t6$14, t5$36, t5$37, t5$38, t7$0, t6$15, t5$39, t5$40, t5$41, t6$16, t5$42, t6$17, t5$43, t5$44, t5$45, t5$46, t5$47, t5$48, t5$49, t5$50, t5$51, t5$52, t5$53, t5$54, t7$1, t6$18, t6$19, t6$20, t7$2, t6$21, t6$22, t6$23, t9, t8, t7$3, t6$24, t8$, t7$4, t6$25, t6$26, t6$27, t8$0, t7$5, t6$28, t6$29, t7$6, t6$30, t6$31, t7$7, t6$32, t7$8, t6$33, t6$34, t7$9, t6$35, t6$36, t6$37, t7$10, t6$38, t7$11, t6$39, t7$12, t6$40, t7$13, t6$41, t7$14, t6$42, t7$15, t6$43, t6$44, t6$45;
        switch (call.method) {
          case "onHeadlessWebViewCreated":
          {
            if (this[_webview] != null && T.HeadlessInAppWebViewL().is(this[_webview])) {
              t3 = this[_webview];
              t3.onWebViewCreated(this);
            }
            break;
          }
          case "onLoadStart":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].onLoadStart != null) {
              t3$ = this[_webview];
              t4 = url;
              t3$.onLoadStart(this, t4);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLoadStart(url);
            break;
          }
          case "onLoadStop":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].onLoadStop != null) {
              t3$0 = this[_webview];
              t4$ = url;
              t3$0.onLoadStop(this, t4$);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLoadStop(url);
            break;
          }
          case "onLoadError":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let code = T.intL().as(dart.dsend(call.arguments, '_get', ["code"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            if (this[_webview] != null && this[_webview].onLoadError != null) {
              t3$1 = this[_webview];
              t4$0 = url;
              t5 = code;
              t6 = message;
              t3$1.onLoadError(this, t4$0, t5, t6);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLoadError(url, code, message);
            break;
          }
          case "onLoadHttpError":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let statusCode = T.intL().as(dart.dsend(call.arguments, '_get', ["statusCode"]));
            let description = T.StringL().as(dart.dsend(call.arguments, '_get', ["description"]));
            if (this[_webview] != null && this[_webview].onLoadHttpError != null) {
              t3$2 = this[_webview];
              t4$1 = url;
              t5$ = statusCode;
              t6$ = description;
              t3$2.onLoadHttpError(this, t4$1, t5$, t6$);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLoadHttpError(url, statusCode, description);
            break;
          }
          case "onProgressChanged":
          {
            let progress = T.intL().as(dart.dsend(call.arguments, '_get', ["progress"]));
            if (this[_webview] != null && this[_webview].onProgressChanged != null) {
              t3$3 = this[_webview];
              t4$2 = progress;
              t3$3.onProgressChanged(this, t4$2);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onProgressChanged(progress);
            break;
          }
          case "shouldOverrideUrlLoading":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let method = T.StringL().as(dart.dsend(call.arguments, '_get', ["method"]));
            let headers = T.MapLOfStringL$StringL().as((t3$4 = dart.dsend(call.arguments, '_get', ["headers"]), t3$4 == null ? null : dart.dgsend(t3$4, [T.StringL(), T.StringL()], 'cast', [])));
            let isForMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["isForMainFrame"]));
            let androidHasGesture = T.boolL().as(dart.dsend(call.arguments, '_get', ["androidHasGesture"]));
            let androidIsRedirect = T.boolL().as(dart.dsend(call.arguments, '_get', ["androidIsRedirect"]));
            let iosWKNavigationType = T.intL().as(dart.dsend(call.arguments, '_get', ["iosWKNavigationType"]));
            let shouldOverrideUrlLoadingRequest = new types.ShouldOverrideUrlLoadingRequest.new({url: url, method: method, headers: headers, isForMainFrame: isForMainFrame, androidHasGesture: androidHasGesture, androidIsRedirect: androidIsRedirect, iosWKNavigationType: types.IOSWKNavigationType.fromValue(iosWKNavigationType)});
            if (this[_webview] != null && this[_webview].shouldOverrideUrlLoading != null) {
              t3$6 = (yield (t3$5 = this[_webview], t4$3 = shouldOverrideUrlLoadingRequest, t3$5.shouldOverrideUrlLoading(this, t4$3)));
              return t3$6 == null ? null : t3$6.toMap();
            } else if (this[_inAppBrowser] != null) {
              t3$7 = (yield this[_inAppBrowser].shouldOverrideUrlLoading(shouldOverrideUrlLoadingRequest));
              return t3$7 == null ? null : t3$7.toMap();
            }
            break;
          }
          case "onConsoleMessage":
          {
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let messageLevel = types.ConsoleMessageLevel.fromValue(T.intL().as(dart.dsend(call.arguments, '_get', ["messageLevel"])));
            let consoleMessage = new types.ConsoleMessage.new({message: message, messageLevel: messageLevel});
            if (this[_webview] != null && this[_webview].onConsoleMessage != null) {
              t3$8 = this[_webview];
              t4$4 = consoleMessage;
              t3$8.onConsoleMessage(this, t4$4);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onConsoleMessage(consoleMessage);
            break;
          }
          case "onScrollChanged":
          {
            let x = T.intL().as(dart.dsend(call.arguments, '_get', ["x"]));
            let y = T.intL().as(dart.dsend(call.arguments, '_get', ["y"]));
            if (this[_webview] != null && this[_webview].onScrollChanged != null) {
              t3$9 = this[_webview];
              t4$5 = x;
              t5$0 = y;
              t3$9.onScrollChanged(this, t4$5, t5$0);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onScrollChanged(x, y);
            break;
          }
          case "onDownloadStart":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].onDownloadStart != null) {
              t3$10 = this[_webview];
              t4$6 = url;
              t3$10.onDownloadStart(this, t4$6);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onDownloadStart(url);
            break;
          }
          case "onLoadResourceCustomScheme":
          {
            let scheme = T.StringL().as(dart.dsend(call.arguments, '_get', ["scheme"]));
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].onLoadResourceCustomScheme != null) {
              try {
                let response = (yield (t3$11 = this[_webview], t4$7 = scheme, t5$1 = url, t3$11.onLoadResourceCustomScheme(this, t4$7, t5$1)));
                return response != null ? response.toJson() : null;
              } catch (e$) {
                let error = dart.getThrown(e$);
                core.print(error);
                return null;
              }
            } else if (this[_inAppBrowser] != null) {
              try {
                let response = (yield this[_inAppBrowser].onLoadResourceCustomScheme(scheme, url));
                return response != null ? response.toJson() : null;
              } catch (e$0) {
                let error = dart.getThrown(e$0);
                core.print(error);
                return null;
              }
            }
            break;
          }
          case "onCreateWindow":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let windowId = T.intL().as(dart.dsend(call.arguments, '_get', ["windowId"]));
            let androidIsDialog = T.boolL().as(dart.dsend(call.arguments, '_get', ["androidIsDialog"]));
            let androidIsUserGesture = T.boolL().as(dart.dsend(call.arguments, '_get', ["androidIsUserGesture"]));
            let iosWKNavigationType = T.intL().as(dart.dsend(call.arguments, '_get', ["iosWKNavigationType"]));
            let iosIsForMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["iosIsForMainFrame"]));
            let createWindowRequest = new types.CreateWindowRequest.new({url: url, windowId: windowId, androidIsDialog: androidIsDialog, androidIsUserGesture: androidIsUserGesture, iosWKNavigationType: types.IOSWKNavigationType.fromValue(iosWKNavigationType), iosIsForMainFrame: iosIsForMainFrame});
            let result = false;
            if (this[_webview] != null && this[_webview].onCreateWindow != null)
              result = (yield (t5$2 = this[_webview], t6$0 = createWindowRequest, t5$2.onCreateWindow(this, t6$0)));
            else if (this[_inAppBrowser] != null) {
              result = (yield this[_inAppBrowser].onCreateWindow(createWindowRequest));
            }
            return result;
          }
          case "onCloseWindow":
          {
            if (this[_webview] != null && this[_webview].onCloseWindow != null) {
              t5$3 = this[_webview];
              t5$3.onCloseWindow(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onCloseWindow();
            break;
          }
          case "onTitleChanged":
          {
            let title = T.StringL().as(dart.dsend(call.arguments, '_get', ["title"]));
            if (this[_webview] != null && this[_webview].onTitleChanged != null) {
              t5$4 = this[_webview];
              t6$1 = title;
              t5$4.onTitleChanged(this, t6$1);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onTitleChanged(title);
            break;
          }
          case "onGeolocationPermissionsShowPrompt":
          {
            let origin = T.StringL().as(dart.dsend(call.arguments, '_get', ["origin"]));
            if (this[_webview] != null && this[_webview].androidOnGeolocationPermissionsShowPrompt != null) {
              t5$6 = (yield (t5$5 = this[_webview], t6$2 = origin, t5$5.androidOnGeolocationPermissionsShowPrompt(this, t6$2)));
              return t5$6 == null ? null : t5$6.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$7 = (yield this[_inAppBrowser].androidOnGeolocationPermissionsShowPrompt(origin));
              return t5$7 == null ? null : t5$7.toMap();
            }
            break;
          }
          case "onGeolocationPermissionsHidePrompt":
          {
            if (this[_webview] != null && this[_webview].androidOnGeolocationPermissionsHidePrompt != null) {
              t5$8 = this[_webview];
              t5$8.androidOnGeolocationPermissionsHidePrompt(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnGeolocationPermissionsHidePrompt();
            break;
          }
          case "shouldInterceptRequest":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let method = T.StringL().as(dart.dsend(call.arguments, '_get', ["method"]));
            let headers = T.MapLOfStringL$StringL().as((t5$9 = dart.dsend(call.arguments, '_get', ["headers"]), t5$9 == null ? null : dart.dgsend(t5$9, [T.StringL(), T.StringL()], 'cast', [])));
            let isForMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["isForMainFrame"]));
            let hasGesture = T.boolL().as(dart.dsend(call.arguments, '_get', ["hasGesture"]));
            let isRedirect = T.boolL().as(dart.dsend(call.arguments, '_get', ["isRedirect"]));
            let request = new types.WebResourceRequest.new({url: url, method: method, headers: headers, isForMainFrame: isForMainFrame, hasGesture: hasGesture, isRedirect: isRedirect});
            if (this[_webview] != null && this[_webview].androidShouldInterceptRequest != null) {
              t5$11 = (yield (t5$10 = this[_webview], t6$3 = request, t5$10.androidShouldInterceptRequest(this, t6$3)));
              return t5$11 == null ? null : t5$11.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$12 = (yield this[_inAppBrowser].androidShouldInterceptRequest(request));
              return t5$12 == null ? null : t5$12.toMap();
            }
            break;
          }
          case "onRenderProcessUnresponsive":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].androidOnRenderProcessUnresponsive != null) {
              t5$14 = (yield (t5$13 = this[_webview], t6$4 = url, t5$13.androidOnRenderProcessUnresponsive(this, t6$4)));
              return t5$14 == null ? null : t5$14.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$15 = (yield this[_inAppBrowser].androidOnRenderProcessUnresponsive(url));
              return t5$15 == null ? null : t5$15.toMap();
            }
            break;
          }
          case "onRenderProcessResponsive":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].androidOnRenderProcessResponsive != null) {
              t5$17 = (yield (t5$16 = this[_webview], t6$5 = url, t5$16.androidOnRenderProcessResponsive(this, t6$5)));
              return t5$17 == null ? null : t5$17.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$18 = (yield this[_inAppBrowser].androidOnRenderProcessResponsive(url));
              return t5$18 == null ? null : t5$18.toMap();
            }
            break;
          }
          case "onRenderProcessGone":
          {
            let didCrash = T.boolL().as(dart.dsend(call.arguments, '_get', ["didCrash"]));
            let rendererPriorityAtExit = types.RendererPriority.fromValue(T.intL().as(dart.dsend(call.arguments, '_get', ["rendererPriorityAtExit"])));
            let detail = new types.RenderProcessGoneDetail.new({didCrash: didCrash, rendererPriorityAtExit: rendererPriorityAtExit});
            if (this[_webview] != null && this[_webview].androidOnRenderProcessGone != null) {
              t5$19 = this[_webview];
              t6$6 = detail;
              t5$19.androidOnRenderProcessGone(this, t6$6);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnRenderProcessGone(detail);
            break;
          }
          case "onFormResubmission":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].androidOnFormResubmission != null) {
              t5$21 = (yield (t5$20 = this[_webview], t6$7 = url, t5$20.androidOnFormResubmission(this, t6$7)));
              return t5$21 == null ? null : t5$21.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$22 = (yield this[_inAppBrowser].androidOnFormResubmission(url));
              return t5$22 == null ? null : t5$22.toMap();
            }
            break;
          }
          case "onScaleChanged":
          {
            let oldScale = T.doubleL().as(dart.dsend(call.arguments, '_get', ["oldScale"]));
            let newScale = T.doubleL().as(dart.dsend(call.arguments, '_get', ["newScale"]));
            if (this[_webview] != null && this[_webview].androidOnScaleChanged != null) {
              t5$23 = this[_webview];
              t6$8 = oldScale;
              t7 = newScale;
              t5$23.androidOnScaleChanged(this, t6$8, t7);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnScaleChanged(oldScale, newScale);
            break;
          }
          case "onRequestFocus":
          {
            if (this[_webview] != null && this[_webview].androidOnRequestFocus != null) {
              t5$24 = this[_webview];
              t5$24.androidOnRequestFocus(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnRequestFocus();
            break;
          }
          case "onReceivedIcon":
          {
            let icon = _native_typed_data.NativeUint8List.fromList(T.ListOfint().as(dart.dgsend(dart.dsend(call.arguments, '_get', ["icon"]), [T.intL()], 'cast', [])));
            if (this[_webview] != null && this[_webview].androidOnReceivedIcon != null) {
              t5$25 = this[_webview];
              t6$9 = icon;
              t5$25.androidOnReceivedIcon(this, t6$9);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnReceivedIcon(icon);
            break;
          }
          case "onReceivedTouchIconUrl":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let precomposed = T.boolL().as(dart.dsend(call.arguments, '_get', ["precomposed"]));
            if (this[_webview] != null && this[_webview].androidOnReceivedTouchIconUrl != null) {
              t5$26 = this[_webview];
              t6$10 = url;
              t7$ = precomposed;
              t5$26.androidOnReceivedTouchIconUrl(this, t6$10, t7$);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnReceivedTouchIconUrl(url, precomposed);
            break;
          }
          case "onJsAlert":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let iosIsMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["iosIsMainFrame"]));
            let jsAlertRequest = new types.JsAlertRequest.new({url: url, message: message, iosIsMainFrame: iosIsMainFrame});
            if (this[_webview] != null && this[_webview].onJsAlert != null) {
              t5$28 = (yield (t5$27 = this[_webview], t6$11 = jsAlertRequest, t5$27.onJsAlert(this, t6$11)));
              return t5$28 == null ? null : t5$28.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$29 = (yield this[_inAppBrowser].onJsAlert(jsAlertRequest));
              return t5$29 == null ? null : t5$29.toMap();
            }
            break;
          }
          case "onJsConfirm":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let iosIsMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["iosIsMainFrame"]));
            let jsConfirmRequest = new types.JsConfirmRequest.new({url: url, message: message, iosIsMainFrame: iosIsMainFrame});
            if (this[_webview] != null && this[_webview].onJsConfirm != null) {
              t5$31 = (yield (t5$30 = this[_webview], t6$12 = jsConfirmRequest, t5$30.onJsConfirm(this, t6$12)));
              return t5$31 == null ? null : t5$31.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$32 = (yield this[_inAppBrowser].onJsConfirm(jsConfirmRequest));
              return t5$32 == null ? null : t5$32.toMap();
            }
            break;
          }
          case "onJsPrompt":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let defaultValue = T.StringL().as(dart.dsend(call.arguments, '_get', ["defaultValue"]));
            let iosIsMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["iosIsMainFrame"]));
            let jsPromptRequest = new types.JsPromptRequest.new({url: url, message: message, defaultValue: defaultValue, iosIsMainFrame: iosIsMainFrame});
            if (this[_webview] != null && this[_webview].onJsPrompt != null) {
              t5$34 = (yield (t5$33 = this[_webview], t6$13 = jsPromptRequest, t5$33.onJsPrompt(this, t6$13)));
              return t5$34 == null ? null : t5$34.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$35 = (yield this[_inAppBrowser].onJsPrompt(jsPromptRequest));
              return t5$35 == null ? null : t5$35.toMap();
            }
            break;
          }
          case "onJsBeforeUnload":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let iosIsMainFrame = T.boolL().as(dart.dsend(call.arguments, '_get', ["iosIsMainFrame"]));
            let jsBeforeUnloadRequest = new types.JsBeforeUnloadRequest.new({url: url, message: message, iosIsMainFrame: iosIsMainFrame});
            core.print(jsBeforeUnloadRequest);
            if (this[_webview] != null && this[_webview].androidOnJsBeforeUnload != null) {
              t5$37 = (yield (t5$36 = this[_webview], t6$14 = jsBeforeUnloadRequest, t5$36.androidOnJsBeforeUnload(this, t6$14)));
              return t5$37 == null ? null : t5$37.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$38 = (yield this[_inAppBrowser].androidOnJsBeforeUnload(jsBeforeUnloadRequest));
              return t5$38 == null ? null : t5$38.toMap();
            }
            break;
          }
          case "onSafeBrowsingHit":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let threatType = types.SafeBrowsingThreat.fromValue(T.intL().as(dart.dsend(call.arguments, '_get', ["threatType"])));
            if (this[_webview] != null && this[_webview].androidOnSafeBrowsingHit != null) {
              t5$40 = (yield (t5$39 = this[_webview], t6$15 = url, t7$0 = threatType, t5$39.androidOnSafeBrowsingHit(this, t6$15, t7$0)));
              return t5$40 == null ? null : t5$40.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$41 = (yield this[_inAppBrowser].androidOnSafeBrowsingHit(url, threatType));
              return t5$41 == null ? null : t5$41.toMap();
            }
            break;
          }
          case "onReceivedLoginRequest":
          {
            let realm = T.StringL().as(dart.dsend(call.arguments, '_get', ["realm"]));
            let account = T.StringL().as(dart.dsend(call.arguments, '_get', ["account"]));
            let args = T.StringL().as(dart.dsend(call.arguments, '_get', ["args"]));
            let loginRequest = new types.LoginRequest.new({realm: realm, account: account, args: args});
            if (this[_webview] != null && this[_webview].androidOnReceivedLoginRequest != null) {
              t5$42 = this[_webview];
              t6$16 = loginRequest;
              t5$42.androidOnReceivedLoginRequest(this, t6$16);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].androidOnReceivedLoginRequest(loginRequest);
            break;
          }
          case "onReceivedHttpAuthRequest":
          {
            let host = T.StringL().as(dart.dsend(call.arguments, '_get', ["host"]));
            let protocol = T.StringL().as(dart.dsend(call.arguments, '_get', ["protocol"]));
            let realm = T.StringL().as(dart.dsend(call.arguments, '_get', ["realm"]));
            let port = T.intL().as(dart.dsend(call.arguments, '_get', ["port"]));
            let previousFailureCount = T.intL().as(dart.dsend(call.arguments, '_get', ["previousFailureCount"]));
            let protectionSpace = new types.ProtectionSpace.new({host: host, protocol: protocol, realm: realm, port: port});
            let challenge = new types.HttpAuthChallenge.new({previousFailureCount: previousFailureCount, protectionSpace: protectionSpace});
            if (this[_webview] != null && this[_webview].onReceivedHttpAuthRequest != null) {
              t5$44 = (yield (t5$43 = this[_webview], t6$17 = challenge, t5$43.onReceivedHttpAuthRequest(this, t6$17)));
              return t5$44 == null ? null : t5$44.toMap();
            } else if (this[_inAppBrowser] != null) {
              t5$45 = (yield this[_inAppBrowser].onReceivedHttpAuthRequest(challenge));
              return t5$45 == null ? null : t5$45.toMap();
            }
            break;
          }
          case "onReceivedServerTrustAuthRequest":
          {
            let host = T.StringL().as(dart.dsend(call.arguments, '_get', ["host"]));
            let protocol = T.StringL().as(dart.dsend(call.arguments, '_get', ["protocol"]));
            let realm = T.StringL().as(dart.dsend(call.arguments, '_get', ["realm"]));
            let port = T.intL().as(dart.dsend(call.arguments, '_get', ["port"]));
            let androidError = T.intL().as(dart.dsend(call.arguments, '_get', ["androidError"]));
            let iosError = T.intL().as(dart.dsend(call.arguments, '_get', ["iosError"]));
            let message = T.StringL().as(dart.dsend(call.arguments, '_get', ["message"]));
            let sslCertificateMap = T.MapLOfStringL$dynamic().as((t5$46 = dart.dsend(call.arguments, '_get', ["sslCertificate"]), t5$46 == null ? null : dart.dgsend(t5$46, [T.StringL(), dart.dynamic], 'cast', [])));
            let sslCertificate = null;
            if (sslCertificateMap != null) {
              if (dart.test(io.Platform.isIOS)) {
                try {
                  let x509certificate = x509_certificate.X509Certificate.fromData({data: T.Uint8ListL().as(sslCertificateMap[$_get]("x509Certificate"))});
                  sslCertificate = new types.SslCertificate.new({issuedBy: new types.SslCertificateDName.new({CName: (t5$47 = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t5$47 == null ? "" : t5$47), DName: (t5$48 = x509certificate.issuerDistinguishedName, t5$48 == null ? "" : t5$48), OName: (t5$49 = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t5$49 == null ? "" : t5$49), UName: (t5$50 = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t5$50 == null ? "" : t5$50)}), issuedTo: new types.SslCertificateDName.new({CName: (t5$51 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t5$51 == null ? "" : t5$51), DName: (t5$52 = x509certificate.subjectDistinguishedName, t5$52 == null ? "" : t5$52), OName: (t5$53 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t5$53 == null ? "" : t5$53), UName: (t5$54 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t5$54 == null ? "" : t5$54)}), validNotAfterDate: x509certificate.notAfter, validNotBeforeDate: x509certificate.notBefore, x509Certificate: x509certificate});
                } catch (e$1) {
                  let e = dart.getThrown(e$1);
                  let stacktrace = dart.stackTrace(e$1);
                  core.print(e);
                  core.print(stacktrace);
                  return null;
                }
              } else {
                sslCertificate = types.SslCertificate.fromMap(sslCertificateMap);
              }
            }
            let androidSslError = androidError != null ? types.AndroidSslError.fromValue(androidError) : null;
            let iosSslError = iosError != null ? types.IOSSslError.fromValue(iosError) : null;
            let protectionSpace = new types.ProtectionSpace.new({host: host, protocol: protocol, realm: realm, port: port});
            let challenge = new types.ServerTrustChallenge.new({protectionSpace: protectionSpace, androidError: androidSslError, iosError: iosSslError, message: message, sslCertificate: sslCertificate});
            if (this[_webview] != null && this[_webview].onReceivedServerTrustAuthRequest != null) {
              t6$19 = (yield (t6$18 = this[_webview], t7$1 = challenge, t6$18.onReceivedServerTrustAuthRequest(this, t7$1)));
              return t6$19 == null ? null : t6$19.toMap();
            } else if (this[_inAppBrowser] != null) {
              t6$20 = (yield this[_inAppBrowser].onReceivedServerTrustAuthRequest(challenge));
              return t6$20 == null ? null : t6$20.toMap();
            }
            break;
          }
          case "onReceivedClientCertRequest":
          {
            let host = T.StringL().as(dart.dsend(call.arguments, '_get', ["host"]));
            let protocol = T.StringL().as(dart.dsend(call.arguments, '_get', ["protocol"]));
            let realm = T.StringL().as(dart.dsend(call.arguments, '_get', ["realm"]));
            let port = T.intL().as(dart.dsend(call.arguments, '_get', ["port"]));
            let protectionSpace = new types.ProtectionSpace.new({host: host, protocol: protocol, realm: realm, port: port});
            let challenge = new types.ClientCertChallenge.new({protectionSpace: protectionSpace});
            if (this[_webview] != null && this[_webview].onReceivedClientCertRequest != null) {
              t6$22 = (yield (t6$21 = this[_webview], t7$2 = challenge, t6$21.onReceivedClientCertRequest(this, t7$2)));
              return t6$22 == null ? null : t6$22.toMap();
            } else if (this[_inAppBrowser] != null) {
              t6$23 = (yield this[_inAppBrowser].onReceivedClientCertRequest(challenge));
              return t6$23 == null ? null : t6$23.toMap();
            }
            break;
          }
          case "onFindResultReceived":
          {
            let activeMatchOrdinal = T.intL().as(dart.dsend(call.arguments, '_get', ["activeMatchOrdinal"]));
            let numberOfMatches = T.intL().as(dart.dsend(call.arguments, '_get', ["numberOfMatches"]));
            let isDoneCounting = T.boolL().as(dart.dsend(call.arguments, '_get', ["isDoneCounting"]));
            if (this[_webview] != null && this[_webview].onFindResultReceived != null) {
              t6$24 = this[_webview];
              t7$3 = activeMatchOrdinal;
              t8 = numberOfMatches;
              t9 = isDoneCounting;
              t6$24.onFindResultReceived(this, t7$3, t8, t9);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onFindResultReceived(activeMatchOrdinal, numberOfMatches, isDoneCounting);
            break;
          }
          case "onPermissionRequest":
          {
            let origin = T.StringL().as(dart.dsend(call.arguments, '_get', ["origin"]));
            let resources = T.ListLOfStringL().as(dart.dgsend(dart.dsend(call.arguments, '_get', ["resources"]), [T.StringL()], 'cast', []));
            if (this[_webview] != null && this[_webview].androidOnPermissionRequest != null) {
              t6$26 = (yield (t6$25 = this[_webview], t7$4 = origin, t8$ = resources, t6$25.androidOnPermissionRequest(this, t7$4, t8$)));
              return t6$26 == null ? null : t6$26.toMap();
            } else if (this[_inAppBrowser] != null) {
              t6$27 = (yield this[_inAppBrowser].androidOnPermissionRequest(origin, resources));
              return t6$27 == null ? null : t6$27.toMap();
            }
            break;
          }
          case "onUpdateVisitedHistory":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            let androidIsReload = T.boolL().as(dart.dsend(call.arguments, '_get', ["androidIsReload"]));
            if (this[_webview] != null && this[_webview].onUpdateVisitedHistory != null) {
              t6$28 = this[_webview];
              t7$5 = url;
              t8$0 = androidIsReload;
              t6$28.onUpdateVisitedHistory(this, t7$5, t8$0);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onUpdateVisitedHistory(url, androidIsReload);
            return null;
          }
          case "onWebContentProcessDidTerminate":
          {
            if (this[_webview] != null && this[_webview].iosOnWebContentProcessDidTerminate != null) {
              t6$29 = this[_webview];
              t6$29.iosOnWebContentProcessDidTerminate(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].iosOnWebContentProcessDidTerminate();
            break;
          }
          case "onPageCommitVisible":
          {
            let url = T.StringL().as(dart.dsend(call.arguments, '_get', ["url"]));
            if (this[_webview] != null && this[_webview].onPageCommitVisible != null) {
              t6$30 = this[_webview];
              t7$6 = url;
              t6$30.onPageCommitVisible(this, t7$6);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onPageCommitVisible(url);
            break;
          }
          case "onDidReceiveServerRedirectForProvisionalNavigation":
          {
            if (this[_webview] != null && this[_webview].iosOnDidReceiveServerRedirectForProvisionalNavigation != null) {
              t6$31 = this[_webview];
              t6$31.iosOnDidReceiveServerRedirectForProvisionalNavigation(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].iosOnDidReceiveServerRedirectForProvisionalNavigation();
            break;
          }
          case "onLongPressHitTestResult":
          {
            let hitTestResultMap = T.MapL().as(dart.dsend(call.arguments, '_get', ["hitTestResult"]));
            let type = types.InAppWebViewHitTestResultType.fromValue(T.intL().as(dart.dsend(hitTestResultMap[$_get]("type"), 'toInt', [])));
            let extra = T.StringL().as(hitTestResultMap[$_get]("extra"));
            let hitTestResult = new types.InAppWebViewHitTestResult.new({type: type, extra: extra});
            if (this[_webview] != null && this[_webview].onLongPressHitTestResult != null) {
              t6$32 = this[_webview];
              t7$7 = hitTestResult;
              t6$32.onLongPressHitTestResult(this, t7$7);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLongPressHitTestResult(hitTestResult);
            break;
          }
          case "onCreateContextMenu":
          {
            let contextMenu = null;
            if (this[_webview] != null && this[_webview].contextMenu != null) {
              contextMenu = this[_webview].contextMenu;
            } else if (this[_inAppBrowser] != null && this[_inAppBrowser].contextMenu != null) {
              contextMenu = this[_inAppBrowser].contextMenu;
            }
            if (contextMenu != null && contextMenu.onCreateContextMenu != null) {
              let hitTestResultMap = T.MapL().as(dart.dsend(call.arguments, '_get', ["hitTestResult"]));
              let type = types.InAppWebViewHitTestResultType.fromValue(T.intL().as(dart.dsend(hitTestResultMap[$_get]("type"), 'toInt', [])));
              let extra = T.StringL().as(hitTestResultMap[$_get]("extra"));
              let hitTestResult = new types.InAppWebViewHitTestResult.new({type: type, extra: extra});
              t6$33 = contextMenu;
              t7$8 = hitTestResult;
              t6$33.onCreateContextMenu(t7$8);
            }
            break;
          }
          case "onHideContextMenu":
          {
            let contextMenu = null;
            if (this[_webview] != null && this[_webview].contextMenu != null) {
              contextMenu = this[_webview].contextMenu;
            } else if (this[_inAppBrowser] != null && this[_inAppBrowser].contextMenu != null) {
              contextMenu = this[_inAppBrowser].contextMenu;
            }
            if (contextMenu != null && contextMenu.onHideContextMenu != null) {
              contextMenu.onHideContextMenu();
            }
            break;
          }
          case "onContextMenuActionItemClicked":
          {
            let contextMenu = null;
            if (this[_webview] != null && this[_webview].contextMenu != null) {
              contextMenu = this[_webview].contextMenu;
            } else if (this[_inAppBrowser] != null && this[_inAppBrowser].contextMenu != null) {
              contextMenu = this[_inAppBrowser].contextMenu;
            }
            if (contextMenu != null) {
              let androidId = T.intL().as(dart.dsend(call.arguments, '_get', ["androidId"]));
              let iosId = T.StringL().as(dart.dsend(call.arguments, '_get', ["iosId"]));
              let title = T.StringL().as(dart.dsend(call.arguments, '_get', ["title"]));
              let menuItemClicked = new context_menu.ContextMenuItem.new({androidId: androidId, iosId: iosId, title: title, action: null});
              for (let menuItem of contextMenu.menuItems) {
                if (dart.test(io.Platform.isAndroid) && menuItem.androidId == androidId || dart.test(io.Platform.isIOS) && menuItem.iosId == iosId) {
                  menuItemClicked = menuItem;
                  t6$34 = menuItem;
                  t6$34 == null ? null : t6$34.action();
                  break;
                }
              }
              if (contextMenu.onContextMenuActionItemClicked != null) {
                t6$35 = contextMenu;
                t7$9 = menuItemClicked;
                t6$35.onContextMenuActionItemClicked(t7$9);
              }
            }
            break;
          }
          case "onEnterFullscreen":
          {
            if (this[_webview] != null && this[_webview].onEnterFullscreen != null) {
              t6$36 = this[_webview];
              t6$36.onEnterFullscreen(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onEnterFullscreen();
            break;
          }
          case "onExitFullscreen":
          {
            if (this[_webview] != null && this[_webview].onExitFullscreen != null) {
              t6$37 = this[_webview];
              t6$37.onExitFullscreen(this);
            } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onExitFullscreen();
            break;
          }
          case "onCallJsHandler":
          {
            let handlerName = T.StringL().as(dart.dsend(call.arguments, '_get', ["handlerName"]));
            let args = T.ListL().as(convert.jsonDecode(core.String.as(dart.dsend(call.arguments, '_get', ["args"]))));
            switch (handlerName) {
              case "onLoadResource":
              {
                let argMap = T.MapL().as(args[$_get](0));
                let initiatorType = T.StringL().as(argMap[$_get]("initiatorType"));
                let url = T.StringL().as(argMap[$_get]("name"));
                let startTime = T.doubleL().as(T.intL().is(argMap[$_get]("startTime")) ? dart.dsend(argMap[$_get]("startTime"), 'toDouble', []) : argMap[$_get]("startTime"));
                let duration = T.doubleL().as(T.intL().is(argMap[$_get]("duration")) ? dart.dsend(argMap[$_get]("duration"), 'toDouble', []) : argMap[$_get]("duration"));
                let response = new types.LoadedResource.new({initiatorType: initiatorType, url: url, startTime: startTime, duration: duration});
                if (this[_webview] != null && this[_webview].onLoadResource != null) {
                  t6$38 = this[_webview];
                  t7$10 = response;
                  t6$38.onLoadResource(this, t7$10);
                } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onLoadResource(response);
                return null;
              }
              case "shouldInterceptAjaxRequest":
              {
                let argMap = T.MapL().as(args[$_get](0));
                let data = argMap[$_get]("data");
                let method = T.StringL().as(argMap[$_get]("method"));
                let url = T.StringL().as(argMap[$_get]("url"));
                let isAsync = T.boolL().as(argMap[$_get]("isAsync"));
                let user = T.StringL().as(argMap[$_get]("user"));
                let password = T.StringL().as(argMap[$_get]("password"));
                let withCredentials = T.boolL().as(argMap[$_get]("withCredentials"));
                let headers = new types.AjaxRequestHeaders.new(T.MapL().as(argMap[$_get]("headers")));
                let responseType = T.StringL().as(argMap[$_get]("responseType"));
                let request = new types.AjaxRequest.new({data: data, method: method, url: url, isAsync: isAsync, user: user, password: password, withCredentials: withCredentials, headers: headers, responseType: responseType});
                if (this[_webview] != null && this[_webview].shouldInterceptAjaxRequest != null)
                  return convert.jsonEncode(yield (t6$39 = this[_webview], t7$11 = request, t6$39.shouldInterceptAjaxRequest(this, t7$11)));
                else if (this[_inAppBrowser] != null) return convert.jsonEncode(yield this[_inAppBrowser].shouldInterceptAjaxRequest(request));
                return null;
              }
              case "onAjaxReadyStateChange":
              {
                let argMap = T.MapL().as(args[$_get](0));
                let data = argMap[$_get]("data");
                let method = T.StringL().as(argMap[$_get]("method"));
                let url = T.StringL().as(argMap[$_get]("url"));
                let isAsync = T.boolL().as(argMap[$_get]("isAsync"));
                let user = T.StringL().as(argMap[$_get]("user"));
                let password = T.StringL().as(argMap[$_get]("password"));
                let withCredentials = T.boolL().as(argMap[$_get]("withCredentials"));
                let headers = new types.AjaxRequestHeaders.new(T.MapL().as(argMap[$_get]("headers")));
                let readyState = T.intL().as(argMap[$_get]("readyState"));
                let status = T.intL().as(argMap[$_get]("status"));
                let responseURL = T.StringL().as(argMap[$_get]("responseURL"));
                let responseType = T.StringL().as(argMap[$_get]("responseType"));
                let response = argMap[$_get]("response");
                let responseText = T.StringL().as(argMap[$_get]("responseText"));
                let responseXML = T.StringL().as(argMap[$_get]("responseXML"));
                let statusText = T.StringL().as(argMap[$_get]("statusText"));
                let responseHeaders = T.MapL().as(argMap[$_get]("responseHeaders"));
                let request = new types.AjaxRequest.new({data: data, method: method, url: url, isAsync: isAsync, user: user, password: password, withCredentials: withCredentials, headers: headers, readyState: types.AjaxRequestReadyState.fromValue(readyState), status: status, responseURL: responseURL, responseType: responseType, response: response, responseText: responseText, responseXML: responseXML, statusText: statusText, responseHeaders: responseHeaders});
                if (this[_webview] != null && this[_webview].onAjaxReadyStateChange != null)
                  return convert.jsonEncode(yield (t6$40 = this[_webview], t7$12 = request, t6$40.onAjaxReadyStateChange(this, t7$12)));
                else if (this[_inAppBrowser] != null) return convert.jsonEncode(yield this[_inAppBrowser].onAjaxReadyStateChange(request));
                return null;
              }
              case "onAjaxProgress":
              {
                let argMap = T.MapL().as(args[$_get](0));
                let data = argMap[$_get]("data");
                let method = T.StringL().as(argMap[$_get]("method"));
                let url = T.StringL().as(argMap[$_get]("url"));
                let isAsync = T.boolL().as(argMap[$_get]("isAsync"));
                let user = T.StringL().as(argMap[$_get]("user"));
                let password = T.StringL().as(argMap[$_get]("password"));
                let withCredentials = T.boolL().as(argMap[$_get]("withCredentials"));
                let headers = new types.AjaxRequestHeaders.new(T.MapL().as(argMap[$_get]("headers")));
                let readyState = T.intL().as(argMap[$_get]("readyState"));
                let status = T.intL().as(argMap[$_get]("status"));
                let responseURL = T.StringL().as(argMap[$_get]("responseURL"));
                let responseType = T.StringL().as(argMap[$_get]("responseType"));
                let response = argMap[$_get]("response");
                let responseText = T.StringL().as(argMap[$_get]("responseText"));
                let responseXML = T.StringL().as(argMap[$_get]("responseXML"));
                let statusText = T.StringL().as(argMap[$_get]("statusText"));
                let responseHeaders = T.MapL().as(argMap[$_get]("responseHeaders"));
                let eventMap = T.MapL().as(argMap[$_get]("event"));
                let event = new types.AjaxRequestEvent.new({lengthComputable: T.boolL().as(eventMap[$_get]("lengthComputable")), loaded: T.intL().as(eventMap[$_get]("loaded")), total: T.intL().as(eventMap[$_get]("total")), type: types.AjaxRequestEventType.fromValue(T.StringL().as(eventMap[$_get]("type")))});
                let request = new types.AjaxRequest.new({data: data, method: method, url: url, isAsync: isAsync, user: user, password: password, withCredentials: withCredentials, headers: headers, readyState: types.AjaxRequestReadyState.fromValue(readyState), status: status, responseURL: responseURL, responseType: responseType, response: response, responseText: responseText, responseXML: responseXML, statusText: statusText, responseHeaders: responseHeaders, event: event});
                if (this[_webview] != null && this[_webview].onAjaxProgress != null)
                  return convert.jsonEncode(yield (t6$41 = this[_webview], t7$13 = request, t6$41.onAjaxProgress(this, t7$13)));
                else if (this[_inAppBrowser] != null) return convert.jsonEncode(yield this[_inAppBrowser].onAjaxProgress(request));
                return null;
              }
              case "shouldInterceptFetchRequest":
              {
                let argMap = T.MapL().as(args[$_get](0));
                let url = T.StringL().as(argMap[$_get]("url"));
                let method = T.StringL().as(argMap[$_get]("method"));
                let headers = T.MapL().as(argMap[$_get]("headers"));
                let body = _native_typed_data.NativeUint8List.fromList(T.ListOfint().as(dart.dgsend(argMap[$_get]("body"), [T.intL()], 'cast', [])));
                let mode = T.StringL().as(argMap[$_get]("mode"));
                let credentials = types.FetchRequest.fromMap(argMap[$_get]("credentials"));
                let cache = T.StringL().as(argMap[$_get]("cache"));
                let redirect = T.StringL().as(argMap[$_get]("redirect"));
                let referrer = T.StringL().as(argMap[$_get]("referrer"));
                let referrerPolicy = T.StringL().as(argMap[$_get]("referrerPolicy"));
                let integrity = T.StringL().as(argMap[$_get]("integrity"));
                let keepalive = T.boolL().as(argMap[$_get]("keepalive"));
                let request = new types.FetchRequest.new({url: url, method: method, headers: T.MapLOfStringL$dynamic().as(headers), body: body, mode: mode, credentials: credentials, cache: cache, redirect: redirect, referrer: referrer, referrerPolicy: referrerPolicy, integrity: integrity, keepalive: keepalive});
                if (this[_webview] != null && this[_webview].shouldInterceptFetchRequest != null)
                  return convert.jsonEncode(yield (t6$42 = this[_webview], t7$14 = request, t6$42.shouldInterceptFetchRequest(this, t7$14)));
                else if (this[_inAppBrowser] != null) return convert.jsonEncode(yield this[_inAppBrowser].shouldInterceptFetchRequest(request));
                return null;
              }
              case "onPrint":
              {
                let url = T.StringL().as(args[$_get](0));
                if (this[_webview] != null && this[_webview].onPrint != null) {
                  t6$43 = this[_webview];
                  t7$15 = url;
                  t6$43.onPrint(this, t7$15);
                } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onPrint(url);
                return null;
              }
              case "onWindowFocus":
              {
                if (this[_webview] != null && this[_webview].onWindowFocus != null) {
                  t6$44 = this[_webview];
                  t6$44.onWindowFocus(this);
                } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onWindowFocus();
                return null;
              }
              case "onWindowBlur":
              {
                if (this[_webview] != null && this[_webview].onWindowBlur != null) {
                  t6$45 = this[_webview];
                  t6$45.onWindowBlur(this);
                } else if (this[_inAppBrowser] != null) this[_inAppBrowser].onWindowBlur();
                return null;
              }
            }
            if (dart.test(this.javaScriptHandlersMap[$containsKey](handlerName))) {
              try {
                return convert.jsonEncode(yield this.javaScriptHandlersMap[$_get](handlerName)(args));
              } catch (e$2) {
                let error = dart.getThrown(e$2);
                core.print(error);
                return null;
              }
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
      }).bind(this));
    }
    getUrl() {
      return async.async(T.StringL(), (function* getUrl() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.StringL(), "getUrl", args);
      }).bind(this));
    }
    getTitle() {
      return async.async(T.StringL(), (function* getTitle() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.StringL(), "getTitle", args);
      }).bind(this));
    }
    getProgress() {
      return async.async(T.intL(), (function* getProgress() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.intL(), "getProgress", args);
      }).bind(this));
    }
    getHtml() {
      return async.async(T.StringL(), (function* getHtml() {
        let html = null;
        let options = (yield this.getOptions());
        if (options != null && options.crossPlatform.javaScriptEnabled === true) {
          html = T.StringL().as(yield this.evaluateJavascript({source: "window.document.getElementsByTagName('html')[0].outerHTML;"}));
          if (html != null && html[$isNotEmpty]) return html;
        }
        let webviewUrl = (yield this.getUrl());
        if (webviewUrl[$startsWith]("file:///")) {
          let assetPathSplitted = webviewUrl[$split]("/flutter_assets/");
          let assetPath = assetPathSplitted[$_get](dart.notNull(assetPathSplitted[$length]) - 1);
          try {
            let bytes = (yield asset_bundle.rootBundle.load(assetPath));
            html = convert.utf8.decode(bytes[$buffer][$asUint8List]());
          } catch (e$) {
            let e = dart.getThrown(e$);
          }
        } else {
          let client = _http.HttpClient.new();
          let url = core.Uri.parse(webviewUrl);
          try {
            let htmlRequest = (yield client.getUrl(url));
            html = (yield (yield htmlRequest.close()).transform(T.StringL(), new convert.Utf8Decoder.new()).join());
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            core.print(e);
          }
        }
        return html;
      }).bind(this));
    }
    getFavicons() {
      return async.async(T.ListLOfFaviconL(), (function* getFavicons() {
        let t9, t9$, t10;
        let favicons = T.JSArrayOfFaviconL().of([]);
        let client = _http.HttpClient.new();
        let webviewUrl = (yield this.getUrl());
        let url = webviewUrl[$startsWith]("file:///") ? core._Uri.file(webviewUrl) : core.Uri.parse(webviewUrl);
        let manifestUrl = null;
        let html = (yield this.getHtml());
        if (html == null || html != null && html[$isEmpty]) {
          return favicons;
        }
        let assetPathBase = null;
        if (webviewUrl[$startsWith]("file:///")) {
          let assetPathSplitted = webviewUrl[$split]("/flutter_assets/");
          assetPathBase = dart.notNull(assetPathSplitted[$_get](0)) + "/flutter_assets/";
        }
        let options = (yield this.getOptions());
        if (options != null && options.crossPlatform.javaScriptEnabled === true) {
          let links = T.ListLOfMapL().as((t9$ = (t9 = (yield this.evaluateJavascript({source: "(function() {\n  var linkNodes = document.head.getElementsByTagName(\"link\");\n  var links = [];\n  for (var i = 0; i < linkNodes.length; i++) {\n    var linkNode = linkNodes[i];\n    if (linkNode.rel === 'manifest') {\n      links.push(\n        {\n          rel: linkNode.rel,\n          href: linkNode.href,\n          sizes: null\n        }\n      );\n    } else if (linkNode.rel != null && linkNode.rel.indexOf('icon') >= 0) {\n      links.push(\n        {\n          rel: linkNode.rel,\n          href: linkNode.href,\n          sizes: linkNode.sizes != null && linkNode.sizes.value != \"\" ? linkNode.sizes.value : null\n        }\n      );\n    }\n  }\n  return links;\n})();\n"})), t9 == null ? null : dart.dgsend(t9, [T.MapL()], 'cast', [])), t9$ == null ? T.JSArrayOfMapL().of([]) : t9$));
          for (let link of links) {
            if (dart.equals(link[$_get]("rel"), "manifest")) {
              manifestUrl = T.StringL().as(link[$_get]("href"));
              if (!dart.test(this[_isUrlAbsolute](manifestUrl))) {
                if (manifestUrl[$startsWith]("/")) {
                  manifestUrl = manifestUrl[$substring](1);
                }
                manifestUrl = T.StringL().as(dart.dsend(assetPathBase == null ? dart.notNull(url.scheme) + "://" + dart.notNull(url.host) + "/" : assetPathBase, '+', [manifestUrl]));
              }
              continue;
            }
            favicons[$addAll](this[_createFavicons](url, T.StringL().as(assetPathBase), T.StringL().as(link[$_get]("href")), T.StringL().as(link[$_get]("rel")), T.StringL().as(link[$_get]("sizes")), false));
          }
        }
        try {
          let faviconUrl = dart.notNull(url.scheme) + "://" + dart.notNull(url.host) + "/favicon.ico";
          yield client.headUrl(core.Uri.parse(faviconUrl));
          favicons[$add](new types.Favicon.new({url: faviconUrl, rel: "shortcut icon"}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print("/favicon.ico file not found: " + dart.notNull(dart.toString(e)));
        }
        let manifestRequest = null;
        let manifestResponse = null;
        let manifestFound = false;
        if (manifestUrl == null) {
          manifestUrl = dart.notNull(url.scheme) + "://" + dart.notNull(url.host) + "/manifest.json";
        }
        try {
          manifestRequest = (yield client.getUrl(core.Uri.parse(manifestUrl)));
          manifestResponse = (yield manifestRequest.close());
          manifestFound = manifestResponse.statusCode === 200 && (t10 = manifestResponse.headers.contentType, t10 == null ? null : t10.mimeType) === "application/json";
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          core.print("Manifest file not found: " + dart.notNull(dart.toString(e)));
        }
        if (manifestFound) {
          let manifest = T.MapLOfStringL$dynamic().as(convert.json.decode(yield manifestResponse.transform(T.StringL(), new convert.Utf8Decoder.new()).join()));
          if (dart.test(manifest[$containsKey]("icons"))) {
            for (let t11 of T.IterableL().as(manifest[$_get]("icons"))) {
              let icon = T.MapLOfStringL$dynamic().as(t11);
              favicons[$addAll](this[_createFavicons](url, T.StringL().as(assetPathBase), T.StringL().as(icon[$_get]("src")), T.StringL().as(icon[$_get]("rel")), T.StringL().as(icon[$_get]("sizes")), true));
            }
          }
        }
        return favicons;
      }).bind(this));
    }
    [_isUrlAbsolute](url) {
      return url[$startsWith]("http://") || url[$startsWith]("https://");
    }
    [_createFavicons](url, assetPathBase, urlIcon, rel, sizes, isManifest) {
      let favicons = T.JSArrayOfFaviconL().of([]);
      let urlSplitted = urlIcon[$split]("/");
      if (!dart.test(this[_isUrlAbsolute](urlIcon))) {
        if (urlIcon[$startsWith]("/")) {
          urlIcon = urlIcon[$substring](1);
        }
        urlIcon = dart.notNull(assetPathBase == null ? dart.notNull(url.scheme) + "://" + dart.notNull(url.host) + "/" : assetPathBase) + dart.notNull(urlIcon);
      }
      if (dart.test(isManifest)) {
        rel = sizes != null ? urlSplitted[$_get](dart.notNull(urlSplitted[$length]) - 1)[$replaceFirst]("-" + dart.notNull(sizes), "")[$split](" ")[$_get](0)[$split](".")[$_get](0) : null;
      }
      if (sizes != null && sizes[$isNotEmpty] && sizes !== "any") {
        let sizesSplitted = sizes[$split](" ");
        for (let size of sizesSplitted) {
          let width = core.int.parse(size[$split]("x")[$_get](0));
          let height = core.int.parse(size[$split]("x")[$_get](1));
          favicons[$add](new types.Favicon.new({url: urlIcon, rel: rel, width: width, height: height}));
        }
      } else {
        favicons[$add](new types.Favicon.new({url: urlIcon, rel: rel, width: null, height: null}));
      }
      return favicons;
    }
    loadUrl(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[6] || CT.C6;
      return async.async(dart.void, (function* loadUrl() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[15], 1151, 12, "url != null && url.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("headers", dart.fn(() => headers, T.VoidToMapLOfStringL$StringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "loadUrl", args);
      }).bind(this));
    }
    postUrl(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let postData = opts && 'postData' in opts ? opts.postData : null;
      return async.async(dart.void, (function* postUrl() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[15], 1163, 12, "url != null && url.isNotEmpty");
        if (!(postData != null)) dart.assertFailed(null, I[15], 1164, 12, "postData != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("postData", dart.fn(() => postData, T.VoidToUint8ListL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "postUrl", args);
      }).bind(this));
    }
    loadData(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
      let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "about:blank";
      let androidHistoryUrl = opts && 'androidHistoryUrl' in opts ? opts.androidHistoryUrl : "about:blank";
      return async.async(dart.void, (function* loadData() {
        if (!(data != null && mimeType != null && encoding != null && baseUrl != null)) dart.assertFailed(null, I[15], 1190, 12, "data != null &&\n        mimeType != null &&\n        encoding != null &&\n        baseUrl != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("data", dart.fn(() => data, T.VoidToStringL()));
        args[$putIfAbsent]("mimeType", dart.fn(() => mimeType, T.VoidToStringL()));
        args[$putIfAbsent]("encoding", dart.fn(() => encoding, T.VoidToStringL()));
        args[$putIfAbsent]("baseUrl", dart.fn(() => baseUrl, T.VoidToStringL()));
        args[$putIfAbsent]("historyUrl", dart.fn(() => androidHistoryUrl, T.VoidToStringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "loadData", args);
      }).bind(this));
    }
    loadFile(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[6] || CT.C6;
      return async.async(dart.void, (function* loadFile() {
        if (!(assetFilePath != null && assetFilePath[$isNotEmpty])) dart.assertFailed(null, I[15], 1235, 12, "assetFilePath != null && assetFilePath.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => assetFilePath, T.VoidToStringL()));
        args[$putIfAbsent]("headers", dart.fn(() => headers, T.VoidToMapLOfStringL$StringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "loadFile", args);
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "reload", args);
      }).bind(this));
    }
    goBack() {
      return async.async(dart.void, (function* goBack() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "goBack", args);
      }).bind(this));
    }
    canGoBack() {
      return async.async(T.boolL(), (function* canGoBack() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.boolL(), "canGoBack", args);
      }).bind(this));
    }
    goForward() {
      return async.async(dart.void, (function* goForward() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "goForward", args);
      }).bind(this));
    }
    canGoForward() {
      return async.async(T.boolL(), (function* canGoForward() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.boolL(), "canGoForward", args);
      }).bind(this));
    }
    goBackOrForward(opts) {
      let steps = opts && 'steps' in opts ? opts.steps : null;
      return async.async(dart.void, (function* goBackOrForward() {
        if (!(steps != null)) dart.assertFailed(null, I[15], 1298, 12, "steps != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("steps", dart.fn(() => steps, T.VoidTointL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "goBackOrForward", args);
      }).bind(this));
    }
    canGoBackOrForward(opts) {
      let steps = opts && 'steps' in opts ? opts.steps : null;
      return async.async(T.boolL(), (function* canGoBackOrForward() {
        if (!(steps != null)) dart.assertFailed(null, I[15], 1309, 12, "steps != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("steps", dart.fn(() => steps, T.VoidTointL()));
        return yield this[_channel$].invokeMethod(T.boolL(), "canGoBackOrForward", args);
      }).bind(this));
    }
    goTo(opts) {
      let historyItem = opts && 'historyItem' in opts ? opts.historyItem : null;
      return async.async(dart.void, (function* goTo() {
        yield this.goBackOrForward({steps: historyItem.offset});
      }).bind(this));
    }
    isLoading() {
      return async.async(T.boolL(), (function* isLoading() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.boolL(), "isLoading", args);
      }).bind(this));
    }
    stopLoading() {
      return async.async(dart.void, (function* stopLoading() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "stopLoading", args);
      }).bind(this));
    }
    evaluateJavascript(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      return async.async(dart.dynamic, (function* evaluateJavascript() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("source", dart.fn(() => source, T.VoidToStringL()));
        let data = (yield this[_channel$].invokeMethod(dart.dynamic, "evaluateJavascript", args));
        if (data != null && dart.test(io.Platform.isAndroid)) data = convert.json.decode(T.StringL().as(data));
        return data;
      }).bind(this));
    }
    injectJavascriptFileFromUrl(opts) {
      let urlFile = opts && 'urlFile' in opts ? opts.urlFile : null;
      return async.async(dart.void, (function* injectJavascriptFileFromUrl() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("urlFile", dart.fn(() => urlFile, T.VoidToStringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "injectJavascriptFileFromUrl", args);
      }).bind(this));
    }
    injectJavascriptFileFromAsset(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      return async.async(dart.void, (function* injectJavascriptFileFromAsset() {
        let source = (yield asset_bundle.rootBundle.loadString(assetFilePath));
        yield this.evaluateJavascript({source: source});
      }).bind(this));
    }
    injectCSSCode(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      return async.async(dart.void, (function* injectCSSCode() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("source", dart.fn(() => source, T.VoidToStringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "injectCSSCode", args);
      }).bind(this));
    }
    injectCSSFileFromUrl(opts) {
      let urlFile = opts && 'urlFile' in opts ? opts.urlFile : null;
      return async.async(dart.void, (function* injectCSSFileFromUrl() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("urlFile", dart.fn(() => urlFile, T.VoidToStringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "injectStyleFile", args);
      }).bind(this));
    }
    injectCSSFileFromAsset(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      return async.async(dart.void, (function* injectCSSFileFromAsset() {
        let source = (yield asset_bundle.rootBundle.loadString(assetFilePath));
        yield this.injectCSSCode({source: source});
      }).bind(this));
    }
    addJavaScriptHandler(opts) {
      let handlerName = opts && 'handlerName' in opts ? opts.handlerName : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (!!dart.test(in_app_webview_controller.javaScriptHandlerForbiddenNames[$contains](handlerName))) dart.assertFailed(null, I[15], 1467, 12, "!javaScriptHandlerForbiddenNames.contains(handlerName)");
      this.javaScriptHandlersMap[$_set](handlerName, callback);
    }
    removeJavaScriptHandler(opts) {
      let handlerName = opts && 'handlerName' in opts ? opts.handlerName : null;
      return this.javaScriptHandlersMap[$remove](handlerName);
    }
    takeScreenshot() {
      return async.async(T.Uint8ListL(), (function* takeScreenshot() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.Uint8ListL(), "takeScreenshot", args);
      }).bind(this));
    }
    setOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* setOptions() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("options", dart.fn(() => {
          let t12;
          t12 = options;
          return t12 == null ? null : t12.toMap();
        }, T.VoidToMapLOfStringL$dynamic()));
        yield this[_channel$].invokeMethod(dart.dynamic, "setOptions", args);
      }).bind(this));
    }
    getOptions() {
      return async.async(T.InAppWebViewGroupOptionsL(), (function* getOptions() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let options = (yield this[_channel$].invokeMethod(T.MapL(), "getOptions", args));
        if (options != null) {
          options = options[$cast](T.StringL(), dart.dynamic);
          return types.InAppWebViewGroupOptions.fromMap(T.MapLOfStringL$dynamic().as(options));
        }
        return null;
      }).bind(this));
    }
    getCopyBackForwardList() {
      return async.async(T.WebHistoryL(), (function* getCopyBackForwardList() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let result = (yield this[_channel$].invokeMethod(T.MapL(), "getCopyBackForwardList", args));
        result = result[$cast](T.StringL(), dart.dynamic);
        let historyListMap = T.ListL().as(result[$_get]("history"));
        historyListMap = historyListMap[$cast](T.LinkedHashMapL());
        let currentIndex = T.intL().as(result[$_get]("currentIndex"));
        let historyList = T.JSArrayOfWebHistoryItemL().of([]);
        for (let i = 0; i < dart.notNull(historyListMap[$length]); i = i + 1) {
          let historyItem = T.LinkedHashMapL().as(historyListMap[$_get](i));
          historyList[$add](new types.WebHistoryItem.new({originalUrl: T.StringL().as(historyItem[$_get]("originalUrl")), title: T.StringL().as(historyItem[$_get]("title")), url: T.StringL().as(historyItem[$_get]("url")), index: i, offset: i - dart.notNull(currentIndex)}));
        }
        return new types.WebHistory.new({list: historyList, currentIndex: currentIndex});
      }).bind(this));
    }
    clearCache() {
      return async.async(dart.void, (function* clearCache() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "clearCache", args);
      }).bind(this));
    }
    findAllAsync(opts) {
      let find = opts && 'find' in opts ? opts.find : null;
      return async.async(dart.void, (function* findAllAsync() {
        if (!(find != null)) dart.assertFailed(null, I[15], 1559, 12, "find != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("find", dart.fn(() => find, T.VoidToStringL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "findAllAsync", args);
      }).bind(this));
    }
    findNext(opts) {
      let forward = opts && 'forward' in opts ? opts.forward : null;
      return async.async(dart.void, (function* findNext() {
        if (!(forward != null)) dart.assertFailed(null, I[15], 1573, 12, "forward != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("forward", dart.fn(() => forward, T.VoidToboolL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "findNext", args);
      }).bind(this));
    }
    clearMatches() {
      return async.async(dart.void, (function* clearMatches() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "clearMatches", args);
      }).bind(this));
    }
    getTRexRunnerHtml() {
      return async.async(T.StringL(), function* getTRexRunnerHtml() {
        return yield asset_bundle.rootBundle.loadString("packages/flutter_inappwebview/t_rex_runner/t-rex.html");
      });
    }
    getTRexRunnerCss() {
      return async.async(T.StringL(), function* getTRexRunnerCss() {
        return yield asset_bundle.rootBundle.loadString("packages/flutter_inappwebview/t_rex_runner/t-rex.css");
      });
    }
    scrollTo(opts) {
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let animated = opts && 'animated' in opts ? opts.animated : false;
      return async.async(dart.void, (function* scrollTo() {
        if (!(x != null && y != null)) dart.assertFailed(null, I[15], 1614, 12, "x != null && y != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("x", dart.fn(() => x, T.VoidTointL()));
        args[$putIfAbsent]("y", dart.fn(() => y, T.VoidTointL()));
        args[$putIfAbsent]("animated", dart.fn(() => {
          let t12;
          t12 = animated;
          return t12 == null ? false : t12;
        }, T.VoidToboolL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "scrollTo", args);
      }).bind(this));
    }
    scrollBy(opts) {
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let animated = opts && 'animated' in opts ? opts.animated : false;
      return async.async(dart.void, (function* scrollBy() {
        if (!(x != null && y != null)) dart.assertFailed(null, I[15], 1635, 12, "x != null && y != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("x", dart.fn(() => x, T.VoidTointL()));
        args[$putIfAbsent]("y", dart.fn(() => y, T.VoidTointL()));
        args[$putIfAbsent]("animated", dart.fn(() => {
          let t12;
          t12 = animated;
          return t12 == null ? false : t12;
        }, T.VoidToboolL()));
        yield this[_channel$].invokeMethod(dart.dynamic, "scrollBy", args);
      }).bind(this));
    }
    pauseTimers() {
      return async.async(dart.void, (function* pauseTimers() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "pauseTimers", args);
      }).bind(this));
    }
    resumeTimers() {
      return async.async(dart.void, (function* resumeTimers() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "resumeTimers", args);
      }).bind(this));
    }
    printCurrentPage() {
      return async.async(dart.void, (function* printCurrentPage() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$].invokeMethod(dart.dynamic, "printCurrentPage", args);
      }).bind(this));
    }
    getContentHeight() {
      return async.async(T.intL(), (function* getContentHeight() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.intL(), "getContentHeight", args);
      }).bind(this));
    }
    zoomBy(zoomFactor) {
      return async.async(dart.void, (function* zoomBy() {
        if (!(!dart.test(io.Platform.isAndroid) || dart.test(io.Platform.isAndroid) && dart.notNull(zoomFactor) > 0.01 && dart.notNull(zoomFactor) <= 100.0)) dart.assertFailed(null, I[15], 1696, 12, "!Platform.isAndroid ||\n        (Platform.isAndroid && zoomFactor > 0.01 && zoomFactor <= 100.0)");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("zoomFactor", dart.fn(() => zoomFactor, T.VoidTodoubleL()));
        return yield this[_channel$].invokeMethod(dart.void, "zoomBy", args);
      }).bind(this));
    }
    getScale() {
      return async.async(T.doubleL(), (function* getScale() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.doubleL(), "getScale", args);
      }).bind(this));
    }
    getSelectedText() {
      return async.async(T.StringL(), (function* getSelectedText() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.StringL(), "getSelectedText", args);
      }).bind(this));
    }
    getHitTestResult() {
      return async.async(T.InAppWebViewHitTestResultL(), (function* getHitTestResult() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let hitTestResultMap = (yield this[_channel$].invokeMethod(dart.dynamic, "getHitTestResult", args));
        let type = types.InAppWebViewHitTestResultType.fromValue(T.intL().as(dart.dsend(dart.dsend(hitTestResultMap, '_get', ["type"]), 'toInt', [])));
        let extra = T.StringL().as(dart.dsend(hitTestResultMap, '_get', ["extra"]));
        return new types.InAppWebViewHitTestResult.new({type: type, extra: extra});
      }).bind(this));
    }
    clearFocus() {
      return async.async(dart.void, (function* clearFocus() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(dart.void, "clearFocus", args);
      }).bind(this));
    }
    setContextMenu(contextMenu) {
      return async.async(dart.void, (function* setContextMenu() {
        let t12;
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("contextMenu", dart.fn(() => {
          let t12;
          t12 = contextMenu;
          return t12 == null ? null : t12.toMap();
        }, T.VoidToMapLOfStringL$dynamic()));
        yield this[_channel$].invokeMethod(dart.dynamic, "setContextMenu", args);
        t12 = this[_inAppBrowser];
        t12 == null ? null : t12.contextMenu = contextMenu;
      }).bind(this));
    }
    requestFocusNodeHref() {
      return async.async(T.RequestFocusNodeHrefResultL(), (function* requestFocusNodeHref() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let result = (yield this[_channel$].invokeMethod(T.MapL(), "requestFocusNodeHref", args));
        return result != null ? new types.RequestFocusNodeHrefResult.new({url: T.StringL().as(result[$_get]("url")), title: T.StringL().as(result[$_get]("title")), src: T.StringL().as(result[$_get]("src"))}) : null;
      }).bind(this));
    }
    requestImageRef() {
      return async.async(T.RequestImageRefResultL(), (function* requestImageRef() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let result = (yield this[_channel$].invokeMethod(T.MapL(), "requestImageRef", args));
        return result != null ? new types.RequestImageRefResult.new({url: T.StringL().as(result[$_get]("url"))}) : null;
      }).bind(this));
    }
    getMetaTags() {
      return async.async(T.ListLOfMetaTagL(), (function* getMetaTags() {
        let t12;
        let metaTags = T.JSArrayOfMetaTagL().of([]);
        let metaTagList = T.ListLOfMapL().as((t12 = (yield this.evaluateJavascript({source: "(function() {\n  var metaTags = [];\n  var metaTagNodes = document.head.getElementsByTagName('meta');\n  for (var i = 0; i < metaTagNodes.length; i++) {\n    var metaTagNode = metaTagNodes[i];\n    \n    var otherAttributes = metaTagNode.getAttributeNames();\n    var nameIndex = otherAttributes.indexOf(\"name\");\n    if (nameIndex !== -1) otherAttributes.splice(nameIndex, 1);\n    var contentIndex = otherAttributes.indexOf(\"content\");\n    if (contentIndex !== -1) otherAttributes.splice(contentIndex, 1);\n    \n    var attrs = [];\n    for (var j = 0; j < otherAttributes.length; j++) {\n      var otherAttribute = otherAttributes[j];\n      attrs.push(\n        {\n          name: otherAttribute,\n          value: metaTagNode.getAttribute(otherAttribute)\n        }\n      );\n    }\n\n    metaTags.push(\n      {\n        name: metaTagNode.name,\n        content: metaTagNode.content,\n        attrs: attrs\n      }\n    );\n  }\n  return metaTags;\n})();\n    "})), t12 == null ? null : dart.dgsend(t12, [T.MapL()], 'cast', [])));
        if (metaTagList == null) {
          return metaTags;
        }
        for (let metaTag of metaTagList) {
          let attrs = T.JSArrayOfMetaTagAttributeL().of([]);
          for (let metaTagAttr of T.IterableL().as(metaTag[$_get]("attrs"))) {
            attrs[$add](new types.MetaTagAttribute.new({name: T.StringL().as(dart.dsend(metaTagAttr, '_get', ["name"])), value: T.StringL().as(dart.dsend(metaTagAttr, '_get', ["value"]))}));
          }
          metaTags[$add](new types.MetaTag.new({name: T.StringL().as(metaTag[$_get]("name")), content: T.StringL().as(metaTag[$_get]("content")), attrs: attrs}));
        }
        return metaTags;
      }).bind(this));
    }
    getMetaThemeColor() {
      return async.async(T.ColorL(), (function* getMetaThemeColor() {
        let metaTags = (yield this.getMetaTags());
        let metaTagThemeColor = null;
        for (let metaTag of metaTags) {
          if (metaTag.name === "theme-color") {
            metaTagThemeColor = metaTag;
            break;
          }
        }
        if (metaTagThemeColor == null) {
          return null;
        }
        let colorValue = metaTagThemeColor.content;
        return util.Util.convertColorFromStringRepresentation(colorValue);
      }).bind(this));
    }
    getScrollX() {
      return async.async(T.intL(), (function* getScrollX() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.intL(), "getScrollX", args);
      }).bind(this));
    }
    getScrollY() {
      return async.async(T.intL(), (function* getScrollY() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$].invokeMethod(T.intL(), "getScrollY", args);
      }).bind(this));
    }
    getCertificate() {
      return async.async(T.SslCertificateL(), (function* getCertificate() {
        let t12, t12$, t12$0, t12$1, t12$2, t12$3, t12$4, t12$5, t12$6;
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let sslCertificateMap = T.MapLOfStringL$dynamic().as((t12 = (yield this[_channel$].invokeMethod(dart.dynamic, "getCertificate", args)), t12 == null ? null : dart.dgsend(t12, [T.StringL(), dart.dynamic], 'cast', [])));
        if (sslCertificateMap != null) {
          if (dart.test(io.Platform.isIOS)) {
            try {
              let x509certificate = x509_certificate.X509Certificate.fromData({data: T.Uint8ListL().as(sslCertificateMap[$_get]("x509Certificate"))});
              return new types.SslCertificate.new({issuedBy: new types.SslCertificateDName.new({CName: (t12$ = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t12$ == null ? "" : t12$), DName: (t12$0 = x509certificate.issuerDistinguishedName, t12$0 == null ? "" : t12$0), OName: (t12$1 = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t12$1 == null ? "" : t12$1), UName: (t12$2 = x509certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t12$2 == null ? "" : t12$2)}), issuedTo: new types.SslCertificateDName.new({CName: (t12$3 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t12$3 == null ? "" : t12$3), DName: (t12$4 = x509certificate.subjectDistinguishedName, t12$4 == null ? "" : t12$4), OName: (t12$5 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t12$5 == null ? "" : t12$5), UName: (t12$6 = x509certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t12$6 == null ? "" : t12$6)}), validNotAfterDate: x509certificate.notAfter, validNotBeforeDate: x509certificate.notBefore, x509Certificate: x509certificate});
            } catch (e$) {
              let e = dart.getThrown(e$);
              let stacktrace = dart.stackTrace(e$);
              core.print(e);
              core.print(stacktrace);
              return null;
            }
          } else {
            return types.SslCertificate.fromMap(sslCertificateMap);
          }
        }
        return null;
      }).bind(this));
    }
    static getDefaultUserAgent() {
      return async.async(T.StringL(), function* getDefaultUserAgent() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield in_app_webview_controller.InAppWebViewController._staticChannel.invokeMethod(T.StringL(), "getDefaultUserAgent", args);
      });
    }
  };
  (in_app_webview_controller.InAppWebViewController.new = function(id, webview) {
    this[_webview] = null;
    this[_channel$] = null;
    this[javaScriptHandlersMap] = new (T.IdentityMapOfStringL$ListLToLdynamic()).new();
    this[_isOpened$] = false;
    this[_id] = null;
    this[_inAppBrowserUuid] = null;
    this[_inAppBrowser] = null;
    this[android$] = null;
    this[ios$] = null;
    this[webStorage] = null;
    this[_id] = id;
    this[_channel$] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_" + dart.str(id));
    this[_channel$].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[_webview] = webview;
    this.android = new in_app_webview_controller.AndroidInAppWebViewController.new(this);
    this.ios = new in_app_webview_controller.IOSInAppWebViewController.new(this);
    this.webStorage = new web_storage.WebStorage.new({localStorage: new web_storage.LocalStorage.new(this), sessionStorage: new web_storage.SessionStorage.new(this)});
  }).prototype = in_app_webview_controller.InAppWebViewController.prototype;
  (in_app_webview_controller.InAppWebViewController.fromInAppBrowser = function(uuid, channel, inAppBrowser) {
    this[_webview] = null;
    this[_channel$] = null;
    this[javaScriptHandlersMap] = new (T.IdentityMapOfStringL$ListLToLdynamic()).new();
    this[_isOpened$] = false;
    this[_id] = null;
    this[_inAppBrowserUuid] = null;
    this[_inAppBrowser] = null;
    this[android$] = null;
    this[ios$] = null;
    this[webStorage] = null;
    this[_inAppBrowserUuid] = uuid;
    this[_channel$] = channel;
    this[_inAppBrowser] = inAppBrowser;
  }).prototype = in_app_webview_controller.InAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller.InAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller.InAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller.InAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller.InAppWebViewController.__proto__),
    handleMethod: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall)]),
    getUrl: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getTitle: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getProgress: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getHtml: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getFavicons: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.Favicon))))), []),
    [_isUrlAbsolute]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_createFavicons]: dart.fnType(dart.legacy(core.List$(dart.legacy(types.Favicon))), [dart.legacy(core.Uri), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.bool)]),
    loadUrl: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), url: dart.legacy(core.String)}, {}),
    postUrl: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {postData: dart.legacy(typed_data.Uint8List), url: dart.legacy(core.String)}, {}),
    loadData: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {androidHistoryUrl: dart.legacy(core.String), baseUrl: dart.legacy(core.String), data: dart.legacy(core.String), encoding: dart.legacy(core.String), mimeType: dart.legacy(core.String)}, {}),
    loadFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {assetFilePath: dart.legacy(core.String), headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {}),
    reload: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    goBack: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    canGoBack: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    goForward: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    canGoForward: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    goBackOrForward: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {steps: dart.legacy(core.int)}, {}),
    canGoBackOrForward: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {steps: dart.legacy(core.int)}, {}),
    goTo: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {historyItem: dart.legacy(types.WebHistoryItem)}, {}),
    isLoading: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    stopLoading: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    evaluateJavascript: dart.fnType(dart.legacy(async.Future), [], {source: dart.legacy(core.String)}, {}),
    injectJavascriptFileFromUrl: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {urlFile: dart.legacy(core.String)}, {}),
    injectJavascriptFileFromAsset: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {assetFilePath: dart.legacy(core.String)}, {}),
    injectCSSCode: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {source: dart.legacy(core.String)}, {}),
    injectCSSFileFromUrl: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {urlFile: dart.legacy(core.String)}, {}),
    injectCSSFileFromAsset: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {assetFilePath: dart.legacy(core.String)}, {}),
    addJavaScriptHandler: dart.fnType(dart.void, [], {callback: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.List)])), handlerName: dart.legacy(core.String)}, {}),
    removeJavaScriptHandler: dart.fnType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.List)])), [], {handlerName: dart.legacy(core.String)}, {}),
    takeScreenshot: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), []),
    setOptions: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {options: dart.legacy(types.InAppWebViewGroupOptions)}, {}),
    getOptions: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.InAppWebViewGroupOptions))), []),
    getCopyBackForwardList: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebHistory))), []),
    clearCache: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    findAllAsync: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {find: dart.legacy(core.String)}, {}),
    findNext: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {forward: dart.legacy(core.bool)}, {}),
    clearMatches: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    getTRexRunnerHtml: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getTRexRunnerCss: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    scrollTo: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {animated: dart.legacy(core.bool), x: dart.legacy(core.int), y: dart.legacy(core.int)}, {}),
    scrollBy: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {animated: dart.legacy(core.bool), x: dart.legacy(core.int), y: dart.legacy(core.int)}, {}),
    pauseTimers: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    resumeTimers: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    printCurrentPage: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    getContentHeight: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    zoomBy: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.double)]),
    getScale: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.double))), []),
    getSelectedText: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getHitTestResult: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.InAppWebViewHitTestResult))), []),
    clearFocus: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    setContextMenu: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(context_menu.ContextMenu)]),
    requestFocusNodeHref: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.RequestFocusNodeHrefResult))), []),
    requestImageRef: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.RequestImageRefResult))), []),
    getMetaTags: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(types.MetaTag))))), []),
    getMetaThemeColor: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Color))), []),
    getScrollX: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getScrollY: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getCertificate: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.SslCertificate))), [])
  }));
  dart.setLibraryUri(in_app_webview_controller.InAppWebViewController, I[16]);
  dart.setFieldSignature(in_app_webview_controller.InAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller.InAppWebViewController.__proto__),
    [_webview]: dart.fieldType(dart.legacy(webview.WebView)),
    [_channel$]: dart.fieldType(dart.legacy(platform_channel.MethodChannel)),
    javaScriptHandlersMap: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.List)]))))),
    [_isOpened$]: dart.fieldType(dart.legacy(core.bool)),
    [_id]: dart.fieldType(dart.dynamic),
    [_inAppBrowserUuid]: dart.fieldType(dart.legacy(core.String)),
    [_inAppBrowser]: dart.fieldType(dart.legacy(in_app_browser.InAppBrowser)),
    android: dart.fieldType(dart.legacy(in_app_webview_controller.AndroidInAppWebViewController)),
    ios: dart.fieldType(dart.legacy(in_app_webview_controller.IOSInAppWebViewController)),
    webStorage: dart.fieldType(dart.legacy(web_storage.WebStorage))
  }));
  dart.defineLazy(in_app_webview_controller.InAppWebViewController, {
    /*in_app_webview_controller.InAppWebViewController._staticChannel*/get _staticChannel() {
      return new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_static");
    },
    set _staticChannel(_) {}
  }, true);
  var _controller$0 = dart.privateName(in_app_webview_controller, "_controller");
  in_app_webview_controller.AndroidInAppWebViewController = class AndroidInAppWebViewController extends core.Object {
    startSafeBrowsing() {
      return async.async(T.boolL(), (function* startSafeBrowsing() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "startSafeBrowsing", args);
      }).bind(this));
    }
    clearSslPreferences() {
      return async.async(dart.void, (function* clearSslPreferences() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_controller$0][_channel$].invokeMethod(dart.dynamic, "clearSslPreferences", args);
      }).bind(this));
    }
    pause() {
      return async.async(dart.void, (function* pause() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_controller$0][_channel$].invokeMethod(dart.dynamic, "pause", args);
      }).bind(this));
    }
    resume() {
      return async.async(dart.void, (function* resume() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_controller$0][_channel$].invokeMethod(dart.dynamic, "resume", args);
      }).bind(this));
    }
    getOriginalUrl() {
      return async.async(T.StringL(), (function* getOriginalUrl() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(T.StringL(), "getOriginalUrl", args);
      }).bind(this));
    }
    pageDown(opts) {
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      return async.async(T.boolL(), (function* pageDown() {
        if (!(bottom != null)) dart.assertFailed(null, I[15], 2030, 12, "bottom != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("bottom", dart.fn(() => bottom, T.VoidToboolL()));
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "pageDown", args);
      }).bind(this));
    }
    pageUp(opts) {
      let top = opts && 'top' in opts ? opts.top : null;
      return async.async(T.boolL(), (function* pageUp() {
        if (!(top != null)) dart.assertFailed(null, I[15], 2043, 12, "top != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("top", dart.fn(() => top, T.VoidToboolL()));
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "pageUp", args);
      }).bind(this));
    }
    saveWebArchive(opts) {
      let basename = opts && 'basename' in opts ? opts.basename : null;
      let autoname = opts && 'autoname' in opts ? opts.autoname : null;
      return async.async(T.StringL(), (function* saveWebArchive() {
        if (!(basename != null && autoname != null)) dart.assertFailed(null, I[15], 2060, 12, "basename != null && autoname != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("basename", dart.fn(() => basename, T.VoidToStringL()));
        args[$putIfAbsent]("autoname", dart.fn(() => autoname, T.VoidToboolL()));
        return yield this[_controller$0][_channel$].invokeMethod(T.StringL(), "saveWebArchive", args);
      }).bind(this));
    }
    zoomIn() {
      return async.async(T.boolL(), (function* zoomIn() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "zoomIn", args);
      }).bind(this));
    }
    zoomOut() {
      return async.async(T.boolL(), (function* zoomOut() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "zoomOut", args);
      }).bind(this));
    }
    clearHistory() {
      return async.async(dart.void, (function* clearHistory() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(dart.void, "clearHistory", args);
      }).bind(this));
    }
    static clearClientCertPreferences() {
      return async.async(dart.void, function* clearClientCertPreferences() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield in_app_webview_controller.InAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "clearClientCertPreferences", args);
      });
    }
    static getSafeBrowsingPrivacyPolicyUrl() {
      return async.async(T.StringL(), function* getSafeBrowsingPrivacyPolicyUrl() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield in_app_webview_controller.InAppWebViewController._staticChannel.invokeMethod(T.StringL(), "getSafeBrowsingPrivacyPolicyUrl", args);
      });
    }
    static setSafeBrowsingWhitelist(opts) {
      let hosts = opts && 'hosts' in opts ? opts.hosts : null;
      return async.async(T.boolL(), function* setSafeBrowsingWhitelist() {
        if (!(hosts != null)) dart.assertFailed(null, I[15], 2138, 12, "hosts != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("hosts", dart.fn(() => hosts, T.VoidToListLOfStringL()));
        return yield in_app_webview_controller.InAppWebViewController._staticChannel.invokeMethod(T.boolL(), "setSafeBrowsingWhitelist", args);
      });
    }
    static getCurrentWebViewPackage() {
      return async.async(T.AndroidWebViewPackageInfoL(), function* getCurrentWebViewPackage() {
        let t13;
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let packageInfo = T.MapLOfStringL$dynamic().as((t13 = (yield in_app_webview_controller.InAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "getCurrentWebViewPackage", args)), t13 == null ? null : dart.dgsend(t13, [T.StringL(), dart.dynamic], 'cast', [])));
        return types.AndroidWebViewPackageInfo.fromMap(packageInfo);
      });
    }
  };
  (in_app_webview_controller.AndroidInAppWebViewController.new = function(controller) {
    this[_controller$0] = null;
    if (!(controller != null)) dart.assertFailed(null, I[15], 1968, 12, "controller != null");
    this[_controller$0] = controller;
  }).prototype = in_app_webview_controller.AndroidInAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller.AndroidInAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller.AndroidInAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller.AndroidInAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller.AndroidInAppWebViewController.__proto__),
    startSafeBrowsing: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    clearSslPreferences: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    pause: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    resume: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    getOriginalUrl: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    pageDown: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {bottom: dart.legacy(core.bool)}, {}),
    pageUp: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {top: dart.legacy(core.bool)}, {}),
    saveWebArchive: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {autoname: dart.legacy(core.bool), basename: dart.legacy(core.String)}, {}),
    zoomIn: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    zoomOut: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    clearHistory: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(in_app_webview_controller.AndroidInAppWebViewController, I[16]);
  dart.setFieldSignature(in_app_webview_controller.AndroidInAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller.AndroidInAppWebViewController.__proto__),
    [_controller$0]: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController))
  }));
  in_app_webview_controller.IOSInAppWebViewController = class IOSInAppWebViewController extends core.Object {
    reloadFromOrigin() {
      return async.async(dart.void, (function* reloadFromOrigin() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_controller$0][_channel$].invokeMethod(dart.dynamic, "reloadFromOrigin", args);
      }).bind(this));
    }
    hasOnlySecureContent() {
      return async.async(T.boolL(), (function* hasOnlySecureContent() {
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_controller$0][_channel$].invokeMethod(T.boolL(), "hasOnlySecureContent", args);
      }).bind(this));
    }
  };
  (in_app_webview_controller.IOSInAppWebViewController.new = function(controller) {
    this[_controller$0] = null;
    if (!(controller != null)) dart.assertFailed(null, I[15], 2171, 12, "controller != null");
    this[_controller$0] = controller;
  }).prototype = in_app_webview_controller.IOSInAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller.IOSInAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller.IOSInAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    reloadFromOrigin: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    hasOnlySecureContent: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [])
  }));
  dart.setLibraryUri(in_app_webview_controller.IOSInAppWebViewController, I[16]);
  dart.setFieldSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    [_controller$0]: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController))
  }));
  dart.defineLazy(in_app_webview_controller, {
    /*in_app_webview_controller.javaScriptHandlerForbiddenNames*/get javaScriptHandlerForbiddenNames() {
      return C[47] || CT.C47;
    }
  }, true);
  var windowId$1 = dart.privateName(webview, "WebView.windowId");
  var onWebViewCreated$1 = dart.privateName(webview, "WebView.onWebViewCreated");
  var onLoadStart$1 = dart.privateName(webview, "WebView.onLoadStart");
  var onLoadStop$1 = dart.privateName(webview, "WebView.onLoadStop");
  var onLoadError$1 = dart.privateName(webview, "WebView.onLoadError");
  var onLoadHttpError$1 = dart.privateName(webview, "WebView.onLoadHttpError");
  var onProgressChanged$1 = dart.privateName(webview, "WebView.onProgressChanged");
  var onConsoleMessage$1 = dart.privateName(webview, "WebView.onConsoleMessage");
  var shouldOverrideUrlLoading$1 = dart.privateName(webview, "WebView.shouldOverrideUrlLoading");
  var onLoadResource$1 = dart.privateName(webview, "WebView.onLoadResource");
  var onScrollChanged$1 = dart.privateName(webview, "WebView.onScrollChanged");
  var onDownloadStart$1 = dart.privateName(webview, "WebView.onDownloadStart");
  var onLoadResourceCustomScheme$1 = dart.privateName(webview, "WebView.onLoadResourceCustomScheme");
  var onCreateWindow$1 = dart.privateName(webview, "WebView.onCreateWindow");
  var onCloseWindow$1 = dart.privateName(webview, "WebView.onCloseWindow");
  var onWindowFocus$1 = dart.privateName(webview, "WebView.onWindowFocus");
  var onWindowBlur$1 = dart.privateName(webview, "WebView.onWindowBlur");
  var onJsAlert$1 = dart.privateName(webview, "WebView.onJsAlert");
  var onJsConfirm$1 = dart.privateName(webview, "WebView.onJsConfirm");
  var onJsPrompt$1 = dart.privateName(webview, "WebView.onJsPrompt");
  var onReceivedHttpAuthRequest$1 = dart.privateName(webview, "WebView.onReceivedHttpAuthRequest");
  var onReceivedServerTrustAuthRequest$1 = dart.privateName(webview, "WebView.onReceivedServerTrustAuthRequest");
  var onReceivedClientCertRequest$1 = dart.privateName(webview, "WebView.onReceivedClientCertRequest");
  var onFindResultReceived$1 = dart.privateName(webview, "WebView.onFindResultReceived");
  var shouldInterceptAjaxRequest$1 = dart.privateName(webview, "WebView.shouldInterceptAjaxRequest");
  var onAjaxReadyStateChange$1 = dart.privateName(webview, "WebView.onAjaxReadyStateChange");
  var onAjaxProgress$1 = dart.privateName(webview, "WebView.onAjaxProgress");
  var shouldInterceptFetchRequest$1 = dart.privateName(webview, "WebView.shouldInterceptFetchRequest");
  var onUpdateVisitedHistory$1 = dart.privateName(webview, "WebView.onUpdateVisitedHistory");
  var onPrint$1 = dart.privateName(webview, "WebView.onPrint");
  var onLongPressHitTestResult$1 = dart.privateName(webview, "WebView.onLongPressHitTestResult");
  var onEnterFullscreen$1 = dart.privateName(webview, "WebView.onEnterFullscreen");
  var onExitFullscreen$1 = dart.privateName(webview, "WebView.onExitFullscreen");
  var onPageCommitVisible$1 = dart.privateName(webview, "WebView.onPageCommitVisible");
  var onTitleChanged$1 = dart.privateName(webview, "WebView.onTitleChanged");
  var androidOnSafeBrowsingHit$1 = dart.privateName(webview, "WebView.androidOnSafeBrowsingHit");
  var androidOnPermissionRequest$1 = dart.privateName(webview, "WebView.androidOnPermissionRequest");
  var androidOnGeolocationPermissionsShowPrompt$1 = dart.privateName(webview, "WebView.androidOnGeolocationPermissionsShowPrompt");
  var androidOnGeolocationPermissionsHidePrompt$1 = dart.privateName(webview, "WebView.androidOnGeolocationPermissionsHidePrompt");
  var androidShouldInterceptRequest$1 = dart.privateName(webview, "WebView.androidShouldInterceptRequest");
  var androidOnRenderProcessUnresponsive$1 = dart.privateName(webview, "WebView.androidOnRenderProcessUnresponsive");
  var androidOnRenderProcessResponsive$1 = dart.privateName(webview, "WebView.androidOnRenderProcessResponsive");
  var androidOnRenderProcessGone$1 = dart.privateName(webview, "WebView.androidOnRenderProcessGone");
  var androidOnFormResubmission$1 = dart.privateName(webview, "WebView.androidOnFormResubmission");
  var androidOnScaleChanged$1 = dart.privateName(webview, "WebView.androidOnScaleChanged");
  var androidOnRequestFocus$1 = dart.privateName(webview, "WebView.androidOnRequestFocus");
  var androidOnReceivedIcon$1 = dart.privateName(webview, "WebView.androidOnReceivedIcon");
  var androidOnReceivedTouchIconUrl$1 = dart.privateName(webview, "WebView.androidOnReceivedTouchIconUrl");
  var androidOnJsBeforeUnload$1 = dart.privateName(webview, "WebView.androidOnJsBeforeUnload");
  var androidOnReceivedLoginRequest$1 = dart.privateName(webview, "WebView.androidOnReceivedLoginRequest");
  var iosOnWebContentProcessDidTerminate$1 = dart.privateName(webview, "WebView.iosOnWebContentProcessDidTerminate");
  var iosOnDidReceiveServerRedirectForProvisionalNavigation$1 = dart.privateName(webview, "WebView.iosOnDidReceiveServerRedirectForProvisionalNavigation");
  var initialUrl$1 = dart.privateName(webview, "WebView.initialUrl");
  var initialFile$1 = dart.privateName(webview, "WebView.initialFile");
  var initialData$1 = dart.privateName(webview, "WebView.initialData");
  var initialHeaders$1 = dart.privateName(webview, "WebView.initialHeaders");
  var initialOptions$1 = dart.privateName(webview, "WebView.initialOptions");
  var contextMenu$1 = dart.privateName(webview, "WebView.contextMenu");
  webview.WebView = class WebView extends core.Object {
    get windowId() {
      return this[windowId$1];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get onWebViewCreated() {
      return this[onWebViewCreated$1];
    }
    set onWebViewCreated(value) {
      super.onWebViewCreated = value;
    }
    get onLoadStart() {
      return this[onLoadStart$1];
    }
    set onLoadStart(value) {
      super.onLoadStart = value;
    }
    get onLoadStop() {
      return this[onLoadStop$1];
    }
    set onLoadStop(value) {
      super.onLoadStop = value;
    }
    get onLoadError() {
      return this[onLoadError$1];
    }
    set onLoadError(value) {
      super.onLoadError = value;
    }
    get onLoadHttpError() {
      return this[onLoadHttpError$1];
    }
    set onLoadHttpError(value) {
      super.onLoadHttpError = value;
    }
    get onProgressChanged() {
      return this[onProgressChanged$1];
    }
    set onProgressChanged(value) {
      super.onProgressChanged = value;
    }
    get onConsoleMessage() {
      return this[onConsoleMessage$1];
    }
    set onConsoleMessage(value) {
      super.onConsoleMessage = value;
    }
    get shouldOverrideUrlLoading() {
      return this[shouldOverrideUrlLoading$1];
    }
    set shouldOverrideUrlLoading(value) {
      super.shouldOverrideUrlLoading = value;
    }
    get onLoadResource() {
      return this[onLoadResource$1];
    }
    set onLoadResource(value) {
      super.onLoadResource = value;
    }
    get onScrollChanged() {
      return this[onScrollChanged$1];
    }
    set onScrollChanged(value) {
      super.onScrollChanged = value;
    }
    get onDownloadStart() {
      return this[onDownloadStart$1];
    }
    set onDownloadStart(value) {
      super.onDownloadStart = value;
    }
    get onLoadResourceCustomScheme() {
      return this[onLoadResourceCustomScheme$1];
    }
    set onLoadResourceCustomScheme(value) {
      super.onLoadResourceCustomScheme = value;
    }
    get onCreateWindow() {
      return this[onCreateWindow$1];
    }
    set onCreateWindow(value) {
      super.onCreateWindow = value;
    }
    get onCloseWindow() {
      return this[onCloseWindow$1];
    }
    set onCloseWindow(value) {
      super.onCloseWindow = value;
    }
    get onWindowFocus() {
      return this[onWindowFocus$1];
    }
    set onWindowFocus(value) {
      super.onWindowFocus = value;
    }
    get onWindowBlur() {
      return this[onWindowBlur$1];
    }
    set onWindowBlur(value) {
      super.onWindowBlur = value;
    }
    get onJsAlert() {
      return this[onJsAlert$1];
    }
    set onJsAlert(value) {
      super.onJsAlert = value;
    }
    get onJsConfirm() {
      return this[onJsConfirm$1];
    }
    set onJsConfirm(value) {
      super.onJsConfirm = value;
    }
    get onJsPrompt() {
      return this[onJsPrompt$1];
    }
    set onJsPrompt(value) {
      super.onJsPrompt = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[onReceivedHttpAuthRequest$1];
    }
    set onReceivedHttpAuthRequest(value) {
      super.onReceivedHttpAuthRequest = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[onReceivedServerTrustAuthRequest$1];
    }
    set onReceivedServerTrustAuthRequest(value) {
      super.onReceivedServerTrustAuthRequest = value;
    }
    get onReceivedClientCertRequest() {
      return this[onReceivedClientCertRequest$1];
    }
    set onReceivedClientCertRequest(value) {
      super.onReceivedClientCertRequest = value;
    }
    get onFindResultReceived() {
      return this[onFindResultReceived$1];
    }
    set onFindResultReceived(value) {
      super.onFindResultReceived = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[shouldInterceptAjaxRequest$1];
    }
    set shouldInterceptAjaxRequest(value) {
      super.shouldInterceptAjaxRequest = value;
    }
    get onAjaxReadyStateChange() {
      return this[onAjaxReadyStateChange$1];
    }
    set onAjaxReadyStateChange(value) {
      super.onAjaxReadyStateChange = value;
    }
    get onAjaxProgress() {
      return this[onAjaxProgress$1];
    }
    set onAjaxProgress(value) {
      super.onAjaxProgress = value;
    }
    get shouldInterceptFetchRequest() {
      return this[shouldInterceptFetchRequest$1];
    }
    set shouldInterceptFetchRequest(value) {
      super.shouldInterceptFetchRequest = value;
    }
    get onUpdateVisitedHistory() {
      return this[onUpdateVisitedHistory$1];
    }
    set onUpdateVisitedHistory(value) {
      super.onUpdateVisitedHistory = value;
    }
    get onPrint() {
      return this[onPrint$1];
    }
    set onPrint(value) {
      super.onPrint = value;
    }
    get onLongPressHitTestResult() {
      return this[onLongPressHitTestResult$1];
    }
    set onLongPressHitTestResult(value) {
      super.onLongPressHitTestResult = value;
    }
    get onEnterFullscreen() {
      return this[onEnterFullscreen$1];
    }
    set onEnterFullscreen(value) {
      super.onEnterFullscreen = value;
    }
    get onExitFullscreen() {
      return this[onExitFullscreen$1];
    }
    set onExitFullscreen(value) {
      super.onExitFullscreen = value;
    }
    get onPageCommitVisible() {
      return this[onPageCommitVisible$1];
    }
    set onPageCommitVisible(value) {
      super.onPageCommitVisible = value;
    }
    get onTitleChanged() {
      return this[onTitleChanged$1];
    }
    set onTitleChanged(value) {
      super.onTitleChanged = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[androidOnSafeBrowsingHit$1];
    }
    set androidOnSafeBrowsingHit(value) {
      super.androidOnSafeBrowsingHit = value;
    }
    get androidOnPermissionRequest() {
      return this[androidOnPermissionRequest$1];
    }
    set androidOnPermissionRequest(value) {
      super.androidOnPermissionRequest = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[androidOnGeolocationPermissionsShowPrompt$1];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      super.androidOnGeolocationPermissionsShowPrompt = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[androidOnGeolocationPermissionsHidePrompt$1];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      super.androidOnGeolocationPermissionsHidePrompt = value;
    }
    get androidShouldInterceptRequest() {
      return this[androidShouldInterceptRequest$1];
    }
    set androidShouldInterceptRequest(value) {
      super.androidShouldInterceptRequest = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[androidOnRenderProcessUnresponsive$1];
    }
    set androidOnRenderProcessUnresponsive(value) {
      super.androidOnRenderProcessUnresponsive = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[androidOnRenderProcessResponsive$1];
    }
    set androidOnRenderProcessResponsive(value) {
      super.androidOnRenderProcessResponsive = value;
    }
    get androidOnRenderProcessGone() {
      return this[androidOnRenderProcessGone$1];
    }
    set androidOnRenderProcessGone(value) {
      super.androidOnRenderProcessGone = value;
    }
    get androidOnFormResubmission() {
      return this[androidOnFormResubmission$1];
    }
    set androidOnFormResubmission(value) {
      super.androidOnFormResubmission = value;
    }
    get androidOnScaleChanged() {
      return this[androidOnScaleChanged$1];
    }
    set androidOnScaleChanged(value) {
      super.androidOnScaleChanged = value;
    }
    get androidOnRequestFocus() {
      return this[androidOnRequestFocus$1];
    }
    set androidOnRequestFocus(value) {
      super.androidOnRequestFocus = value;
    }
    get androidOnReceivedIcon() {
      return this[androidOnReceivedIcon$1];
    }
    set androidOnReceivedIcon(value) {
      super.androidOnReceivedIcon = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[androidOnReceivedTouchIconUrl$1];
    }
    set androidOnReceivedTouchIconUrl(value) {
      super.androidOnReceivedTouchIconUrl = value;
    }
    get androidOnJsBeforeUnload() {
      return this[androidOnJsBeforeUnload$1];
    }
    set androidOnJsBeforeUnload(value) {
      super.androidOnJsBeforeUnload = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[androidOnReceivedLoginRequest$1];
    }
    set androidOnReceivedLoginRequest(value) {
      super.androidOnReceivedLoginRequest = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[iosOnWebContentProcessDidTerminate$1];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      super.iosOnWebContentProcessDidTerminate = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[iosOnDidReceiveServerRedirectForProvisionalNavigation$1];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      super.iosOnDidReceiveServerRedirectForProvisionalNavigation = value;
    }
    get initialUrl() {
      return this[initialUrl$1];
    }
    set initialUrl(value) {
      super.initialUrl = value;
    }
    get initialFile() {
      return this[initialFile$1];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialData() {
      return this[initialData$1];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialHeaders() {
      return this[initialHeaders$1];
    }
    set initialHeaders(value) {
      super.initialHeaders = value;
    }
    get initialOptions() {
      return this[initialOptions$1];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get contextMenu() {
      return this[contextMenu$1];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
  };
  (webview.WebView.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnRequestFocus = opts && 'androidOnRequestFocus' in opts ? opts.androidOnRequestFocus : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let initialUrl = opts && 'initialUrl' in opts ? opts.initialUrl : null;
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : null;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    this[windowId$1] = windowId;
    this[onWebViewCreated$1] = onWebViewCreated;
    this[onLoadStart$1] = onLoadStart;
    this[onLoadStop$1] = onLoadStop;
    this[onLoadError$1] = onLoadError;
    this[onLoadHttpError$1] = onLoadHttpError;
    this[onProgressChanged$1] = onProgressChanged;
    this[onConsoleMessage$1] = onConsoleMessage;
    this[shouldOverrideUrlLoading$1] = shouldOverrideUrlLoading;
    this[onLoadResource$1] = onLoadResource;
    this[onScrollChanged$1] = onScrollChanged;
    this[onDownloadStart$1] = onDownloadStart;
    this[onLoadResourceCustomScheme$1] = onLoadResourceCustomScheme;
    this[onCreateWindow$1] = onCreateWindow;
    this[onCloseWindow$1] = onCloseWindow;
    this[onJsAlert$1] = onJsAlert;
    this[onJsConfirm$1] = onJsConfirm;
    this[onJsPrompt$1] = onJsPrompt;
    this[onReceivedHttpAuthRequest$1] = onReceivedHttpAuthRequest;
    this[onReceivedServerTrustAuthRequest$1] = onReceivedServerTrustAuthRequest;
    this[onReceivedClientCertRequest$1] = onReceivedClientCertRequest;
    this[onFindResultReceived$1] = onFindResultReceived;
    this[shouldInterceptAjaxRequest$1] = shouldInterceptAjaxRequest;
    this[onAjaxReadyStateChange$1] = onAjaxReadyStateChange;
    this[onAjaxProgress$1] = onAjaxProgress;
    this[shouldInterceptFetchRequest$1] = shouldInterceptFetchRequest;
    this[onUpdateVisitedHistory$1] = onUpdateVisitedHistory;
    this[onPrint$1] = onPrint;
    this[onLongPressHitTestResult$1] = onLongPressHitTestResult;
    this[onEnterFullscreen$1] = onEnterFullscreen;
    this[onExitFullscreen$1] = onExitFullscreen;
    this[onPageCommitVisible$1] = onPageCommitVisible;
    this[onTitleChanged$1] = onTitleChanged;
    this[onWindowFocus$1] = onWindowFocus;
    this[onWindowBlur$1] = onWindowBlur;
    this[androidOnSafeBrowsingHit$1] = androidOnSafeBrowsingHit;
    this[androidOnPermissionRequest$1] = androidOnPermissionRequest;
    this[androidOnGeolocationPermissionsShowPrompt$1] = androidOnGeolocationPermissionsShowPrompt;
    this[androidOnGeolocationPermissionsHidePrompt$1] = androidOnGeolocationPermissionsHidePrompt;
    this[androidShouldInterceptRequest$1] = androidShouldInterceptRequest;
    this[androidOnRenderProcessGone$1] = androidOnRenderProcessGone;
    this[androidOnRenderProcessResponsive$1] = androidOnRenderProcessResponsive;
    this[androidOnRenderProcessUnresponsive$1] = androidOnRenderProcessUnresponsive;
    this[androidOnFormResubmission$1] = androidOnFormResubmission;
    this[androidOnScaleChanged$1] = androidOnScaleChanged;
    this[androidOnRequestFocus$1] = androidOnRequestFocus;
    this[androidOnReceivedIcon$1] = androidOnReceivedIcon;
    this[androidOnReceivedTouchIconUrl$1] = androidOnReceivedTouchIconUrl;
    this[androidOnJsBeforeUnload$1] = androidOnJsBeforeUnload;
    this[androidOnReceivedLoginRequest$1] = androidOnReceivedLoginRequest;
    this[iosOnWebContentProcessDidTerminate$1] = iosOnWebContentProcessDidTerminate;
    this[iosOnDidReceiveServerRedirectForProvisionalNavigation$1] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[initialUrl$1] = initialUrl;
    this[initialFile$1] = initialFile;
    this[initialData$1] = initialData;
    this[initialHeaders$1] = initialHeaders;
    this[initialOptions$1] = initialOptions;
    this[contextMenu$1] = contextMenu;
    ;
  }).prototype = webview.WebView.prototype;
  dart.addTypeTests(webview.WebView);
  dart.addTypeCaches(webview.WebView);
  dart.setLibraryUri(webview.WebView, I[17]);
  dart.setFieldSignature(webview.WebView, () => ({
    __proto__: dart.getFields(webview.WebView.__proto__),
    windowId: dart.finalFieldType(dart.legacy(core.int)),
    onWebViewCreated: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onLoadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLoadStop: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLoadError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onLoadHttpError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]))),
    onProgressChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int)]))),
    onConsoleMessage: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ConsoleMessage)]))),
    shouldOverrideUrlLoading: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ShouldOverrideUrlLoadingAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ShouldOverrideUrlLoadingRequest)]))),
    onLoadResource: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoadedResource)]))),
    onScrollChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int)]))),
    onDownloadStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLoadResourceCustomScheme: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.CustomSchemeResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.String)]))),
    onCreateWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.CreateWindowRequest)]))),
    onCloseWindow: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onWindowBlur: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onJsAlert: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsAlertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsAlertRequest)]))),
    onJsConfirm: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsConfirmResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsConfirmRequest)]))),
    onJsPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsPromptRequest)]))),
    onReceivedHttpAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.HttpAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.HttpAuthChallenge)]))),
    onReceivedServerTrustAuthRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ServerTrustAuthResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ServerTrustChallenge)]))),
    onReceivedClientCertRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ClientCertResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.ClientCertChallenge)]))),
    onFindResultReceived: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]))),
    shouldInterceptAjaxRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onAjaxReadyStateChange: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    onAjaxProgress: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.AjaxRequest)]))),
    shouldInterceptFetchRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FetchRequest))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.FetchRequest)]))),
    onUpdateVisitedHistory: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    onPrint: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onLongPressHitTestResult: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.InAppWebViewHitTestResult)]))),
    onEnterFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onExitFullscreen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    onPageCommitVisible: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    onTitleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnSafeBrowsingHit: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.SafeBrowsingResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(types.SafeBrowsingThreat)]))),
    androidOnPermissionRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.PermissionRequestResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.String)))]))),
    androidOnGeolocationPermissionsShowPrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.GeolocationPermissionShowPromptResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnGeolocationPermissionsHidePrompt: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidShouldInterceptRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebResourceResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.WebResourceRequest)]))),
    androidOnRenderProcessUnresponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessResponsive: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnRenderProcessGone: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.RenderProcessGoneDetail)]))),
    androidOnFormResubmission: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FormResubmissionAction))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String)]))),
    androidOnScaleChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.double), dart.legacy(core.double)]))),
    androidOnRequestFocus: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    androidOnReceivedIcon: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(typed_data.Uint8List)]))),
    androidOnReceivedTouchIconUrl: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(core.String), dart.legacy(core.bool)]))),
    androidOnJsBeforeUnload: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsBeforeUnloadResponse))), [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.JsBeforeUnloadRequest)]))),
    androidOnReceivedLoginRequest: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController), dart.legacy(types.LoginRequest)]))),
    iosOnWebContentProcessDidTerminate: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(in_app_webview_controller.InAppWebViewController)]))),
    initialUrl: dart.finalFieldType(dart.legacy(core.String)),
    initialFile: dart.finalFieldType(dart.legacy(core.String)),
    initialData: dart.finalFieldType(dart.legacy(types.InAppWebViewInitialData)),
    initialHeaders: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    initialOptions: dart.finalFieldType(dart.legacy(types.InAppWebViewGroupOptions)),
    contextMenu: dart.finalFieldType(dart.legacy(context_menu.ContextMenu))
  }));
  var onCreateContextMenu$ = dart.privateName(context_menu, "ContextMenu.onCreateContextMenu");
  var onHideContextMenu$ = dart.privateName(context_menu, "ContextMenu.onHideContextMenu");
  var onContextMenuActionItemClicked$ = dart.privateName(context_menu, "ContextMenu.onContextMenuActionItemClicked");
  var options$ = dart.privateName(context_menu, "ContextMenu.options");
  var menuItems$ = dart.privateName(context_menu, "ContextMenu.menuItems");
  context_menu.ContextMenu = class ContextMenu extends core.Object {
    get onCreateContextMenu() {
      return this[onCreateContextMenu$];
    }
    set onCreateContextMenu(value) {
      super.onCreateContextMenu = value;
    }
    get onHideContextMenu() {
      return this[onHideContextMenu$];
    }
    set onHideContextMenu(value) {
      super.onHideContextMenu = value;
    }
    get onContextMenuActionItemClicked() {
      return this[onContextMenuActionItemClicked$];
    }
    set onContextMenuActionItemClicked(value) {
      super.onContextMenuActionItemClicked = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get menuItems() {
      return this[menuItems$];
    }
    set menuItems(value) {
      super.menuItems = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["menuItems", this.menuItems[$map](T.MapLOfStringL$dynamic(), dart.fn(menuItem => {
          let t13;
          t13 = menuItem;
          return t13 == null ? null : t13.toMap();
        }, T.ContextMenuItemLToMapLOfStringL$dynamic()))[$toList](), "options", (t13 = this.options, t13 == null ? null : t13.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenu.new = function(opts) {
    let menuItems = opts && 'menuItems' in opts ? opts.menuItems : C[48] || CT.C48;
    let onCreateContextMenu = opts && 'onCreateContextMenu' in opts ? opts.onCreateContextMenu : null;
    let onHideContextMenu = opts && 'onHideContextMenu' in opts ? opts.onHideContextMenu : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let onContextMenuActionItemClicked = opts && 'onContextMenuActionItemClicked' in opts ? opts.onContextMenuActionItemClicked : null;
    this[menuItems$] = menuItems;
    this[onCreateContextMenu$] = onCreateContextMenu;
    this[onHideContextMenu$] = onHideContextMenu;
    this[options$] = options;
    this[onContextMenuActionItemClicked$] = onContextMenuActionItemClicked;
    if (!(menuItems != null)) dart.assertFailed(null, I[18], 37, 16, "menuItems != null");
    ;
  }).prototype = context_menu.ContextMenu.prototype;
  dart.addTypeTests(context_menu.ContextMenu);
  dart.addTypeCaches(context_menu.ContextMenu);
  dart.setMethodSignature(context_menu.ContextMenu, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenu.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenu, I[19]);
  dart.setFieldSignature(context_menu.ContextMenu, () => ({
    __proto__: dart.getFields(context_menu.ContextMenu.__proto__),
    onCreateContextMenu: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(types.InAppWebViewHitTestResult)]))),
    onHideContextMenu: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
    onContextMenuActionItemClicked: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(context_menu.ContextMenuItem)]))),
    options: dart.finalFieldType(dart.legacy(context_menu.ContextMenuOptions)),
    menuItems: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(context_menu.ContextMenuItem))))
  }));
  dart.defineExtensionMethods(context_menu.ContextMenu, ['toString']);
  var androidId$ = dart.privateName(context_menu, "ContextMenuItem.androidId");
  var iosId$ = dart.privateName(context_menu, "ContextMenuItem.iosId");
  var title$ = dart.privateName(context_menu, "ContextMenuItem.title");
  var action$1 = dart.privateName(context_menu, "ContextMenuItem.action");
  context_menu.ContextMenuItem = class ContextMenuItem extends core.Object {
    get androidId() {
      return this[androidId$];
    }
    set androidId(value) {
      this[androidId$] = value;
    }
    get iosId() {
      return this[iosId$];
    }
    set iosId(value) {
      this[iosId$] = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get action() {
      return this[action$1];
    }
    set action(value) {
      this[action$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["androidId", this.androidId, "iosId", this.iosId, "title", this.title]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenuItem.new = function(opts) {
    let androidId = opts && 'androidId' in opts ? opts.androidId : null;
    let iosId = opts && 'iosId' in opts ? opts.iosId : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let action = opts && 'action' in opts ? opts.action : null;
    this[androidId$] = androidId;
    this[iosId$] = iosId;
    this[title$] = title;
    this[action$1] = action;
    ;
  }).prototype = context_menu.ContextMenuItem.prototype;
  dart.addTypeTests(context_menu.ContextMenuItem);
  dart.addTypeCaches(context_menu.ContextMenuItem);
  dart.setMethodSignature(context_menu.ContextMenuItem, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenuItem.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenuItem, I[19]);
  dart.setFieldSignature(context_menu.ContextMenuItem, () => ({
    __proto__: dart.getFields(context_menu.ContextMenuItem.__proto__),
    androidId: dart.fieldType(dart.legacy(core.int)),
    iosId: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    action: dart.fieldType(dart.legacy(dart.fnType(dart.dynamic, [])))
  }));
  dart.defineExtensionMethods(context_menu.ContextMenuItem, ['toString']);
  var hideDefaultSystemContextMenuItems$ = dart.privateName(context_menu, "ContextMenuOptions.hideDefaultSystemContextMenuItems");
  context_menu.ContextMenuOptions = class ContextMenuOptions extends core.Object {
    get hideDefaultSystemContextMenuItems() {
      return this[hideDefaultSystemContextMenuItems$];
    }
    set hideDefaultSystemContextMenuItems(value) {
      this[hideDefaultSystemContextMenuItems$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["hideDefaultSystemContextMenuItems", this.hideDefaultSystemContextMenuItems]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenuOptions.new = function(opts) {
    let hideDefaultSystemContextMenuItems = opts && 'hideDefaultSystemContextMenuItems' in opts ? opts.hideDefaultSystemContextMenuItems : false;
    this[hideDefaultSystemContextMenuItems$] = hideDefaultSystemContextMenuItems;
    ;
  }).prototype = context_menu.ContextMenuOptions.prototype;
  dart.addTypeTests(context_menu.ContextMenuOptions);
  dart.addTypeCaches(context_menu.ContextMenuOptions);
  dart.setMethodSignature(context_menu.ContextMenuOptions, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenuOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenuOptions, I[19]);
  dart.setFieldSignature(context_menu.ContextMenuOptions, () => ({
    __proto__: dart.getFields(context_menu.ContextMenuOptions.__proto__),
    hideDefaultSystemContextMenuItems: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(context_menu.ContextMenuOptions, ['toString']);
  var uuid$1 = dart.privateName(in_app_browser, "InAppBrowser.uuid");
  var contextMenu = dart.privateName(in_app_browser, "InAppBrowser.contextMenu");
  var javaScriptHandlersMap$ = dart.privateName(in_app_browser, "InAppBrowser.javaScriptHandlersMap");
  var webViewController$ = dart.privateName(in_app_browser, "InAppBrowser.webViewController");
  var windowId$2 = dart.privateName(in_app_browser, "InAppBrowser.windowId");
  var _isOpened$0 = dart.privateName(in_app_browser, "_isOpened");
  var _channel$0 = dart.privateName(in_app_browser, "_channel");
  in_app_browser.InAppBrowser = class InAppBrowser extends core.Object {
    get uuid() {
      return this[uuid$1];
    }
    set uuid(value) {
      this[uuid$1] = value;
    }
    get contextMenu() {
      return this[contextMenu];
    }
    set contextMenu(value) {
      this[contextMenu] = value;
    }
    get javaScriptHandlersMap() {
      return this[javaScriptHandlersMap$];
    }
    set javaScriptHandlersMap(value) {
      this[javaScriptHandlersMap$] = value;
    }
    get webViewController() {
      return this[webViewController$];
    }
    set webViewController(value) {
      this[webViewController$] = value;
    }
    get windowId() {
      return this[windowId$2];
    }
    set windowId(value) {
      super.windowId = value;
    }
    handleMethod(call) {
      return async.async(dart.dynamic, (function* handleMethod() {
        switch (call.method) {
          case "onBrowserCreated":
          {
            this[_isOpened$0] = true;
            this.onBrowserCreated();
            break;
          }
          case "onExit":
          {
            this[_isOpened$0] = false;
            this.onExit();
            break;
          }
          default:
          {
            return this.webViewController.handleMethod(call);
          }
        }
      }).bind(this));
    }
    openUrl(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[6] || CT.C6;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openUrl() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[20], 73, 12, "url != null && url.isNotEmpty");
        this.throwIsAlreadyOpened({message: "Cannot open " + dart.str(url) + "!"});
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        args[$putIfAbsent]("headers", dart.fn(() => headers, T.VoidToMapLOfStringL$StringL()));
        args[$putIfAbsent]("options", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = options, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("contextMenu", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = this.contextMenu, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointL()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "openUrl", args);
      }).bind(this));
    }
    openFile(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[6] || CT.C6;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openFile() {
        if (!(assetFilePath != null && assetFilePath[$isNotEmpty])) dart.assertFailed(null, I[20], 123, 12, "assetFilePath != null && assetFilePath.isNotEmpty");
        this.throwIsAlreadyOpened({message: "Cannot open " + dart.str(assetFilePath) + "!"});
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        args[$putIfAbsent]("url", dart.fn(() => assetFilePath, T.VoidToStringL()));
        args[$putIfAbsent]("headers", dart.fn(() => headers, T.VoidToMapLOfStringL$StringL()));
        args[$putIfAbsent]("options", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = options, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("contextMenu", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = this.contextMenu, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointL()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "openFile", args);
      }).bind(this));
    }
    openData(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
      let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "about:blank";
      let androidHistoryUrl = opts && 'androidHistoryUrl' in opts ? opts.androidHistoryUrl : "about:blank";
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openData() {
        if (!(data != null)) dart.assertFailed(null, I[20], 152, 12, "data != null");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        args[$putIfAbsent]("options", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = options, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("data", dart.fn(() => data, T.VoidToStringL()));
        args[$putIfAbsent]("mimeType", dart.fn(() => mimeType, T.VoidToStringL()));
        args[$putIfAbsent]("encoding", dart.fn(() => encoding, T.VoidToStringL()));
        args[$putIfAbsent]("baseUrl", dart.fn(() => baseUrl, T.VoidToStringL()));
        args[$putIfAbsent]("historyUrl", dart.fn(() => androidHistoryUrl, T.VoidToStringL()));
        args[$putIfAbsent]("contextMenu", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = this.contextMenu, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        args[$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointL()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "openData", args);
      }).bind(this));
    }
    static openWithSystemBrowser(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      return async.async(dart.void, function* openWithSystemBrowser() {
        if (!(url != null && url[$isNotEmpty])) dart.assertFailed(null, I[20], 169, 12, "url != null && url.isNotEmpty");
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("url", dart.fn(() => url, T.VoidToStringL()));
        return yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.void, "openWithSystemBrowser", args);
      });
    }
    show() {
      return async.async(dart.void, (function* show() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("uuid", dart.fn(() => this.uuid, T.VoidToStringL()));
        yield this[_channel$0].invokeMethod(dart.dynamic, "show", args);
      }).bind(this));
    }
    hide() {
      return async.async(dart.void, (function* hide() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$0].invokeMethod(dart.dynamic, "hide", args);
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        yield this[_channel$0].invokeMethod(dart.dynamic, "close", args);
      }).bind(this));
    }
    isHidden() {
      return async.async(T.boolL(), (function* isHidden() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        return yield this[_channel$0].invokeMethod(T.boolL(), "isHidden", args);
      }).bind(this));
    }
    setOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* setOptions() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        args[$putIfAbsent]("options", dart.fn(() => {
          let t13, t13$;
          t13$ = (t13 = options, t13 == null ? null : t13.toMap());
          return t13$ == null ? new _js_helper.LinkedMap.new() : t13$;
        }, T.VoidToMapL()));
        yield this[_channel$0].invokeMethod(dart.dynamic, "setOptions", args);
      }).bind(this));
    }
    getOptions() {
      return async.async(T.InAppBrowserClassOptionsL(), (function* getOptions() {
        this.throwIsNotOpened();
        let args = new (T.IdentityMapOfStringL$dynamic()).new();
        let options = (yield this[_channel$0].invokeMethod(T.MapL(), "getOptions", args));
        if (options != null) {
          options = options[$cast](T.StringL(), dart.dynamic);
          return types.InAppBrowserClassOptions.fromMap(T.MapLOfStringL$dynamic().as(options));
        }
        return null;
      }).bind(this));
    }
    isOpened() {
      return this[_isOpened$0];
    }
    onBrowserCreated() {
    }
    onExit() {
    }
    onLoadStart(url) {
    }
    onLoadStop(url) {
    }
    onLoadError(url, code, message) {
    }
    onLoadHttpError(url, statusCode, description) {
    }
    onProgressChanged(progress) {
    }
    onConsoleMessage(consoleMessage) {
    }
    shouldOverrideUrlLoading(shouldOverrideUrlLoadingRequest) {
    }
    onLoadResource(resource) {
    }
    onScrollChanged(x, y) {
    }
    onDownloadStart(url) {
    }
    onLoadResourceCustomScheme(scheme, url) {
    }
    onCreateWindow(createWindowRequest) {
    }
    onCloseWindow() {
    }
    onWindowFocus() {
    }
    onWindowBlur() {
    }
    onJsAlert(jsAlertRequest) {
    }
    onJsConfirm(jsConfirmRequest) {
    }
    onJsPrompt(jsPromptRequest) {
    }
    onReceivedHttpAuthRequest(challenge) {
    }
    onReceivedServerTrustAuthRequest(challenge) {
    }
    onReceivedClientCertRequest(challenge) {
    }
    onFindResultReceived(activeMatchOrdinal, numberOfMatches, isDoneCounting) {
    }
    shouldInterceptAjaxRequest(ajaxRequest) {
    }
    onAjaxReadyStateChange(ajaxRequest) {
    }
    onAjaxProgress(ajaxRequest) {
    }
    shouldInterceptFetchRequest(fetchRequest) {
    }
    onUpdateVisitedHistory(url, androidIsReload) {
    }
    onPrint(url) {
    }
    onLongPressHitTestResult(hitTestResult) {
    }
    onEnterFullscreen() {
    }
    onExitFullscreen() {
    }
    onPageCommitVisible(url) {
    }
    onTitleChanged(title) {
    }
    androidOnSafeBrowsingHit(url, threatType) {
    }
    androidOnPermissionRequest(origin, resources) {
    }
    androidOnGeolocationPermissionsShowPrompt(origin) {
    }
    androidOnGeolocationPermissionsHidePrompt() {
    }
    androidShouldInterceptRequest(request) {
    }
    androidOnRenderProcessUnresponsive(url) {
    }
    androidOnRenderProcessResponsive(url) {
    }
    androidOnRenderProcessGone(detail) {
    }
    androidOnFormResubmission(url) {
    }
    androidOnScaleChanged(oldScale, newScale) {
    }
    androidOnRequestFocus() {
    }
    androidOnReceivedIcon(icon) {
    }
    androidOnReceivedTouchIconUrl(url, precomposed) {
    }
    androidOnJsBeforeUnload(jsBeforeUnloadRequest) {
    }
    androidOnReceivedLoginRequest(loginRequest) {
    }
    iosOnWebContentProcessDidTerminate() {
    }
    iosOnDidReceiveServerRedirectForProvisionalNavigation() {
    }
    throwIsAlreadyOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (dart.test(this.isOpened())) {
        dart.throw(core.Exception.new(T.JSArrayOfStringL().of(["Error: " + (message[$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is already opened."])));
      }
    }
    throwIsNotOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (!dart.test(this.isOpened())) {
        dart.throw(core.Exception.new(T.JSArrayOfStringL().of(["Error: " + (message[$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is not opened."])));
      }
    }
  };
  (in_app_browser.InAppBrowser.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    this[uuid$1] = null;
    this[contextMenu] = null;
    this[javaScriptHandlersMap$] = new (T.IdentityMapOfStringL$ListLToLdynamic()).new();
    this[_isOpened$0] = false;
    this[_channel$0] = null;
    this[webViewController$] = null;
    this[windowId$2] = windowId;
    this.uuid = types.uuidGenerator.v4();
    this[_channel$0] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappbrowser_" + dart.str(this.uuid));
    this[_channel$0].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[_isOpened$0] = false;
    this.webViewController = new in_app_webview_controller.InAppWebViewController.fromInAppBrowser(this.uuid, this[_channel$0], this);
  }).prototype = in_app_browser.InAppBrowser.prototype;
  dart.addTypeTests(in_app_browser.InAppBrowser);
  dart.addTypeCaches(in_app_browser.InAppBrowser);
  dart.setMethodSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getMethods(in_app_browser.InAppBrowser.__proto__),
    handleMethod: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall)]),
    openUrl: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), options: dart.legacy(types.InAppBrowserClassOptions), url: dart.legacy(core.String)}, {}),
    openFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {assetFilePath: dart.legacy(core.String), headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), options: dart.legacy(types.InAppBrowserClassOptions)}, {}),
    openData: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {androidHistoryUrl: dart.legacy(core.String), baseUrl: dart.legacy(core.String), data: dart.legacy(core.String), encoding: dart.legacy(core.String), mimeType: dart.legacy(core.String), options: dart.legacy(types.InAppBrowserClassOptions)}, {}),
    show: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    hide: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    close: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    isHidden: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    setOptions: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {options: dart.legacy(types.InAppBrowserClassOptions)}, {}),
    getOptions: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.InAppBrowserClassOptions))), []),
    isOpened: dart.fnType(dart.legacy(core.bool), []),
    onBrowserCreated: dart.fnType(dart.void, []),
    onExit: dart.fnType(dart.void, []),
    onLoadStart: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onLoadStop: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onLoadError: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]),
    onLoadHttpError: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.String)]),
    onProgressChanged: dart.fnType(dart.void, [dart.legacy(core.int)]),
    onConsoleMessage: dart.fnType(dart.void, [dart.legacy(types.ConsoleMessage)]),
    shouldOverrideUrlLoading: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ShouldOverrideUrlLoadingAction))), [dart.legacy(types.ShouldOverrideUrlLoadingRequest)]),
    onLoadResource: dart.fnType(dart.void, [dart.legacy(types.LoadedResource)]),
    onScrollChanged: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    onDownloadStart: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onLoadResourceCustomScheme: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.CustomSchemeResponse))), [dart.legacy(core.String), dart.legacy(core.String)]),
    onCreateWindow: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(types.CreateWindowRequest)]),
    onCloseWindow: dart.fnType(dart.void, []),
    onWindowFocus: dart.fnType(dart.void, []),
    onWindowBlur: dart.fnType(dart.void, []),
    onJsAlert: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsAlertResponse))), [dart.legacy(types.JsAlertRequest)]),
    onJsConfirm: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsConfirmResponse))), [dart.legacy(types.JsConfirmRequest)]),
    onJsPrompt: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsPromptResponse))), [dart.legacy(types.JsPromptRequest)]),
    onReceivedHttpAuthRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.HttpAuthResponse))), [dart.legacy(types.HttpAuthChallenge)]),
    onReceivedServerTrustAuthRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ServerTrustAuthResponse))), [dart.legacy(types.ServerTrustChallenge)]),
    onReceivedClientCertRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.ClientCertResponse))), [dart.legacy(types.ClientCertChallenge)]),
    onFindResultReceived: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]),
    shouldInterceptAjaxRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequest))), [dart.legacy(types.AjaxRequest)]),
    onAjaxReadyStateChange: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(types.AjaxRequest)]),
    onAjaxProgress: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.AjaxRequestAction))), [dart.legacy(types.AjaxRequest)]),
    shouldInterceptFetchRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FetchRequest))), [dart.legacy(types.FetchRequest)]),
    onUpdateVisitedHistory: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.bool)]),
    onPrint: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onLongPressHitTestResult: dart.fnType(dart.void, [dart.legacy(types.InAppWebViewHitTestResult)]),
    onEnterFullscreen: dart.fnType(dart.void, []),
    onExitFullscreen: dart.fnType(dart.void, []),
    onPageCommitVisible: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onTitleChanged: dart.fnType(dart.void, [dart.legacy(core.String)]),
    androidOnSafeBrowsingHit: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.SafeBrowsingResponse))), [dart.legacy(core.String), dart.legacy(types.SafeBrowsingThreat)]),
    androidOnPermissionRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.PermissionRequestResponse))), [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.String)))]),
    androidOnGeolocationPermissionsShowPrompt: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.GeolocationPermissionShowPromptResponse))), [dart.legacy(core.String)]),
    androidOnGeolocationPermissionsHidePrompt: dart.fnType(dart.void, []),
    androidShouldInterceptRequest: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebResourceResponse))), [dart.legacy(types.WebResourceRequest)]),
    androidOnRenderProcessUnresponsive: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(core.String)]),
    androidOnRenderProcessResponsive: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.WebViewRenderProcessAction))), [dart.legacy(core.String)]),
    androidOnRenderProcessGone: dart.fnType(dart.void, [dart.legacy(types.RenderProcessGoneDetail)]),
    androidOnFormResubmission: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.FormResubmissionAction))), [dart.legacy(core.String)]),
    androidOnScaleChanged: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    androidOnRequestFocus: dart.fnType(dart.void, []),
    androidOnReceivedIcon: dart.fnType(dart.void, [dart.legacy(typed_data.Uint8List)]),
    androidOnReceivedTouchIconUrl: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.bool)]),
    androidOnJsBeforeUnload: dart.fnType(dart.legacy(async.Future$(dart.legacy(types.JsBeforeUnloadResponse))), [dart.legacy(types.JsBeforeUnloadRequest)]),
    androidOnReceivedLoginRequest: dart.fnType(dart.void, [dart.legacy(types.LoginRequest)]),
    iosOnWebContentProcessDidTerminate: dart.fnType(dart.void, []),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.fnType(dart.void, []),
    throwIsAlreadyOpened: dart.fnType(dart.void, [], {message: dart.legacy(core.String)}, {}),
    throwIsNotOpened: dart.fnType(dart.void, [], {message: dart.legacy(core.String)}, {})
  }));
  dart.setLibraryUri(in_app_browser.InAppBrowser, I[21]);
  dart.setFieldSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getFields(in_app_browser.InAppBrowser.__proto__),
    uuid: dart.fieldType(dart.legacy(core.String)),
    contextMenu: dart.fieldType(dart.legacy(context_menu.ContextMenu)),
    javaScriptHandlersMap: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.List)]))))),
    [_isOpened$0]: dart.fieldType(dart.legacy(core.bool)),
    [_channel$0]: dart.fieldType(dart.legacy(platform_channel.MethodChannel)),
    webViewController: dart.fieldType(dart.legacy(in_app_webview_controller.InAppWebViewController)),
    windowId: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(in_app_browser.InAppBrowser, {
    /*in_app_browser.InAppBrowser._sharedChannel*/get _sharedChannel() {
      return C[49] || CT.C49;
    }
  }, true);
  var _value$ = dart.privateName(types, "ConsoleMessageLevel._value");
  var _value = dart.privateName(types, "_value");
  types.ConsoleMessageLevel = class ConsoleMessageLevel extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.ConsoleMessageLevel.values[$firstWhere](dart.fn(element => element.toValue() == value, T.ConsoleMessageLevelLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 0:
        {
          return "TIP";
        }
        case 2:
        {
          return "WARNING";
        }
        case 3:
        {
          return "ERROR";
        }
        case 4:
        {
          return "DEBUG";
        }
        case 1:
        default:
        {
          return "LOG";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ConsoleMessageLevel._internal = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = types.ConsoleMessageLevel.prototype;
  dart.addTypeTests(types.ConsoleMessageLevel);
  dart.addTypeCaches(types.ConsoleMessageLevel);
  dart.setMethodSignature(types.ConsoleMessageLevel, () => ({
    __proto__: dart.getMethods(types.ConsoleMessageLevel.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ConsoleMessageLevel, () => ({
    __proto__: dart.getGetters(types.ConsoleMessageLevel.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ConsoleMessageLevel, I[22]);
  dart.setFieldSignature(types.ConsoleMessageLevel, () => ({
    __proto__: dart.getFields(types.ConsoleMessageLevel.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.ConsoleMessageLevel, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ConsoleMessageLevel, ['hashCode']);
  dart.defineLazy(types.ConsoleMessageLevel, {
    /*types.ConsoleMessageLevel.values*/get values() {
      return T.JSArrayOfConsoleMessageLevelL().of([types.ConsoleMessageLevel.TIP, types.ConsoleMessageLevel.LOG, types.ConsoleMessageLevel.WARNING, types.ConsoleMessageLevel.ERROR, types.ConsoleMessageLevel.DEBUG])[$toSet]();
    },
    /*types.ConsoleMessageLevel.TIP*/get TIP() {
      return C[50] || CT.C50;
    },
    /*types.ConsoleMessageLevel.LOG*/get LOG() {
      return C[51] || CT.C51;
    },
    /*types.ConsoleMessageLevel.WARNING*/get WARNING() {
      return C[52] || CT.C52;
    },
    /*types.ConsoleMessageLevel.ERROR*/get ERROR() {
      return C[53] || CT.C53;
    },
    /*types.ConsoleMessageLevel.DEBUG*/get DEBUG() {
      return C[54] || CT.C54;
    }
  }, true);
  var initiatorType$ = dart.privateName(types, "LoadedResource.initiatorType");
  var url$ = dart.privateName(types, "LoadedResource.url");
  var startTime$ = dart.privateName(types, "LoadedResource.startTime");
  var duration$ = dart.privateName(types, "LoadedResource.duration");
  types.LoadedResource = class LoadedResource extends core.Object {
    get initiatorType() {
      return this[initiatorType$];
    }
    set initiatorType(value) {
      this[initiatorType$] = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      this[url$] = value;
    }
    get startTime() {
      return this[startTime$];
    }
    set startTime(value) {
      this[startTime$] = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      this[duration$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["initiatorType", this.initiatorType, "url", this.url, "startTime", this.startTime, "duration", this.duration]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.LoadedResource.new = function(opts) {
    let initiatorType = opts && 'initiatorType' in opts ? opts.initiatorType : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let startTime = opts && 'startTime' in opts ? opts.startTime : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[initiatorType$] = initiatorType;
    this[url$] = url;
    this[startTime$] = startTime;
    this[duration$] = duration;
    ;
  }).prototype = types.LoadedResource.prototype;
  dart.addTypeTests(types.LoadedResource);
  dart.addTypeCaches(types.LoadedResource);
  dart.setMethodSignature(types.LoadedResource, () => ({
    __proto__: dart.getMethods(types.LoadedResource.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.LoadedResource, I[22]);
  dart.setFieldSignature(types.LoadedResource, () => ({
    __proto__: dart.getFields(types.LoadedResource.__proto__),
    initiatorType: dart.fieldType(dart.legacy(core.String)),
    url: dart.fieldType(dart.legacy(core.String)),
    startTime: dart.fieldType(dart.legacy(core.double)),
    duration: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(types.LoadedResource, ['toString']);
  var data$ = dart.privateName(types, "InAppWebViewInitialData.data");
  var mimeType$ = dart.privateName(types, "InAppWebViewInitialData.mimeType");
  var encoding$ = dart.privateName(types, "InAppWebViewInitialData.encoding");
  var baseUrl$ = dart.privateName(types, "InAppWebViewInitialData.baseUrl");
  var historyUrl$ = dart.privateName(types, "InAppWebViewInitialData.historyUrl");
  types.InAppWebViewInitialData = class InAppWebViewInitialData extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      this[data$] = value;
    }
    get mimeType() {
      return this[mimeType$];
    }
    set mimeType(value) {
      this[mimeType$] = value;
    }
    get encoding() {
      return this[encoding$];
    }
    set encoding(value) {
      this[encoding$] = value;
    }
    get baseUrl() {
      return this[baseUrl$];
    }
    set baseUrl(value) {
      this[baseUrl$] = value;
    }
    get historyUrl() {
      return this[historyUrl$];
    }
    set historyUrl(value) {
      this[historyUrl$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$StringL()).from(["data", this.data, "mimeType", this.mimeType, "encoding", this.encoding, "baseUrl", this.baseUrl, "historyUrl", this.historyUrl]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.InAppWebViewInitialData.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
    let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "about:blank";
    let historyUrl = opts && 'historyUrl' in opts ? opts.historyUrl : "about:blank";
    this[data$] = data;
    this[mimeType$] = mimeType;
    this[encoding$] = encoding;
    this[baseUrl$] = baseUrl;
    this[historyUrl$] = historyUrl;
    ;
  }).prototype = types.InAppWebViewInitialData.prototype;
  dart.addTypeTests(types.InAppWebViewInitialData);
  dart.addTypeCaches(types.InAppWebViewInitialData);
  dart.setMethodSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getMethods(types.InAppWebViewInitialData.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.InAppWebViewInitialData, I[22]);
  dart.setFieldSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getFields(types.InAppWebViewInitialData.__proto__),
    data: dart.fieldType(dart.legacy(core.String)),
    mimeType: dart.fieldType(dart.legacy(core.String)),
    encoding: dart.fieldType(dart.legacy(core.String)),
    baseUrl: dart.fieldType(dart.legacy(core.String)),
    historyUrl: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.InAppWebViewInitialData, ['toString']);
  var url$0 = dart.privateName(types, "WebResourceRequest.url");
  var headers$ = dart.privateName(types, "WebResourceRequest.headers");
  var method$ = dart.privateName(types, "WebResourceRequest.method");
  var hasGesture$ = dart.privateName(types, "WebResourceRequest.hasGesture");
  var isForMainFrame$ = dart.privateName(types, "WebResourceRequest.isForMainFrame");
  var isRedirect$ = dart.privateName(types, "WebResourceRequest.isRedirect");
  types.WebResourceRequest = class WebResourceRequest extends core.Object {
    get url() {
      return this[url$0];
    }
    set url(value) {
      this[url$0] = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      this[headers$] = value;
    }
    get method() {
      return this[method$];
    }
    set method(value) {
      this[method$] = value;
    }
    get hasGesture() {
      return this[hasGesture$];
    }
    set hasGesture(value) {
      this[hasGesture$] = value;
    }
    get isForMainFrame() {
      return this[isForMainFrame$];
    }
    set isForMainFrame(value) {
      this[isForMainFrame$] = value;
    }
    get isRedirect() {
      return this[isRedirect$];
    }
    set isRedirect(value) {
      this[isRedirect$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "headers", this.headers, "method", this.method, "hasGesture", this.hasGesture, "isForMainFrame", this.isForMainFrame, "isRedirect", this.isRedirect]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebResourceRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : null;
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
    this[url$0] = url;
    this[headers$] = headers;
    this[method$] = method;
    this[hasGesture$] = hasGesture;
    this[isForMainFrame$] = isForMainFrame;
    this[isRedirect$] = isRedirect;
    ;
  }).prototype = types.WebResourceRequest.prototype;
  dart.addTypeTests(types.WebResourceRequest);
  dart.addTypeCaches(types.WebResourceRequest);
  dart.setMethodSignature(types.WebResourceRequest, () => ({
    __proto__: dart.getMethods(types.WebResourceRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.WebResourceRequest, I[22]);
  dart.setFieldSignature(types.WebResourceRequest, () => ({
    __proto__: dart.getFields(types.WebResourceRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    headers: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    method: dart.fieldType(dart.legacy(core.String)),
    hasGesture: dart.fieldType(dart.legacy(core.bool)),
    isForMainFrame: dart.fieldType(dart.legacy(core.bool)),
    isRedirect: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.WebResourceRequest, ['toString']);
  var contentType$ = dart.privateName(types, "WebResourceResponse.contentType");
  var contentEncoding$ = dart.privateName(types, "WebResourceResponse.contentEncoding");
  var data$0 = dart.privateName(types, "WebResourceResponse.data");
  var headers$0 = dart.privateName(types, "WebResourceResponse.headers");
  var statusCode$ = dart.privateName(types, "WebResourceResponse.statusCode");
  var reasonPhrase$ = dart.privateName(types, "WebResourceResponse.reasonPhrase");
  types.WebResourceResponse = class WebResourceResponse extends core.Object {
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      this[contentType$] = value;
    }
    get contentEncoding() {
      return this[contentEncoding$];
    }
    set contentEncoding(value) {
      this[contentEncoding$] = value;
    }
    get data() {
      return this[data$0];
    }
    set data(value) {
      this[data$0] = value;
    }
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      this[headers$0] = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      this[statusCode$] = value;
    }
    get reasonPhrase() {
      return this[reasonPhrase$];
    }
    set reasonPhrase(value) {
      this[reasonPhrase$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["contentType", this.contentType, "contentEncoding", this.contentEncoding, "data", this.data, "statusCode", this.statusCode, "reasonPhrase", this.reasonPhrase]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebResourceResponse.new = function(opts) {
    let contentType = opts && 'contentType' in opts ? opts.contentType : "";
    let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : "utf-8";
    let data = opts && 'data' in opts ? opts.data : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[contentType$] = contentType;
    this[contentEncoding$] = contentEncoding;
    this[data$0] = data;
    this[headers$0] = headers;
    this[statusCode$] = statusCode;
    this[reasonPhrase$] = reasonPhrase;
    ;
  }).prototype = types.WebResourceResponse.prototype;
  dart.addTypeTests(types.WebResourceResponse);
  dart.addTypeCaches(types.WebResourceResponse);
  dart.setMethodSignature(types.WebResourceResponse, () => ({
    __proto__: dart.getMethods(types.WebResourceResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.WebResourceResponse, I[22]);
  dart.setFieldSignature(types.WebResourceResponse, () => ({
    __proto__: dart.getFields(types.WebResourceResponse.__proto__),
    contentType: dart.fieldType(dart.legacy(core.String)),
    contentEncoding: dart.fieldType(dart.legacy(core.String)),
    data: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    headers: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    statusCode: dart.fieldType(dart.legacy(core.int)),
    reasonPhrase: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.WebResourceResponse, ['toString']);
  var data$1 = dart.privateName(types, "CustomSchemeResponse.data");
  var contentType$0 = dart.privateName(types, "CustomSchemeResponse.contentType");
  var contentEnconding$ = dart.privateName(types, "CustomSchemeResponse.contentEnconding");
  types.CustomSchemeResponse = class CustomSchemeResponse extends core.Object {
    get data() {
      return this[data$1];
    }
    set data(value) {
      this[data$1] = value;
    }
    get contentType() {
      return this[contentType$0];
    }
    set contentType(value) {
      this[contentType$0] = value;
    }
    get contentEnconding() {
      return this[contentEnconding$];
    }
    set contentEnconding(value) {
      this[contentEnconding$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["content-type", this.contentType, "content-encoding", this.contentEnconding, "data", this.data]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CustomSchemeResponse.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let contentEnconding = opts && 'contentEnconding' in opts ? opts.contentEnconding : "utf-8";
    this[data$1] = data;
    this[contentType$0] = contentType;
    this[contentEnconding$] = contentEnconding;
    ;
  }).prototype = types.CustomSchemeResponse.prototype;
  dart.addTypeTests(types.CustomSchemeResponse);
  dart.addTypeCaches(types.CustomSchemeResponse);
  dart.setMethodSignature(types.CustomSchemeResponse, () => ({
    __proto__: dart.getMethods(types.CustomSchemeResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.CustomSchemeResponse, I[22]);
  dart.setFieldSignature(types.CustomSchemeResponse, () => ({
    __proto__: dart.getFields(types.CustomSchemeResponse.__proto__),
    data: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    contentType: dart.fieldType(dart.legacy(core.String)),
    contentEnconding: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.CustomSchemeResponse, ['toString']);
  var message$ = dart.privateName(types, "ConsoleMessage.message");
  var messageLevel$ = dart.privateName(types, "ConsoleMessage.messageLevel");
  types.ConsoleMessage = class ConsoleMessage extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      this[message$] = value;
    }
    get messageLevel() {
      return this[messageLevel$];
    }
    set messageLevel(value) {
      this[messageLevel$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["message", this.message, "messageLevel", (t13 = this.messageLevel, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ConsoleMessage.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    let messageLevel = opts && 'messageLevel' in opts ? opts.messageLevel : C[51] || CT.C51;
    this[message$] = message;
    this[messageLevel$] = messageLevel;
    ;
  }).prototype = types.ConsoleMessage.prototype;
  dart.addTypeTests(types.ConsoleMessage);
  dart.addTypeCaches(types.ConsoleMessage);
  dart.setMethodSignature(types.ConsoleMessage, () => ({
    __proto__: dart.getMethods(types.ConsoleMessage.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ConsoleMessage, I[22]);
  dart.setFieldSignature(types.ConsoleMessage, () => ({
    __proto__: dart.getFields(types.ConsoleMessage.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    messageLevel: dart.fieldType(dart.legacy(types.ConsoleMessageLevel))
  }));
  dart.defineExtensionMethods(types.ConsoleMessage, ['toString']);
  var list$ = dart.privateName(types, "WebHistory.list");
  var currentIndex$ = dart.privateName(types, "WebHistory.currentIndex");
  types.WebHistory = class WebHistory extends core.Object {
    get list() {
      return this[list$];
    }
    set list(value) {
      this[list$] = value;
    }
    get currentIndex() {
      return this[currentIndex$];
    }
    set currentIndex(value) {
      this[currentIndex$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["list", this.list, "currentIndex", this.currentIndex]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebHistory.new = function(opts) {
    let list = opts && 'list' in opts ? opts.list : null;
    let currentIndex = opts && 'currentIndex' in opts ? opts.currentIndex : null;
    this[list$] = list;
    this[currentIndex$] = currentIndex;
    ;
  }).prototype = types.WebHistory.prototype;
  dart.addTypeTests(types.WebHistory);
  dart.addTypeCaches(types.WebHistory);
  dart.setMethodSignature(types.WebHistory, () => ({
    __proto__: dart.getMethods(types.WebHistory.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.WebHistory, I[22]);
  dart.setFieldSignature(types.WebHistory, () => ({
    __proto__: dart.getFields(types.WebHistory.__proto__),
    list: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.WebHistoryItem)))),
    currentIndex: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.WebHistory, ['toString']);
  var originalUrl$ = dart.privateName(types, "WebHistoryItem.originalUrl");
  var title$0 = dart.privateName(types, "WebHistoryItem.title");
  var url$1 = dart.privateName(types, "WebHistoryItem.url");
  var index$ = dart.privateName(types, "WebHistoryItem.index");
  var offset$ = dart.privateName(types, "WebHistoryItem.offset");
  types.WebHistoryItem = class WebHistoryItem extends core.Object {
    get originalUrl() {
      return this[originalUrl$];
    }
    set originalUrl(value) {
      this[originalUrl$] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      this[title$0] = value;
    }
    get url() {
      return this[url$1];
    }
    set url(value) {
      this[url$1] = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      this[index$] = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["originalUrl", this.originalUrl, "title", this.title, "url", this.url, "index", this.index, "offset", this.offset]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebHistoryItem.new = function(opts) {
    let originalUrl = opts && 'originalUrl' in opts ? opts.originalUrl : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[originalUrl$] = originalUrl;
    this[title$0] = title;
    this[url$1] = url;
    this[index$] = index;
    this[offset$] = offset;
    ;
  }).prototype = types.WebHistoryItem.prototype;
  dart.addTypeTests(types.WebHistoryItem);
  dart.addTypeCaches(types.WebHistoryItem);
  dart.setMethodSignature(types.WebHistoryItem, () => ({
    __proto__: dart.getMethods(types.WebHistoryItem.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.WebHistoryItem, I[22]);
  dart.setFieldSignature(types.WebHistoryItem, () => ({
    __proto__: dart.getFields(types.WebHistoryItem.__proto__),
    originalUrl: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    url: dart.fieldType(dart.legacy(core.String)),
    index: dart.fieldType(dart.legacy(core.int)),
    offset: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.WebHistoryItem, ['toString']);
  var origin$ = dart.privateName(types, "GeolocationPermissionShowPromptResponse.origin");
  var allow$ = dart.privateName(types, "GeolocationPermissionShowPromptResponse.allow");
  var retain$ = dart.privateName(types, "GeolocationPermissionShowPromptResponse.retain");
  types.GeolocationPermissionShowPromptResponse = class GeolocationPermissionShowPromptResponse extends core.Object {
    get origin() {
      return this[origin$];
    }
    set origin(value) {
      this[origin$] = value;
    }
    get allow() {
      return this[allow$];
    }
    set allow(value) {
      this[allow$] = value;
    }
    get retain() {
      return this[retain$];
    }
    set retain(value) {
      this[retain$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["origin", this.origin, "allow", this.allow, "retain", this.retain]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.GeolocationPermissionShowPromptResponse.new = function(opts) {
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let allow = opts && 'allow' in opts ? opts.allow : null;
    let retain = opts && 'retain' in opts ? opts.retain : null;
    this[origin$] = origin;
    this[allow$] = allow;
    this[retain$] = retain;
    ;
  }).prototype = types.GeolocationPermissionShowPromptResponse.prototype;
  dart.addTypeTests(types.GeolocationPermissionShowPromptResponse);
  dart.addTypeCaches(types.GeolocationPermissionShowPromptResponse);
  dart.setMethodSignature(types.GeolocationPermissionShowPromptResponse, () => ({
    __proto__: dart.getMethods(types.GeolocationPermissionShowPromptResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.GeolocationPermissionShowPromptResponse, I[22]);
  dart.setFieldSignature(types.GeolocationPermissionShowPromptResponse, () => ({
    __proto__: dart.getFields(types.GeolocationPermissionShowPromptResponse.__proto__),
    origin: dart.fieldType(dart.legacy(core.String)),
    allow: dart.fieldType(dart.legacy(core.bool)),
    retain: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.GeolocationPermissionShowPromptResponse, ['toString']);
  var url$2 = dart.privateName(types, "JsAlertRequest.url");
  var message$0 = dart.privateName(types, "JsAlertRequest.message");
  var iosIsMainFrame$ = dart.privateName(types, "JsAlertRequest.iosIsMainFrame");
  types.JsAlertRequest = class JsAlertRequest extends core.Object {
    get url() {
      return this[url$2];
    }
    set url(value) {
      this[url$2] = value;
    }
    get message() {
      return this[message$0];
    }
    set message(value) {
      this[message$0] = value;
    }
    get iosIsMainFrame() {
      return this[iosIsMainFrame$];
    }
    set iosIsMainFrame(value) {
      this[iosIsMainFrame$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "message", this.message, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsAlertRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[url$2] = url;
    this[message$0] = message;
    this[iosIsMainFrame$] = iosIsMainFrame;
    ;
  }).prototype = types.JsAlertRequest.prototype;
  dart.addTypeTests(types.JsAlertRequest);
  dart.addTypeCaches(types.JsAlertRequest);
  dart.setMethodSignature(types.JsAlertRequest, () => ({
    __proto__: dart.getMethods(types.JsAlertRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsAlertRequest, I[22]);
  dart.setFieldSignature(types.JsAlertRequest, () => ({
    __proto__: dart.getFields(types.JsAlertRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    message: dart.fieldType(dart.legacy(core.String)),
    iosIsMainFrame: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.JsAlertRequest, ['toString']);
  var _value$0 = dart.privateName(types, "JsAlertResponseAction._value");
  types.JsAlertResponseAction = class JsAlertResponseAction extends core.Object {
    get [_value]() {
      return this[_value$0];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.JsAlertResponseAction._internal = function(_value) {
    this[_value$0] = _value;
    ;
  }).prototype = types.JsAlertResponseAction.prototype;
  dart.addTypeTests(types.JsAlertResponseAction);
  dart.addTypeCaches(types.JsAlertResponseAction);
  dart.setMethodSignature(types.JsAlertResponseAction, () => ({
    __proto__: dart.getMethods(types.JsAlertResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.JsAlertResponseAction, () => ({
    __proto__: dart.getGetters(types.JsAlertResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.JsAlertResponseAction, I[22]);
  dart.setFieldSignature(types.JsAlertResponseAction, () => ({
    __proto__: dart.getFields(types.JsAlertResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.JsAlertResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsAlertResponseAction, ['hashCode']);
  dart.defineLazy(types.JsAlertResponseAction, {
    /*types.JsAlertResponseAction.CONFIRM*/get CONFIRM() {
      return C[55] || CT.C55;
    }
  }, true);
  var message$1 = dart.privateName(types, "JsAlertResponse.message");
  var confirmButtonTitle$ = dart.privateName(types, "JsAlertResponse.confirmButtonTitle");
  var handledByClient$ = dart.privateName(types, "JsAlertResponse.handledByClient");
  var action$2 = dart.privateName(types, "JsAlertResponse.action");
  types.JsAlertResponse = class JsAlertResponse extends core.Object {
    get message() {
      return this[message$1];
    }
    set message(value) {
      this[message$1] = value;
    }
    get confirmButtonTitle() {
      return this[confirmButtonTitle$];
    }
    set confirmButtonTitle(value) {
      this[confirmButtonTitle$] = value;
    }
    get handledByClient() {
      return this[handledByClient$];
    }
    set handledByClient(value) {
      this[handledByClient$] = value;
    }
    get action() {
      return this[action$2];
    }
    set action(value) {
      this[action$2] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "handledByClient", this.handledByClient, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsAlertResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    let action = opts && 'action' in opts ? opts.action : C[55] || CT.C55;
    this[message$1] = message;
    this[handledByClient$] = handledByClient;
    this[confirmButtonTitle$] = confirmButtonTitle;
    this[action$2] = action;
    ;
  }).prototype = types.JsAlertResponse.prototype;
  dart.addTypeTests(types.JsAlertResponse);
  dart.addTypeCaches(types.JsAlertResponse);
  dart.setMethodSignature(types.JsAlertResponse, () => ({
    __proto__: dart.getMethods(types.JsAlertResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsAlertResponse, I[22]);
  dart.setFieldSignature(types.JsAlertResponse, () => ({
    __proto__: dart.getFields(types.JsAlertResponse.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    confirmButtonTitle: dart.fieldType(dart.legacy(core.String)),
    handledByClient: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.JsAlertResponseAction))
  }));
  dart.defineExtensionMethods(types.JsAlertResponse, ['toString']);
  var url$3 = dart.privateName(types, "JsConfirmRequest.url");
  var message$2 = dart.privateName(types, "JsConfirmRequest.message");
  var iosIsMainFrame$0 = dart.privateName(types, "JsConfirmRequest.iosIsMainFrame");
  types.JsConfirmRequest = class JsConfirmRequest extends core.Object {
    get url() {
      return this[url$3];
    }
    set url(value) {
      this[url$3] = value;
    }
    get message() {
      return this[message$2];
    }
    set message(value) {
      this[message$2] = value;
    }
    get iosIsMainFrame() {
      return this[iosIsMainFrame$0];
    }
    set iosIsMainFrame(value) {
      this[iosIsMainFrame$0] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "message", this.message, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsConfirmRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[url$3] = url;
    this[message$2] = message;
    this[iosIsMainFrame$0] = iosIsMainFrame;
    ;
  }).prototype = types.JsConfirmRequest.prototype;
  dart.addTypeTests(types.JsConfirmRequest);
  dart.addTypeCaches(types.JsConfirmRequest);
  dart.setMethodSignature(types.JsConfirmRequest, () => ({
    __proto__: dart.getMethods(types.JsConfirmRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsConfirmRequest, I[22]);
  dart.setFieldSignature(types.JsConfirmRequest, () => ({
    __proto__: dart.getFields(types.JsConfirmRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    message: dart.fieldType(dart.legacy(core.String)),
    iosIsMainFrame: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.JsConfirmRequest, ['toString']);
  var _value$1 = dart.privateName(types, "JsConfirmResponseAction._value");
  types.JsConfirmResponseAction = class JsConfirmResponseAction extends core.Object {
    get [_value]() {
      return this[_value$1];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.JsConfirmResponseAction._internal = function(_value) {
    this[_value$1] = _value;
    ;
  }).prototype = types.JsConfirmResponseAction.prototype;
  dart.addTypeTests(types.JsConfirmResponseAction);
  dart.addTypeCaches(types.JsConfirmResponseAction);
  dart.setMethodSignature(types.JsConfirmResponseAction, () => ({
    __proto__: dart.getMethods(types.JsConfirmResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.JsConfirmResponseAction, () => ({
    __proto__: dart.getGetters(types.JsConfirmResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.JsConfirmResponseAction, I[22]);
  dart.setFieldSignature(types.JsConfirmResponseAction, () => ({
    __proto__: dart.getFields(types.JsConfirmResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.JsConfirmResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsConfirmResponseAction, ['hashCode']);
  dart.defineLazy(types.JsConfirmResponseAction, {
    /*types.JsConfirmResponseAction.CONFIRM*/get CONFIRM() {
      return C[56] || CT.C56;
    },
    /*types.JsConfirmResponseAction.CANCEL*/get CANCEL() {
      return C[57] || CT.C57;
    }
  }, true);
  var message$3 = dart.privateName(types, "JsConfirmResponse.message");
  var confirmButtonTitle$0 = dart.privateName(types, "JsConfirmResponse.confirmButtonTitle");
  var cancelButtonTitle$ = dart.privateName(types, "JsConfirmResponse.cancelButtonTitle");
  var handledByClient$0 = dart.privateName(types, "JsConfirmResponse.handledByClient");
  var action$3 = dart.privateName(types, "JsConfirmResponse.action");
  types.JsConfirmResponse = class JsConfirmResponse extends core.Object {
    get message() {
      return this[message$3];
    }
    set message(value) {
      this[message$3] = value;
    }
    get confirmButtonTitle() {
      return this[confirmButtonTitle$0];
    }
    set confirmButtonTitle(value) {
      this[confirmButtonTitle$0] = value;
    }
    get cancelButtonTitle() {
      return this[cancelButtonTitle$];
    }
    set cancelButtonTitle(value) {
      this[cancelButtonTitle$] = value;
    }
    get handledByClient() {
      return this[handledByClient$0];
    }
    set handledByClient(value) {
      this[handledByClient$0] = value;
    }
    get action() {
      return this[action$3];
    }
    set action(value) {
      this[action$3] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsConfirmResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    let action = opts && 'action' in opts ? opts.action : C[57] || CT.C57;
    this[message$3] = message;
    this[handledByClient$0] = handledByClient;
    this[confirmButtonTitle$0] = confirmButtonTitle;
    this[cancelButtonTitle$] = cancelButtonTitle;
    this[action$3] = action;
    ;
  }).prototype = types.JsConfirmResponse.prototype;
  dart.addTypeTests(types.JsConfirmResponse);
  dart.addTypeCaches(types.JsConfirmResponse);
  dart.setMethodSignature(types.JsConfirmResponse, () => ({
    __proto__: dart.getMethods(types.JsConfirmResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsConfirmResponse, I[22]);
  dart.setFieldSignature(types.JsConfirmResponse, () => ({
    __proto__: dart.getFields(types.JsConfirmResponse.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    confirmButtonTitle: dart.fieldType(dart.legacy(core.String)),
    cancelButtonTitle: dart.fieldType(dart.legacy(core.String)),
    handledByClient: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.JsConfirmResponseAction))
  }));
  dart.defineExtensionMethods(types.JsConfirmResponse, ['toString']);
  var url$4 = dart.privateName(types, "JsPromptRequest.url");
  var message$4 = dart.privateName(types, "JsPromptRequest.message");
  var defaultValue$ = dart.privateName(types, "JsPromptRequest.defaultValue");
  var iosIsMainFrame$1 = dart.privateName(types, "JsPromptRequest.iosIsMainFrame");
  types.JsPromptRequest = class JsPromptRequest extends core.Object {
    get url() {
      return this[url$4];
    }
    set url(value) {
      this[url$4] = value;
    }
    get message() {
      return this[message$4];
    }
    set message(value) {
      this[message$4] = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      this[defaultValue$] = value;
    }
    get iosIsMainFrame() {
      return this[iosIsMainFrame$1];
    }
    set iosIsMainFrame(value) {
      this[iosIsMainFrame$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "message", this.message, "defaultValue", this.defaultValue, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsPromptRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[url$4] = url;
    this[message$4] = message;
    this[defaultValue$] = defaultValue;
    this[iosIsMainFrame$1] = iosIsMainFrame;
    ;
  }).prototype = types.JsPromptRequest.prototype;
  dart.addTypeTests(types.JsPromptRequest);
  dart.addTypeCaches(types.JsPromptRequest);
  dart.setMethodSignature(types.JsPromptRequest, () => ({
    __proto__: dart.getMethods(types.JsPromptRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsPromptRequest, I[22]);
  dart.setFieldSignature(types.JsPromptRequest, () => ({
    __proto__: dart.getFields(types.JsPromptRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    message: dart.fieldType(dart.legacy(core.String)),
    defaultValue: dart.fieldType(dart.legacy(core.String)),
    iosIsMainFrame: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.JsPromptRequest, ['toString']);
  var _value$2 = dart.privateName(types, "JsPromptResponseAction._value");
  types.JsPromptResponseAction = class JsPromptResponseAction extends core.Object {
    get [_value]() {
      return this[_value$2];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.JsPromptResponseAction._internal = function(_value) {
    this[_value$2] = _value;
    ;
  }).prototype = types.JsPromptResponseAction.prototype;
  dart.addTypeTests(types.JsPromptResponseAction);
  dart.addTypeCaches(types.JsPromptResponseAction);
  dart.setMethodSignature(types.JsPromptResponseAction, () => ({
    __proto__: dart.getMethods(types.JsPromptResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.JsPromptResponseAction, () => ({
    __proto__: dart.getGetters(types.JsPromptResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.JsPromptResponseAction, I[22]);
  dart.setFieldSignature(types.JsPromptResponseAction, () => ({
    __proto__: dart.getFields(types.JsPromptResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.JsPromptResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsPromptResponseAction, ['hashCode']);
  dart.defineLazy(types.JsPromptResponseAction, {
    /*types.JsPromptResponseAction.CONFIRM*/get CONFIRM() {
      return C[58] || CT.C58;
    },
    /*types.JsPromptResponseAction.CANCEL*/get CANCEL() {
      return C[59] || CT.C59;
    }
  }, true);
  var message$5 = dart.privateName(types, "JsPromptResponse.message");
  var defaultValue$0 = dart.privateName(types, "JsPromptResponse.defaultValue");
  var confirmButtonTitle$1 = dart.privateName(types, "JsPromptResponse.confirmButtonTitle");
  var cancelButtonTitle$0 = dart.privateName(types, "JsPromptResponse.cancelButtonTitle");
  var handledByClient$1 = dart.privateName(types, "JsPromptResponse.handledByClient");
  var value$0 = dart.privateName(types, "JsPromptResponse.value");
  var action$4 = dart.privateName(types, "JsPromptResponse.action");
  types.JsPromptResponse = class JsPromptResponse extends core.Object {
    get message() {
      return this[message$5];
    }
    set message(value) {
      this[message$5] = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      this[defaultValue$0] = value;
    }
    get confirmButtonTitle() {
      return this[confirmButtonTitle$1];
    }
    set confirmButtonTitle(value) {
      this[confirmButtonTitle$1] = value;
    }
    get cancelButtonTitle() {
      return this[cancelButtonTitle$0];
    }
    set cancelButtonTitle(value) {
      this[cancelButtonTitle$0] = value;
    }
    get handledByClient() {
      return this[handledByClient$1];
    }
    set handledByClient(value) {
      this[handledByClient$1] = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    get action() {
      return this[action$4];
    }
    set action(value) {
      this[action$4] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["message", this.message, "defaultValue", this.defaultValue, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "value", this.value, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsPromptResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : "";
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    let value = opts && 'value' in opts ? opts.value : null;
    let action = opts && 'action' in opts ? opts.action : C[59] || CT.C59;
    this[message$5] = message;
    this[defaultValue$0] = defaultValue;
    this[handledByClient$1] = handledByClient;
    this[confirmButtonTitle$1] = confirmButtonTitle;
    this[cancelButtonTitle$0] = cancelButtonTitle;
    this[value$0] = value;
    this[action$4] = action;
    ;
  }).prototype = types.JsPromptResponse.prototype;
  dart.addTypeTests(types.JsPromptResponse);
  dart.addTypeCaches(types.JsPromptResponse);
  dart.setMethodSignature(types.JsPromptResponse, () => ({
    __proto__: dart.getMethods(types.JsPromptResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsPromptResponse, I[22]);
  dart.setFieldSignature(types.JsPromptResponse, () => ({
    __proto__: dart.getFields(types.JsPromptResponse.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    defaultValue: dart.fieldType(dart.legacy(core.String)),
    confirmButtonTitle: dart.fieldType(dart.legacy(core.String)),
    cancelButtonTitle: dart.fieldType(dart.legacy(core.String)),
    handledByClient: dart.fieldType(dart.legacy(core.bool)),
    value: dart.fieldType(dart.legacy(core.String)),
    action: dart.fieldType(dart.legacy(types.JsPromptResponseAction))
  }));
  dart.defineExtensionMethods(types.JsPromptResponse, ['toString']);
  var url$5 = dart.privateName(types, "JsBeforeUnloadRequest.url");
  var message$6 = dart.privateName(types, "JsBeforeUnloadRequest.message");
  var iosIsMainFrame$2 = dart.privateName(types, "JsBeforeUnloadRequest.iosIsMainFrame");
  types.JsBeforeUnloadRequest = class JsBeforeUnloadRequest extends core.Object {
    get url() {
      return this[url$5];
    }
    set url(value) {
      this[url$5] = value;
    }
    get message() {
      return this[message$6];
    }
    set message(value) {
      this[message$6] = value;
    }
    get iosIsMainFrame() {
      return this[iosIsMainFrame$2];
    }
    set iosIsMainFrame(value) {
      this[iosIsMainFrame$2] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "message", this.message, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsBeforeUnloadRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[url$5] = url;
    this[message$6] = message;
    this[iosIsMainFrame$2] = iosIsMainFrame;
    ;
  }).prototype = types.JsBeforeUnloadRequest.prototype;
  dart.addTypeTests(types.JsBeforeUnloadRequest);
  dart.addTypeCaches(types.JsBeforeUnloadRequest);
  dart.setMethodSignature(types.JsBeforeUnloadRequest, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsBeforeUnloadRequest, I[22]);
  dart.setFieldSignature(types.JsBeforeUnloadRequest, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    message: dart.fieldType(dart.legacy(core.String)),
    iosIsMainFrame: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadRequest, ['toString']);
  var _value$3 = dart.privateName(types, "JsBeforeUnloadResponseAction._value");
  types.JsBeforeUnloadResponseAction = class JsBeforeUnloadResponseAction extends core.Object {
    get [_value]() {
      return this[_value$3];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.JsBeforeUnloadResponseAction._internal = function(_value) {
    this[_value$3] = _value;
    ;
  }).prototype = types.JsBeforeUnloadResponseAction.prototype;
  dart.addTypeTests(types.JsBeforeUnloadResponseAction);
  dart.addTypeCaches(types.JsBeforeUnloadResponseAction);
  dart.setMethodSignature(types.JsBeforeUnloadResponseAction, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.JsBeforeUnloadResponseAction, () => ({
    __proto__: dart.getGetters(types.JsBeforeUnloadResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.JsBeforeUnloadResponseAction, I[22]);
  dart.setFieldSignature(types.JsBeforeUnloadResponseAction, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsBeforeUnloadResponseAction, ['hashCode']);
  dart.defineLazy(types.JsBeforeUnloadResponseAction, {
    /*types.JsBeforeUnloadResponseAction.CONFIRM*/get CONFIRM() {
      return C[60] || CT.C60;
    },
    /*types.JsBeforeUnloadResponseAction.CANCEL*/get CANCEL() {
      return C[61] || CT.C61;
    }
  }, true);
  var message$7 = dart.privateName(types, "JsBeforeUnloadResponse.message");
  var confirmButtonTitle$2 = dart.privateName(types, "JsBeforeUnloadResponse.confirmButtonTitle");
  var cancelButtonTitle$1 = dart.privateName(types, "JsBeforeUnloadResponse.cancelButtonTitle");
  var handledByClient$2 = dart.privateName(types, "JsBeforeUnloadResponse.handledByClient");
  var action$5 = dart.privateName(types, "JsBeforeUnloadResponse.action");
  types.JsBeforeUnloadResponse = class JsBeforeUnloadResponse extends core.Object {
    get message() {
      return this[message$7];
    }
    set message(value) {
      this[message$7] = value;
    }
    get confirmButtonTitle() {
      return this[confirmButtonTitle$2];
    }
    set confirmButtonTitle(value) {
      this[confirmButtonTitle$2] = value;
    }
    get cancelButtonTitle() {
      return this[cancelButtonTitle$1];
    }
    set cancelButtonTitle(value) {
      this[cancelButtonTitle$1] = value;
    }
    get handledByClient() {
      return this[handledByClient$2];
    }
    set handledByClient(value) {
      this[handledByClient$2] = value;
    }
    get action() {
      return this[action$5];
    }
    set action(value) {
      this[action$5] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsBeforeUnloadResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    let action = opts && 'action' in opts ? opts.action : C[60] || CT.C60;
    this[message$7] = message;
    this[handledByClient$2] = handledByClient;
    this[confirmButtonTitle$2] = confirmButtonTitle;
    this[cancelButtonTitle$1] = cancelButtonTitle;
    this[action$5] = action;
    ;
  }).prototype = types.JsBeforeUnloadResponse.prototype;
  dart.addTypeTests(types.JsBeforeUnloadResponse);
  dart.addTypeCaches(types.JsBeforeUnloadResponse);
  dart.setMethodSignature(types.JsBeforeUnloadResponse, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.JsBeforeUnloadResponse, I[22]);
  dart.setFieldSignature(types.JsBeforeUnloadResponse, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadResponse.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    confirmButtonTitle: dart.fieldType(dart.legacy(core.String)),
    cancelButtonTitle: dart.fieldType(dart.legacy(core.String)),
    handledByClient: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.JsBeforeUnloadResponseAction))
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadResponse, ['toString']);
  var _value$4 = dart.privateName(types, "SafeBrowsingThreat._value");
  types.SafeBrowsingThreat = class SafeBrowsingThreat extends core.Object {
    get [_value]() {
      return this[_value$4];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.SafeBrowsingThreat.values[$firstWhere](dart.fn(element => element.toValue() == value, T.SafeBrowsingThreatLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "SAFE_BROWSING_THREAT_MALWARE";
        }
        case 2:
        {
          return "SAFE_BROWSING_THREAT_PHISHING";
        }
        case 3:
        {
          return "SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE";
        }
        case 4:
        {
          return "SAFE_BROWSING_THREAT_BILLING";
        }
        case 0:
        default:
        {
          return "SAFE_BROWSING_THREAT_UNKNOWN";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.SafeBrowsingThreat._internal = function(_value) {
    this[_value$4] = _value;
    ;
  }).prototype = types.SafeBrowsingThreat.prototype;
  dart.addTypeTests(types.SafeBrowsingThreat);
  dart.addTypeCaches(types.SafeBrowsingThreat);
  dart.setMethodSignature(types.SafeBrowsingThreat, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingThreat.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.SafeBrowsingThreat, () => ({
    __proto__: dart.getGetters(types.SafeBrowsingThreat.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.SafeBrowsingThreat, I[22]);
  dart.setFieldSignature(types.SafeBrowsingThreat, () => ({
    __proto__: dart.getFields(types.SafeBrowsingThreat.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.SafeBrowsingThreat, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.SafeBrowsingThreat, ['hashCode']);
  dart.defineLazy(types.SafeBrowsingThreat, {
    /*types.SafeBrowsingThreat.values*/get values() {
      return T.JSArrayOfSafeBrowsingThreatL().of([types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNKNOWN, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_MALWARE, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_PHISHING, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_BILLING])[$toSet]();
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNKNOWN*/get SAFE_BROWSING_THREAT_UNKNOWN() {
      return C[62] || CT.C62;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_MALWARE*/get SAFE_BROWSING_THREAT_MALWARE() {
      return C[63] || CT.C63;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_PHISHING*/get SAFE_BROWSING_THREAT_PHISHING() {
      return C[64] || CT.C64;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE*/get SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE() {
      return C[65] || CT.C65;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_BILLING*/get SAFE_BROWSING_THREAT_BILLING() {
      return C[66] || CT.C66;
    }
  }, true);
  var _value$5 = dart.privateName(types, "SafeBrowsingResponseAction._value");
  types.SafeBrowsingResponseAction = class SafeBrowsingResponseAction extends core.Object {
    get [_value]() {
      return this[_value$5];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.SafeBrowsingResponseAction._internal = function(_value) {
    this[_value$5] = _value;
    ;
  }).prototype = types.SafeBrowsingResponseAction.prototype;
  dart.addTypeTests(types.SafeBrowsingResponseAction);
  dart.addTypeCaches(types.SafeBrowsingResponseAction);
  dart.setMethodSignature(types.SafeBrowsingResponseAction, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.SafeBrowsingResponseAction, () => ({
    __proto__: dart.getGetters(types.SafeBrowsingResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.SafeBrowsingResponseAction, I[22]);
  dart.setFieldSignature(types.SafeBrowsingResponseAction, () => ({
    __proto__: dart.getFields(types.SafeBrowsingResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.SafeBrowsingResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.SafeBrowsingResponseAction, ['hashCode']);
  dart.defineLazy(types.SafeBrowsingResponseAction, {
    /*types.SafeBrowsingResponseAction.BACK_TO_SAFETY*/get BACK_TO_SAFETY() {
      return C[67] || CT.C67;
    },
    /*types.SafeBrowsingResponseAction.PROCEED*/get PROCEED() {
      return C[68] || CT.C68;
    },
    /*types.SafeBrowsingResponseAction.SHOW_INTERSTITIAL*/get SHOW_INTERSTITIAL() {
      return C[69] || CT.C69;
    }
  }, true);
  var report$ = dart.privateName(types, "SafeBrowsingResponse.report");
  var action$6 = dart.privateName(types, "SafeBrowsingResponse.action");
  types.SafeBrowsingResponse = class SafeBrowsingResponse extends core.Object {
    get report() {
      return this[report$];
    }
    set report(value) {
      this[report$] = value;
    }
    get action() {
      return this[action$6];
    }
    set action(value) {
      this[action$6] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["report", this.report, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SafeBrowsingResponse.new = function(opts) {
    let report = opts && 'report' in opts ? opts.report : true;
    let action = opts && 'action' in opts ? opts.action : C[69] || CT.C69;
    this[report$] = report;
    this[action$6] = action;
    ;
  }).prototype = types.SafeBrowsingResponse.prototype;
  dart.addTypeTests(types.SafeBrowsingResponse);
  dart.addTypeCaches(types.SafeBrowsingResponse);
  dart.setMethodSignature(types.SafeBrowsingResponse, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.SafeBrowsingResponse, I[22]);
  dart.setFieldSignature(types.SafeBrowsingResponse, () => ({
    __proto__: dart.getFields(types.SafeBrowsingResponse.__proto__),
    report: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.SafeBrowsingResponseAction))
  }));
  dart.defineExtensionMethods(types.SafeBrowsingResponse, ['toString']);
  var _value$6 = dart.privateName(types, "HttpAuthResponseAction._value");
  types.HttpAuthResponseAction = class HttpAuthResponseAction extends core.Object {
    get [_value]() {
      return this[_value$6];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.HttpAuthResponseAction._internal = function(_value) {
    this[_value$6] = _value;
    ;
  }).prototype = types.HttpAuthResponseAction.prototype;
  dart.addTypeTests(types.HttpAuthResponseAction);
  dart.addTypeCaches(types.HttpAuthResponseAction);
  dart.setMethodSignature(types.HttpAuthResponseAction, () => ({
    __proto__: dart.getMethods(types.HttpAuthResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.HttpAuthResponseAction, () => ({
    __proto__: dart.getGetters(types.HttpAuthResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.HttpAuthResponseAction, I[22]);
  dart.setFieldSignature(types.HttpAuthResponseAction, () => ({
    __proto__: dart.getFields(types.HttpAuthResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.HttpAuthResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.HttpAuthResponseAction, ['hashCode']);
  dart.defineLazy(types.HttpAuthResponseAction, {
    /*types.HttpAuthResponseAction.CANCEL*/get CANCEL() {
      return C[70] || CT.C70;
    },
    /*types.HttpAuthResponseAction.PROCEED*/get PROCEED() {
      return C[71] || CT.C71;
    },
    /*types.HttpAuthResponseAction.USE_SAVED_HTTP_AUTH_CREDENTIALS*/get USE_SAVED_HTTP_AUTH_CREDENTIALS() {
      return C[72] || CT.C72;
    }
  }, true);
  var username$ = dart.privateName(types, "HttpAuthResponse.username");
  var password$ = dart.privateName(types, "HttpAuthResponse.password");
  var permanentPersistence$ = dart.privateName(types, "HttpAuthResponse.permanentPersistence");
  var action$7 = dart.privateName(types, "HttpAuthResponse.action");
  types.HttpAuthResponse = class HttpAuthResponse extends core.Object {
    get username() {
      return this[username$];
    }
    set username(value) {
      this[username$] = value;
    }
    get password() {
      return this[password$];
    }
    set password(value) {
      this[password$] = value;
    }
    get permanentPersistence() {
      return this[permanentPersistence$];
    }
    set permanentPersistence(value) {
      this[permanentPersistence$] = value;
    }
    get action() {
      return this[action$7];
    }
    set action(value) {
      this[action$7] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["username", this.username, "password", this.password, "permanentPersistence", this.permanentPersistence, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.HttpAuthResponse.new = function(opts) {
    let username = opts && 'username' in opts ? opts.username : "";
    let password = opts && 'password' in opts ? opts.password : "";
    let permanentPersistence = opts && 'permanentPersistence' in opts ? opts.permanentPersistence : false;
    let action = opts && 'action' in opts ? opts.action : C[70] || CT.C70;
    this[username$] = username;
    this[password$] = password;
    this[permanentPersistence$] = permanentPersistence;
    this[action$7] = action;
    ;
  }).prototype = types.HttpAuthResponse.prototype;
  dart.addTypeTests(types.HttpAuthResponse);
  dart.addTypeCaches(types.HttpAuthResponse);
  dart.setMethodSignature(types.HttpAuthResponse, () => ({
    __proto__: dart.getMethods(types.HttpAuthResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.HttpAuthResponse, I[22]);
  dart.setFieldSignature(types.HttpAuthResponse, () => ({
    __proto__: dart.getFields(types.HttpAuthResponse.__proto__),
    username: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String)),
    permanentPersistence: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.HttpAuthResponseAction))
  }));
  dart.defineExtensionMethods(types.HttpAuthResponse, ['toString']);
  var previousFailureCount$ = dart.privateName(types, "HttpAuthChallenge.previousFailureCount");
  var protectionSpace$ = dart.privateName(types, "HttpAuthChallenge.protectionSpace");
  types.HttpAuthChallenge = class HttpAuthChallenge extends core.Object {
    get previousFailureCount() {
      return this[previousFailureCount$];
    }
    set previousFailureCount(value) {
      this[previousFailureCount$] = value;
    }
    get protectionSpace() {
      return this[protectionSpace$];
    }
    set protectionSpace(value) {
      this[protectionSpace$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["previousFailureCount", this.previousFailureCount, "protectionSpace", (t13 = this.protectionSpace, t13 == null ? null : t13.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.HttpAuthChallenge.new = function(opts) {
    let previousFailureCount = opts && 'previousFailureCount' in opts ? opts.previousFailureCount : null;
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    this[previousFailureCount$] = previousFailureCount;
    this[protectionSpace$] = protectionSpace;
    if (!(previousFailureCount != null && protectionSpace != null)) dart.assertFailed(null, I[23], 989, 16, "previousFailureCount != null && protectionSpace != null");
    ;
  }).prototype = types.HttpAuthChallenge.prototype;
  dart.addTypeTests(types.HttpAuthChallenge);
  dart.addTypeCaches(types.HttpAuthChallenge);
  dart.setMethodSignature(types.HttpAuthChallenge, () => ({
    __proto__: dart.getMethods(types.HttpAuthChallenge.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.HttpAuthChallenge, I[22]);
  dart.setFieldSignature(types.HttpAuthChallenge, () => ({
    __proto__: dart.getFields(types.HttpAuthChallenge.__proto__),
    previousFailureCount: dart.fieldType(dart.legacy(core.int)),
    protectionSpace: dart.fieldType(dart.legacy(types.ProtectionSpace))
  }));
  dart.defineExtensionMethods(types.HttpAuthChallenge, ['toString']);
  var host$ = dart.privateName(types, "ProtectionSpace.host");
  var protocol$ = dart.privateName(types, "ProtectionSpace.protocol");
  var realm$ = dart.privateName(types, "ProtectionSpace.realm");
  var port$ = dart.privateName(types, "ProtectionSpace.port");
  types.ProtectionSpace = class ProtectionSpace extends core.Object {
    get host() {
      return this[host$];
    }
    set host(value) {
      this[host$] = value;
    }
    get protocol() {
      return this[protocol$];
    }
    set protocol(value) {
      this[protocol$] = value;
    }
    get realm() {
      return this[realm$];
    }
    set realm(value) {
      this[realm$] = value;
    }
    get port() {
      return this[port$];
    }
    set port(value) {
      this[port$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["host", this.host, "protocol", this.protocol, "realm", this.realm, "port", this.port]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ProtectionSpace.new = function(opts) {
    let host = opts && 'host' in opts ? opts.host : null;
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let realm = opts && 'realm' in opts ? opts.realm : null;
    let port = opts && 'port' in opts ? opts.port : null;
    this[host$] = host;
    this[protocol$] = protocol;
    this[realm$] = realm;
    this[port$] = port;
    if (!(host != null && protocol != null)) dart.assertFailed(null, I[23], 1026, 16, "host != null && protocol != null");
    ;
  }).prototype = types.ProtectionSpace.prototype;
  dart.addTypeTests(types.ProtectionSpace);
  dart.addTypeCaches(types.ProtectionSpace);
  dart.setMethodSignature(types.ProtectionSpace, () => ({
    __proto__: dart.getMethods(types.ProtectionSpace.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ProtectionSpace, I[22]);
  dart.setFieldSignature(types.ProtectionSpace, () => ({
    __proto__: dart.getFields(types.ProtectionSpace.__proto__),
    host: dart.fieldType(dart.legacy(core.String)),
    protocol: dart.fieldType(dart.legacy(core.String)),
    realm: dart.fieldType(dart.legacy(core.String)),
    port: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.ProtectionSpace, ['toString']);
  var username$0 = dart.privateName(types, "HttpAuthCredential.username");
  var password$0 = dart.privateName(types, "HttpAuthCredential.password");
  types.HttpAuthCredential = class HttpAuthCredential extends core.Object {
    get username() {
      return this[username$0];
    }
    set username(value) {
      this[username$0] = value;
    }
    get password() {
      return this[password$0];
    }
    set password(value) {
      this[password$0] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["username", this.username, "password", this.password]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.HttpAuthCredential.new = function(opts) {
    let username = opts && 'username' in opts ? opts.username : null;
    let password = opts && 'password' in opts ? opts.password : null;
    this[username$0] = username;
    this[password$0] = password;
    if (!(username != null && password != null)) dart.assertFailed(null, I[23], 1052, 16, "username != null && password != null");
    ;
  }).prototype = types.HttpAuthCredential.prototype;
  dart.addTypeTests(types.HttpAuthCredential);
  dart.addTypeCaches(types.HttpAuthCredential);
  dart.setMethodSignature(types.HttpAuthCredential, () => ({
    __proto__: dart.getMethods(types.HttpAuthCredential.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.HttpAuthCredential, I[22]);
  dart.setFieldSignature(types.HttpAuthCredential, () => ({
    __proto__: dart.getFields(types.HttpAuthCredential.__proto__),
    username: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.HttpAuthCredential, ['toString']);
  var protectionSpace$0 = dart.privateName(types, "ProtectionSpaceHttpAuthCredentials.protectionSpace");
  var credentials$ = dart.privateName(types, "ProtectionSpaceHttpAuthCredentials.credentials");
  types.ProtectionSpaceHttpAuthCredentials = class ProtectionSpaceHttpAuthCredentials extends core.Object {
    get protectionSpace() {
      return this[protectionSpace$0];
    }
    set protectionSpace(value) {
      this[protectionSpace$0] = value;
    }
    get credentials() {
      return this[credentials$];
    }
    set credentials(value) {
      this[credentials$] = value;
    }
    toMap() {
      let t13, t13$, t13$0;
      return new (T.IdentityMapOfStringL$dynamic()).from(["protectionSpace", (t13 = this.protectionSpace, t13 == null ? null : t13.toMap()), "credentials", (t13$0 = (t13$ = this.credentials, t13$ == null ? null : t13$[$map](T.MapLOfStringL$dynamic(), dart.fn(credential => {
          let t14;
          t14 = credential;
          return t14 == null ? null : t14.toMap();
        }, T.HttpAuthCredentialLToMapLOfStringL$dynamic()))), t13$0 == null ? null : t13$0[$toList]())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ProtectionSpaceHttpAuthCredentials.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    this[protectionSpace$0] = protectionSpace;
    this[credentials$] = credentials;
    ;
  }).prototype = types.ProtectionSpaceHttpAuthCredentials.prototype;
  dart.addTypeTests(types.ProtectionSpaceHttpAuthCredentials);
  dart.addTypeCaches(types.ProtectionSpaceHttpAuthCredentials);
  dart.setMethodSignature(types.ProtectionSpaceHttpAuthCredentials, () => ({
    __proto__: dart.getMethods(types.ProtectionSpaceHttpAuthCredentials.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ProtectionSpaceHttpAuthCredentials, I[22]);
  dart.setFieldSignature(types.ProtectionSpaceHttpAuthCredentials, () => ({
    __proto__: dart.getFields(types.ProtectionSpaceHttpAuthCredentials.__proto__),
    protectionSpace: dart.fieldType(dart.legacy(types.ProtectionSpace)),
    credentials: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.HttpAuthCredential))))
  }));
  dart.defineExtensionMethods(types.ProtectionSpaceHttpAuthCredentials, ['toString']);
  var _value$7 = dart.privateName(types, "ServerTrustAuthResponseAction._value");
  types.ServerTrustAuthResponseAction = class ServerTrustAuthResponseAction extends core.Object {
    get [_value]() {
      return this[_value$7];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ServerTrustAuthResponseAction._internal = function(_value) {
    this[_value$7] = _value;
    ;
  }).prototype = types.ServerTrustAuthResponseAction.prototype;
  dart.addTypeTests(types.ServerTrustAuthResponseAction);
  dart.addTypeCaches(types.ServerTrustAuthResponseAction);
  dart.setMethodSignature(types.ServerTrustAuthResponseAction, () => ({
    __proto__: dart.getMethods(types.ServerTrustAuthResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ServerTrustAuthResponseAction, () => ({
    __proto__: dart.getGetters(types.ServerTrustAuthResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ServerTrustAuthResponseAction, I[22]);
  dart.setFieldSignature(types.ServerTrustAuthResponseAction, () => ({
    __proto__: dart.getFields(types.ServerTrustAuthResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.ServerTrustAuthResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.ServerTrustAuthResponseAction, ['hashCode']);
  dart.defineLazy(types.ServerTrustAuthResponseAction, {
    /*types.ServerTrustAuthResponseAction.CANCEL*/get CANCEL() {
      return C[73] || CT.C73;
    },
    /*types.ServerTrustAuthResponseAction.PROCEED*/get PROCEED() {
      return C[74] || CT.C74;
    }
  }, true);
  var action$8 = dart.privateName(types, "ServerTrustAuthResponse.action");
  types.ServerTrustAuthResponse = class ServerTrustAuthResponse extends core.Object {
    get action() {
      return this[action$8];
    }
    set action(value) {
      this[action$8] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ServerTrustAuthResponse.new = function(opts) {
    let action = opts && 'action' in opts ? opts.action : C[73] || CT.C73;
    this[action$8] = action;
    ;
  }).prototype = types.ServerTrustAuthResponse.prototype;
  dart.addTypeTests(types.ServerTrustAuthResponse);
  dart.addTypeCaches(types.ServerTrustAuthResponse);
  dart.setMethodSignature(types.ServerTrustAuthResponse, () => ({
    __proto__: dart.getMethods(types.ServerTrustAuthResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ServerTrustAuthResponse, I[22]);
  dart.setFieldSignature(types.ServerTrustAuthResponse, () => ({
    __proto__: dart.getFields(types.ServerTrustAuthResponse.__proto__),
    action: dart.fieldType(dart.legacy(types.ServerTrustAuthResponseAction))
  }));
  dart.defineExtensionMethods(types.ServerTrustAuthResponse, ['toString']);
  var protectionSpace$1 = dart.privateName(types, "ServerTrustChallenge.protectionSpace");
  var androidError$ = dart.privateName(types, "ServerTrustChallenge.androidError");
  var iosError$ = dart.privateName(types, "ServerTrustChallenge.iosError");
  var message$8 = dart.privateName(types, "ServerTrustChallenge.message");
  var sslCertificate$ = dart.privateName(types, "ServerTrustChallenge.sslCertificate");
  types.ServerTrustChallenge = class ServerTrustChallenge extends core.Object {
    get protectionSpace() {
      return this[protectionSpace$1];
    }
    set protectionSpace(value) {
      this[protectionSpace$1] = value;
    }
    get androidError() {
      return this[androidError$];
    }
    set androidError(value) {
      this[androidError$] = value;
    }
    get iosError() {
      return this[iosError$];
    }
    set iosError(value) {
      this[iosError$] = value;
    }
    get message() {
      return this[message$8];
    }
    set message(value) {
      this[message$8] = value;
    }
    get sslCertificate() {
      return this[sslCertificate$];
    }
    set sslCertificate(value) {
      this[sslCertificate$] = value;
    }
    toMap() {
      let t13, t13$, t13$0, t13$1;
      return new (T.IdentityMapOfStringL$dynamic()).from(["protectionSpace", (t13 = this.protectionSpace, t13 == null ? null : t13.toMap()), "androidError", (t13$ = this.androidError, t13$ == null ? null : t13$.toValue()), "iosError", (t13$0 = this.iosError, t13$0 == null ? null : t13$0.toValue()), "message", this.message, "sslCertificate", (t13$1 = this.sslCertificate, t13$1 == null ? null : t13$1.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ServerTrustChallenge.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    let androidError = opts && 'androidError' in opts ? opts.androidError : null;
    let iosError = opts && 'iosError' in opts ? opts.iosError : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let sslCertificate = opts && 'sslCertificate' in opts ? opts.sslCertificate : null;
    this[protectionSpace$1] = protectionSpace;
    this[androidError$] = androidError;
    this[iosError$] = iosError;
    this[message$8] = message;
    this[sslCertificate$] = sslCertificate;
    if (!(protectionSpace != null)) dart.assertFailed(null, I[23], 1162, 16, "protectionSpace != null");
    ;
  }).prototype = types.ServerTrustChallenge.prototype;
  dart.addTypeTests(types.ServerTrustChallenge);
  dart.addTypeCaches(types.ServerTrustChallenge);
  dart.setMethodSignature(types.ServerTrustChallenge, () => ({
    __proto__: dart.getMethods(types.ServerTrustChallenge.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ServerTrustChallenge, I[22]);
  dart.setFieldSignature(types.ServerTrustChallenge, () => ({
    __proto__: dart.getFields(types.ServerTrustChallenge.__proto__),
    protectionSpace: dart.fieldType(dart.legacy(types.ProtectionSpace)),
    androidError: dart.fieldType(dart.legacy(types.AndroidSslError)),
    iosError: dart.fieldType(dart.legacy(types.IOSSslError)),
    message: dart.fieldType(dart.legacy(core.String)),
    sslCertificate: dart.fieldType(dart.legacy(types.SslCertificate))
  }));
  dart.defineExtensionMethods(types.ServerTrustChallenge, ['toString']);
  var _value$8 = dart.privateName(types, "ClientCertResponseAction._value");
  types.ClientCertResponseAction = class ClientCertResponseAction extends core.Object {
    get [_value]() {
      return this[_value$8];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ClientCertResponseAction._internal = function(_value) {
    this[_value$8] = _value;
    ;
  }).prototype = types.ClientCertResponseAction.prototype;
  dart.addTypeTests(types.ClientCertResponseAction);
  dart.addTypeCaches(types.ClientCertResponseAction);
  dart.setMethodSignature(types.ClientCertResponseAction, () => ({
    __proto__: dart.getMethods(types.ClientCertResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ClientCertResponseAction, () => ({
    __proto__: dart.getGetters(types.ClientCertResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ClientCertResponseAction, I[22]);
  dart.setFieldSignature(types.ClientCertResponseAction, () => ({
    __proto__: dart.getFields(types.ClientCertResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.ClientCertResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.ClientCertResponseAction, ['hashCode']);
  dart.defineLazy(types.ClientCertResponseAction, {
    /*types.ClientCertResponseAction.CANCEL*/get CANCEL() {
      return C[75] || CT.C75;
    },
    /*types.ClientCertResponseAction.PROCEED*/get PROCEED() {
      return C[76] || CT.C76;
    },
    /*types.ClientCertResponseAction.IGNORE*/get IGNORE() {
      return C[77] || CT.C77;
    }
  }, true);
  var certificatePath$ = dart.privateName(types, "ClientCertResponse.certificatePath");
  var certificatePassword$ = dart.privateName(types, "ClientCertResponse.certificatePassword");
  var androidKeyStoreType$ = dart.privateName(types, "ClientCertResponse.androidKeyStoreType");
  var action$9 = dart.privateName(types, "ClientCertResponse.action");
  types.ClientCertResponse = class ClientCertResponse extends core.Object {
    get certificatePath() {
      return this[certificatePath$];
    }
    set certificatePath(value) {
      this[certificatePath$] = value;
    }
    get certificatePassword() {
      return this[certificatePassword$];
    }
    set certificatePassword(value) {
      this[certificatePassword$] = value;
    }
    get androidKeyStoreType() {
      return this[androidKeyStoreType$];
    }
    set androidKeyStoreType(value) {
      this[androidKeyStoreType$] = value;
    }
    get action() {
      return this[action$9];
    }
    set action(value) {
      this[action$9] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["certificatePath", this.certificatePath, "certificatePassword", this.certificatePassword, "androidKeyStoreType", this.androidKeyStoreType, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ClientCertResponse.new = function(opts) {
    let certificatePath = opts && 'certificatePath' in opts ? opts.certificatePath : null;
    let certificatePassword = opts && 'certificatePassword' in opts ? opts.certificatePassword : "";
    let androidKeyStoreType = opts && 'androidKeyStoreType' in opts ? opts.androidKeyStoreType : "PKCS12";
    let action = opts && 'action' in opts ? opts.action : C[75] || CT.C75;
    this[certificatePath$] = certificatePath;
    this[certificatePassword$] = certificatePassword;
    this[androidKeyStoreType$] = androidKeyStoreType;
    this[action$9] = action;
    if (dart.equals(this.action, types.ClientCertResponseAction.PROCEED)) if (!(this.certificatePath != null && this.certificatePath[$isNotEmpty])) dart.assertFailed(null, I[23], 1227, 14, "certificatePath != null && certificatePath.isNotEmpty");
  }).prototype = types.ClientCertResponse.prototype;
  dart.addTypeTests(types.ClientCertResponse);
  dart.addTypeCaches(types.ClientCertResponse);
  dart.setMethodSignature(types.ClientCertResponse, () => ({
    __proto__: dart.getMethods(types.ClientCertResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ClientCertResponse, I[22]);
  dart.setFieldSignature(types.ClientCertResponse, () => ({
    __proto__: dart.getFields(types.ClientCertResponse.__proto__),
    certificatePath: dart.fieldType(dart.legacy(core.String)),
    certificatePassword: dart.fieldType(dart.legacy(core.String)),
    androidKeyStoreType: dart.fieldType(dart.legacy(core.String)),
    action: dart.fieldType(dart.legacy(types.ClientCertResponseAction))
  }));
  dart.defineExtensionMethods(types.ClientCertResponse, ['toString']);
  var protectionSpace$2 = dart.privateName(types, "ClientCertChallenge.protectionSpace");
  types.ClientCertChallenge = class ClientCertChallenge extends core.Object {
    get protectionSpace() {
      return this[protectionSpace$2];
    }
    set protectionSpace(value) {
      this[protectionSpace$2] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["protectionSpace", (t13 = this.protectionSpace, t13 == null ? null : t13.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ClientCertChallenge.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    this[protectionSpace$2] = protectionSpace;
    if (!(protectionSpace != null)) dart.assertFailed(null, I[23], 1256, 16, "protectionSpace != null");
    ;
  }).prototype = types.ClientCertChallenge.prototype;
  dart.addTypeTests(types.ClientCertChallenge);
  dart.addTypeCaches(types.ClientCertChallenge);
  dart.setMethodSignature(types.ClientCertChallenge, () => ({
    __proto__: dart.getMethods(types.ClientCertChallenge.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ClientCertChallenge, I[22]);
  dart.setFieldSignature(types.ClientCertChallenge, () => ({
    __proto__: dart.getFields(types.ClientCertChallenge.__proto__),
    protectionSpace: dart.fieldType(dart.legacy(types.ProtectionSpace))
  }));
  dart.defineExtensionMethods(types.ClientCertChallenge, ['toString']);
  var url$6 = dart.privateName(types, "Favicon.url");
  var rel$ = dart.privateName(types, "Favicon.rel");
  var width$ = dart.privateName(types, "Favicon.width");
  var height$ = dart.privateName(types, "Favicon.height");
  types.Favicon = class Favicon extends core.Object {
    get url() {
      return this[url$6];
    }
    set url(value) {
      this[url$6] = value;
    }
    get rel() {
      return this[rel$];
    }
    set rel(value) {
      this[rel$] = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      this[width$] = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      this[height$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "rel", this.rel, "width", this.width, "height", this.height]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.Favicon.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let rel = opts && 'rel' in opts ? opts.rel : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[url$6] = url;
    this[rel$] = rel;
    this[width$] = width;
    this[height$] = height;
    if (!(url != null)) dart.assertFailed(null, I[23], 1287, 16, "url != null");
    ;
  }).prototype = types.Favicon.prototype;
  dart.addTypeTests(types.Favicon);
  dart.addTypeCaches(types.Favicon);
  dart.setMethodSignature(types.Favicon, () => ({
    __proto__: dart.getMethods(types.Favicon.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.Favicon, I[22]);
  dart.setFieldSignature(types.Favicon, () => ({
    __proto__: dart.getFields(types.Favicon.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    rel: dart.fieldType(dart.legacy(core.String)),
    width: dart.fieldType(dart.legacy(core.int)),
    height: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.Favicon, ['toString']);
  const _value$9 = AndroidCacheMode__value;
  types.AndroidCacheMode = class AndroidCacheMode extends core.Object {
    get [_value]() {
      return this[_value$9];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidCacheMode.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidCacheModeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "LOAD_CACHE_ELSE_NETWORK";
        }
        case 2:
        {
          return "LOAD_NO_CACHE";
        }
        case 3:
        {
          return "LOAD_CACHE_ONLY";
        }
        case -1:
        default:
        {
          return "LOAD_DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidCacheMode._internal = function(_value) {
    this[_value$9] = _value;
    ;
  }).prototype = types.AndroidCacheMode.prototype;
  dart.addTypeTests(types.AndroidCacheMode);
  dart.addTypeCaches(types.AndroidCacheMode);
  dart.setMethodSignature(types.AndroidCacheMode, () => ({
    __proto__: dart.getMethods(types.AndroidCacheMode.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidCacheMode, () => ({
    __proto__: dart.getGetters(types.AndroidCacheMode.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidCacheMode, I[22]);
  dart.setFieldSignature(types.AndroidCacheMode, () => ({
    __proto__: dart.getFields(types.AndroidCacheMode.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidCacheMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidCacheMode, ['hashCode']);
  dart.defineLazy(types.AndroidCacheMode, {
    /*types.AndroidCacheMode.values*/get values() {
      return T.JSArrayOfAndroidCacheModeL().of([types.AndroidCacheMode.LOAD_DEFAULT, types.AndroidCacheMode.LOAD_CACHE_ELSE_NETWORK, types.AndroidCacheMode.LOAD_NO_CACHE, types.AndroidCacheMode.LOAD_CACHE_ONLY])[$toSet]();
    },
    /*types.AndroidCacheMode.LOAD_DEFAULT*/get LOAD_DEFAULT() {
      return C[34] || CT.C34;
    },
    /*types.AndroidCacheMode.LOAD_CACHE_ELSE_NETWORK*/get LOAD_CACHE_ELSE_NETWORK() {
      return C[78] || CT.C78;
    },
    /*types.AndroidCacheMode.LOAD_NO_CACHE*/get LOAD_NO_CACHE() {
      return C[79] || CT.C79;
    },
    /*types.AndroidCacheMode.LOAD_CACHE_ONLY*/get LOAD_CACHE_ONLY() {
      return C[80] || CT.C80;
    }
  }, true);
  var _value$10 = dart.privateName(types, "AndroidActionModeMenuItem._value");
  types.AndroidActionModeMenuItem = class AndroidActionModeMenuItem extends core.Object {
    get [_value]() {
      return this[_value$10];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidActionModeMenuItem.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidActionModeMenuItemLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "MENU_ITEM_SHARE";
        }
        case 2:
        {
          return "MENU_ITEM_WEB_SEARCH";
        }
        case 4:
        {
          return "MENU_ITEM_PROCESS_TEXT";
        }
        case 0:
        default:
        {
          return "MENU_ITEM_NONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidActionModeMenuItem._internal = function(_value) {
    this[_value$10] = _value;
    ;
  }).prototype = types.AndroidActionModeMenuItem.prototype;
  dart.addTypeTests(types.AndroidActionModeMenuItem);
  dart.addTypeCaches(types.AndroidActionModeMenuItem);
  dart.setMethodSignature(types.AndroidActionModeMenuItem, () => ({
    __proto__: dart.getMethods(types.AndroidActionModeMenuItem.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidActionModeMenuItem, () => ({
    __proto__: dart.getGetters(types.AndroidActionModeMenuItem.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidActionModeMenuItem, I[22]);
  dart.setFieldSignature(types.AndroidActionModeMenuItem, () => ({
    __proto__: dart.getFields(types.AndroidActionModeMenuItem.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidActionModeMenuItem, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidActionModeMenuItem, ['hashCode']);
  dart.defineLazy(types.AndroidActionModeMenuItem, {
    /*types.AndroidActionModeMenuItem.values*/get values() {
      return T.JSArrayOfAndroidActionModeMenuItemL().of([types.AndroidActionModeMenuItem.MENU_ITEM_NONE, types.AndroidActionModeMenuItem.MENU_ITEM_SHARE, types.AndroidActionModeMenuItem.MENU_ITEM_WEB_SEARCH, types.AndroidActionModeMenuItem.MENU_ITEM_PROCESS_TEXT])[$toSet]();
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_NONE*/get MENU_ITEM_NONE() {
      return C[81] || CT.C81;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_SHARE*/get MENU_ITEM_SHARE() {
      return C[82] || CT.C82;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_WEB_SEARCH*/get MENU_ITEM_WEB_SEARCH() {
      return C[83] || CT.C83;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_PROCESS_TEXT*/get MENU_ITEM_PROCESS_TEXT() {
      return C[84] || CT.C84;
    }
  }, true);
  const _value$11 = AndroidForceDark__value;
  types.AndroidForceDark = class AndroidForceDark extends core.Object {
    get [_value]() {
      return this[_value$11];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidForceDark.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidForceDarkLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "FORCE_DARK_AUTO";
        }
        case 2:
        {
          return "FORCE_DARK_ON";
        }
        case 0:
        default:
        {
          return "FORCE_DARK_OFF";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidForceDark._internal = function(_value) {
    this[_value$11] = _value;
    ;
  }).prototype = types.AndroidForceDark.prototype;
  dart.addTypeTests(types.AndroidForceDark);
  dart.addTypeCaches(types.AndroidForceDark);
  dart.setMethodSignature(types.AndroidForceDark, () => ({
    __proto__: dart.getMethods(types.AndroidForceDark.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidForceDark, () => ({
    __proto__: dart.getGetters(types.AndroidForceDark.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidForceDark, I[22]);
  dart.setFieldSignature(types.AndroidForceDark, () => ({
    __proto__: dart.getFields(types.AndroidForceDark.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidForceDark, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidForceDark, ['hashCode']);
  dart.defineLazy(types.AndroidForceDark, {
    /*types.AndroidForceDark.values*/get values() {
      return T.JSArrayOfAndroidForceDarkL().of([types.AndroidForceDark.FORCE_DARK_OFF, types.AndroidForceDark.FORCE_DARK_AUTO, types.AndroidForceDark.FORCE_DARK_ON])[$toSet]();
    },
    /*types.AndroidForceDark.FORCE_DARK_OFF*/get FORCE_DARK_OFF() {
      return C[35] || CT.C35;
    },
    /*types.AndroidForceDark.FORCE_DARK_AUTO*/get FORCE_DARK_AUTO() {
      return C[85] || CT.C85;
    },
    /*types.AndroidForceDark.FORCE_DARK_ON*/get FORCE_DARK_ON() {
      return C[86] || CT.C86;
    }
  }, true);
  var _value$12 = dart.privateName(types, "AndroidLayoutAlgorithm._value");
  types.AndroidLayoutAlgorithm = class AndroidLayoutAlgorithm extends core.Object {
    get [_value]() {
      return this[_value$12];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidLayoutAlgorithm.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidLayoutAlgorithmLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidLayoutAlgorithm._internal = function(_value) {
    this[_value$12] = _value;
    ;
  }).prototype = types.AndroidLayoutAlgorithm.prototype;
  dart.addTypeTests(types.AndroidLayoutAlgorithm);
  dart.addTypeCaches(types.AndroidLayoutAlgorithm);
  dart.setMethodSignature(types.AndroidLayoutAlgorithm, () => ({
    __proto__: dart.getMethods(types.AndroidLayoutAlgorithm.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidLayoutAlgorithm, () => ({
    __proto__: dart.getGetters(types.AndroidLayoutAlgorithm.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidLayoutAlgorithm, I[22]);
  dart.setFieldSignature(types.AndroidLayoutAlgorithm, () => ({
    __proto__: dart.getFields(types.AndroidLayoutAlgorithm.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.AndroidLayoutAlgorithm, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidLayoutAlgorithm, ['hashCode']);
  dart.defineLazy(types.AndroidLayoutAlgorithm, {
    /*types.AndroidLayoutAlgorithm.values*/get values() {
      return T.JSArrayOfAndroidLayoutAlgorithmL().of([types.AndroidLayoutAlgorithm.NORMAL, types.AndroidLayoutAlgorithm.TEXT_AUTOSIZING, types.AndroidLayoutAlgorithm.NARROW_COLUMNS])[$toSet]();
    },
    /*types.AndroidLayoutAlgorithm.NORMAL*/get NORMAL() {
      return C[87] || CT.C87;
    },
    /*types.AndroidLayoutAlgorithm.TEXT_AUTOSIZING*/get TEXT_AUTOSIZING() {
      return C[88] || CT.C88;
    },
    /*types.AndroidLayoutAlgorithm.NARROW_COLUMNS*/get NARROW_COLUMNS() {
      return C[89] || CT.C89;
    }
  }, true);
  var _value$13 = dart.privateName(types, "AndroidMixedContentMode._value");
  types.AndroidMixedContentMode = class AndroidMixedContentMode extends core.Object {
    get [_value]() {
      return this[_value$13];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidMixedContentMode.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidMixedContentModeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "MIXED_CONTENT_NEVER_ALLOW";
        }
        case 2:
        {
          return "MIXED_CONTENT_COMPATIBILITY_MODE";
        }
        case 0:
        default:
        {
          return "MIXED_CONTENT_ALWAYS_ALLOW";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidMixedContentMode._internal = function(_value) {
    this[_value$13] = _value;
    ;
  }).prototype = types.AndroidMixedContentMode.prototype;
  dart.addTypeTests(types.AndroidMixedContentMode);
  dart.addTypeCaches(types.AndroidMixedContentMode);
  dart.setMethodSignature(types.AndroidMixedContentMode, () => ({
    __proto__: dart.getMethods(types.AndroidMixedContentMode.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidMixedContentMode, () => ({
    __proto__: dart.getGetters(types.AndroidMixedContentMode.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidMixedContentMode, I[22]);
  dart.setFieldSignature(types.AndroidMixedContentMode, () => ({
    __proto__: dart.getFields(types.AndroidMixedContentMode.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidMixedContentMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidMixedContentMode, ['hashCode']);
  dart.defineLazy(types.AndroidMixedContentMode, {
    /*types.AndroidMixedContentMode.values*/get values() {
      return T.JSArrayOfAndroidMixedContentModeL().of([types.AndroidMixedContentMode.MIXED_CONTENT_ALWAYS_ALLOW, types.AndroidMixedContentMode.MIXED_CONTENT_NEVER_ALLOW, types.AndroidMixedContentMode.MIXED_CONTENT_COMPATIBILITY_MODE])[$toSet]();
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_ALWAYS_ALLOW*/get MIXED_CONTENT_ALWAYS_ALLOW() {
      return C[90] || CT.C90;
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_NEVER_ALLOW*/get MIXED_CONTENT_NEVER_ALLOW() {
      return C[91] || CT.C91;
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_COMPATIBILITY_MODE*/get MIXED_CONTENT_COMPATIBILITY_MODE() {
      return C[92] || CT.C92;
    }
  }, true);
  const _value$14 = IOSWKSelectionGranularity__value;
  types.IOSWKSelectionGranularity = class IOSWKSelectionGranularity extends core.Object {
    get [_value]() {
      return this[_value$14];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSWKSelectionGranularity.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSWKSelectionGranularityLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "CHARACTER";
        }
        case 0:
        default:
        {
          return "DYNAMIC";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSWKSelectionGranularity._internal = function(_value) {
    this[_value$14] = _value;
    ;
  }).prototype = types.IOSWKSelectionGranularity.prototype;
  dart.addTypeTests(types.IOSWKSelectionGranularity);
  dart.addTypeCaches(types.IOSWKSelectionGranularity);
  dart.setMethodSignature(types.IOSWKSelectionGranularity, () => ({
    __proto__: dart.getMethods(types.IOSWKSelectionGranularity.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSWKSelectionGranularity, () => ({
    __proto__: dart.getGetters(types.IOSWKSelectionGranularity.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSWKSelectionGranularity, I[22]);
  dart.setFieldSignature(types.IOSWKSelectionGranularity, () => ({
    __proto__: dart.getFields(types.IOSWKSelectionGranularity.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSWKSelectionGranularity, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKSelectionGranularity, ['hashCode']);
  dart.defineLazy(types.IOSWKSelectionGranularity, {
    /*types.IOSWKSelectionGranularity.values*/get values() {
      return T.JSArrayOfIOSWKSelectionGranularityL().of([types.IOSWKSelectionGranularity.DYNAMIC, types.IOSWKSelectionGranularity.CHARACTER])[$toSet]();
    },
    /*types.IOSWKSelectionGranularity.DYNAMIC*/get DYNAMIC() {
      return C[39] || CT.C39;
    },
    /*types.IOSWKSelectionGranularity.CHARACTER*/get CHARACTER() {
      return C[93] || CT.C93;
    }
  }, true);
  const _value$15 = IOSWKDataDetectorTypes__value;
  types.IOSWKDataDetectorTypes = class IOSWKDataDetectorTypes extends core.Object {
    get [_value]() {
      return this[_value$15];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSWKDataDetectorTypes.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSWKDataDetectorTypesLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSWKDataDetectorTypes._internal = function(_value) {
    this[_value$15] = _value;
    ;
  }).prototype = types.IOSWKDataDetectorTypes.prototype;
  dart.addTypeTests(types.IOSWKDataDetectorTypes);
  dart.addTypeCaches(types.IOSWKDataDetectorTypes);
  dart.setMethodSignature(types.IOSWKDataDetectorTypes, () => ({
    __proto__: dart.getMethods(types.IOSWKDataDetectorTypes.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSWKDataDetectorTypes, () => ({
    __proto__: dart.getGetters(types.IOSWKDataDetectorTypes.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSWKDataDetectorTypes, I[22]);
  dart.setFieldSignature(types.IOSWKDataDetectorTypes, () => ({
    __proto__: dart.getFields(types.IOSWKDataDetectorTypes.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.IOSWKDataDetectorTypes, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKDataDetectorTypes, ['hashCode']);
  dart.defineLazy(types.IOSWKDataDetectorTypes, {
    /*types.IOSWKDataDetectorTypes.values*/get values() {
      return T.JSArrayOfIOSWKDataDetectorTypesL().of([types.IOSWKDataDetectorTypes.NONE, types.IOSWKDataDetectorTypes.PHONE_NUMBER, types.IOSWKDataDetectorTypes.LINK, types.IOSWKDataDetectorTypes.ADDRESS, types.IOSWKDataDetectorTypes.CALENDAR_EVENT, types.IOSWKDataDetectorTypes.TRACKING_NUMBER, types.IOSWKDataDetectorTypes.FLIGHT_NUMBER, types.IOSWKDataDetectorTypes.LOOKUP_SUGGESTION, types.IOSWKDataDetectorTypes.SPOTLIGHT_SUGGESTION, types.IOSWKDataDetectorTypes.ALL])[$toSet]();
    },
    /*types.IOSWKDataDetectorTypes.NONE*/get NONE() {
      return C[41] || CT.C41;
    },
    /*types.IOSWKDataDetectorTypes.PHONE_NUMBER*/get PHONE_NUMBER() {
      return C[94] || CT.C94;
    },
    /*types.IOSWKDataDetectorTypes.LINK*/get LINK() {
      return C[95] || CT.C95;
    },
    /*types.IOSWKDataDetectorTypes.ADDRESS*/get ADDRESS() {
      return C[96] || CT.C96;
    },
    /*types.IOSWKDataDetectorTypes.CALENDAR_EVENT*/get CALENDAR_EVENT() {
      return C[97] || CT.C97;
    },
    /*types.IOSWKDataDetectorTypes.TRACKING_NUMBER*/get TRACKING_NUMBER() {
      return C[98] || CT.C98;
    },
    /*types.IOSWKDataDetectorTypes.FLIGHT_NUMBER*/get FLIGHT_NUMBER() {
      return C[99] || CT.C99;
    },
    /*types.IOSWKDataDetectorTypes.LOOKUP_SUGGESTION*/get LOOKUP_SUGGESTION() {
      return C[100] || CT.C100;
    },
    /*types.IOSWKDataDetectorTypes.SPOTLIGHT_SUGGESTION*/get SPOTLIGHT_SUGGESTION() {
      return C[101] || CT.C101;
    },
    /*types.IOSWKDataDetectorTypes.ALL*/get ALL() {
      return C[102] || CT.C102;
    }
  }, true);
  const _value$16 = IOSUIScrollViewDecelerationRate__value;
  types.IOSUIScrollViewDecelerationRate = class IOSUIScrollViewDecelerationRate extends core.Object {
    get [_value]() {
      return this[_value$16];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSUIScrollViewDecelerationRate.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSUIScrollViewDecelerationRateLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSUIScrollViewDecelerationRate._internal = function(_value) {
    this[_value$16] = _value;
    ;
  }).prototype = types.IOSUIScrollViewDecelerationRate.prototype;
  dart.addTypeTests(types.IOSUIScrollViewDecelerationRate);
  dart.addTypeCaches(types.IOSUIScrollViewDecelerationRate);
  dart.setMethodSignature(types.IOSUIScrollViewDecelerationRate, () => ({
    __proto__: dart.getMethods(types.IOSUIScrollViewDecelerationRate.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSUIScrollViewDecelerationRate, () => ({
    __proto__: dart.getGetters(types.IOSUIScrollViewDecelerationRate.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSUIScrollViewDecelerationRate, I[22]);
  dart.setFieldSignature(types.IOSUIScrollViewDecelerationRate, () => ({
    __proto__: dart.getFields(types.IOSUIScrollViewDecelerationRate.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.IOSUIScrollViewDecelerationRate, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIScrollViewDecelerationRate, ['hashCode']);
  dart.defineLazy(types.IOSUIScrollViewDecelerationRate, {
    /*types.IOSUIScrollViewDecelerationRate.values*/get values() {
      return T.JSArrayOfIOSUIScrollViewDecelerationRateL().of([types.IOSUIScrollViewDecelerationRate.NORMAL, types.IOSUIScrollViewDecelerationRate.FAST])[$toSet]();
    },
    /*types.IOSUIScrollViewDecelerationRate.NORMAL*/get NORMAL() {
      return C[42] || CT.C42;
    },
    /*types.IOSUIScrollViewDecelerationRate.FAST*/get FAST() {
      return C[103] || CT.C103;
    }
  }, true);
  const _value$17 = UserPreferredContentMode__value;
  types.UserPreferredContentMode = class UserPreferredContentMode extends core.Object {
    get [_value]() {
      return this[_value$17];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.UserPreferredContentMode.values[$firstWhere](dart.fn(element => element.toValue() == value, T.UserPreferredContentModeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "MOBILE";
        }
        case 2:
        {
          return "DESKTOP";
        }
        case 0:
        default:
        {
          return "RECOMMENDED";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.UserPreferredContentMode._internal = function(_value) {
    this[_value$17] = _value;
    ;
  }).prototype = types.UserPreferredContentMode.prototype;
  dart.addTypeTests(types.UserPreferredContentMode);
  dart.addTypeCaches(types.UserPreferredContentMode);
  dart.setMethodSignature(types.UserPreferredContentMode, () => ({
    __proto__: dart.getMethods(types.UserPreferredContentMode.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.UserPreferredContentMode, () => ({
    __proto__: dart.getGetters(types.UserPreferredContentMode.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.UserPreferredContentMode, I[22]);
  dart.setFieldSignature(types.UserPreferredContentMode, () => ({
    __proto__: dart.getFields(types.UserPreferredContentMode.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.UserPreferredContentMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.UserPreferredContentMode, ['hashCode']);
  dart.defineLazy(types.UserPreferredContentMode, {
    /*types.UserPreferredContentMode.values*/get values() {
      return T.JSArrayOfUserPreferredContentModeL().of([types.UserPreferredContentMode.RECOMMENDED, types.UserPreferredContentMode.MOBILE, types.UserPreferredContentMode.DESKTOP])[$toSet]();
    },
    /*types.UserPreferredContentMode.RECOMMENDED*/get RECOMMENDED() {
      return C[33] || CT.C33;
    },
    /*types.UserPreferredContentMode.MOBILE*/get MOBILE() {
      return C[104] || CT.C104;
    },
    /*types.UserPreferredContentMode.DESKTOP*/get DESKTOP() {
      return C[105] || CT.C105;
    }
  }, true);
  const _value$18 = IOSUIModalPresentationStyle__value;
  types.IOSUIModalPresentationStyle = class IOSUIModalPresentationStyle extends core.Object {
    get [_value]() {
      return this[_value$18];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSUIModalPresentationStyle.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSUIModalPresentationStyleLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "PAGE_SHEET";
        }
        case 2:
        {
          return "FORM_SHEET";
        }
        case 3:
        {
          return "CURRENT_CONTEXT";
        }
        case 4:
        {
          return "CUSTOM";
        }
        case 5:
        {
          return "OVER_FULL_SCREEN";
        }
        case 6:
        {
          return "OVER_CURRENT_CONTEXT";
        }
        case 7:
        {
          return "POPOVER";
        }
        case 8:
        {
          return "NONE";
        }
        case 9:
        {
          return "AUTOMATIC";
        }
        case 0:
        default:
        {
          return "FULL_SCREEN";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSUIModalPresentationStyle._internal = function(_value) {
    this[_value$18] = _value;
    ;
  }).prototype = types.IOSUIModalPresentationStyle.prototype;
  dart.addTypeTests(types.IOSUIModalPresentationStyle);
  dart.addTypeCaches(types.IOSUIModalPresentationStyle);
  dart.setMethodSignature(types.IOSUIModalPresentationStyle, () => ({
    __proto__: dart.getMethods(types.IOSUIModalPresentationStyle.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSUIModalPresentationStyle, () => ({
    __proto__: dart.getGetters(types.IOSUIModalPresentationStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSUIModalPresentationStyle, I[22]);
  dart.setFieldSignature(types.IOSUIModalPresentationStyle, () => ({
    __proto__: dart.getFields(types.IOSUIModalPresentationStyle.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSUIModalPresentationStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIModalPresentationStyle, ['hashCode']);
  dart.defineLazy(types.IOSUIModalPresentationStyle, {
    /*types.IOSUIModalPresentationStyle.values*/get values() {
      return T.JSArrayOfIOSUIModalPresentationStyleL().of([types.IOSUIModalPresentationStyle.FULL_SCREEN, types.IOSUIModalPresentationStyle.PAGE_SHEET, types.IOSUIModalPresentationStyle.FORM_SHEET, types.IOSUIModalPresentationStyle.CURRENT_CONTEXT, types.IOSUIModalPresentationStyle.CUSTOM, types.IOSUIModalPresentationStyle.OVER_FULL_SCREEN, types.IOSUIModalPresentationStyle.OVER_CURRENT_CONTEXT, types.IOSUIModalPresentationStyle.POPOVER, types.IOSUIModalPresentationStyle.NONE, types.IOSUIModalPresentationStyle.AUTOMATIC])[$toSet]();
    },
    /*types.IOSUIModalPresentationStyle.FULL_SCREEN*/get FULL_SCREEN() {
      return C[44] || CT.C44;
    },
    /*types.IOSUIModalPresentationStyle.PAGE_SHEET*/get PAGE_SHEET() {
      return C[106] || CT.C106;
    },
    /*types.IOSUIModalPresentationStyle.FORM_SHEET*/get FORM_SHEET() {
      return C[107] || CT.C107;
    },
    /*types.IOSUIModalPresentationStyle.CURRENT_CONTEXT*/get CURRENT_CONTEXT() {
      return C[108] || CT.C108;
    },
    /*types.IOSUIModalPresentationStyle.CUSTOM*/get CUSTOM() {
      return C[109] || CT.C109;
    },
    /*types.IOSUIModalPresentationStyle.OVER_FULL_SCREEN*/get OVER_FULL_SCREEN() {
      return C[110] || CT.C110;
    },
    /*types.IOSUIModalPresentationStyle.OVER_CURRENT_CONTEXT*/get OVER_CURRENT_CONTEXT() {
      return C[111] || CT.C111;
    },
    /*types.IOSUIModalPresentationStyle.POPOVER*/get POPOVER() {
      return C[112] || CT.C112;
    },
    /*types.IOSUIModalPresentationStyle.NONE*/get NONE() {
      return C[113] || CT.C113;
    },
    /*types.IOSUIModalPresentationStyle.AUTOMATIC*/get AUTOMATIC() {
      return C[114] || CT.C114;
    }
  }, true);
  const _value$19 = IOSUIModalTransitionStyle__value;
  types.IOSUIModalTransitionStyle = class IOSUIModalTransitionStyle extends core.Object {
    get [_value]() {
      return this[_value$19];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSUIModalTransitionStyle.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSUIModalTransitionStyleLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "FLIP_HORIZONTAL";
        }
        case 2:
        {
          return "CROSS_DISSOLVE";
        }
        case 3:
        {
          return "PARTIAL_CURL";
        }
        case 0:
        default:
        {
          return "COVER_VERTICAL";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSUIModalTransitionStyle._internal = function(_value) {
    this[_value$19] = _value;
    ;
  }).prototype = types.IOSUIModalTransitionStyle.prototype;
  dart.addTypeTests(types.IOSUIModalTransitionStyle);
  dart.addTypeCaches(types.IOSUIModalTransitionStyle);
  dart.setMethodSignature(types.IOSUIModalTransitionStyle, () => ({
    __proto__: dart.getMethods(types.IOSUIModalTransitionStyle.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSUIModalTransitionStyle, () => ({
    __proto__: dart.getGetters(types.IOSUIModalTransitionStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSUIModalTransitionStyle, I[22]);
  dart.setFieldSignature(types.IOSUIModalTransitionStyle, () => ({
    __proto__: dart.getFields(types.IOSUIModalTransitionStyle.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSUIModalTransitionStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIModalTransitionStyle, ['hashCode']);
  dart.defineLazy(types.IOSUIModalTransitionStyle, {
    /*types.IOSUIModalTransitionStyle.values*/get values() {
      return T.JSArrayOfIOSUIModalTransitionStyleL().of([types.IOSUIModalTransitionStyle.COVER_VERTICAL, types.IOSUIModalTransitionStyle.FLIP_HORIZONTAL, types.IOSUIModalTransitionStyle.CROSS_DISSOLVE, types.IOSUIModalTransitionStyle.PARTIAL_CURL])[$toSet]();
    },
    /*types.IOSUIModalTransitionStyle.COVER_VERTICAL*/get COVER_VERTICAL() {
      return C[45] || CT.C45;
    },
    /*types.IOSUIModalTransitionStyle.FLIP_HORIZONTAL*/get FLIP_HORIZONTAL() {
      return C[115] || CT.C115;
    },
    /*types.IOSUIModalTransitionStyle.CROSS_DISSOLVE*/get CROSS_DISSOLVE() {
      return C[116] || CT.C116;
    },
    /*types.IOSUIModalTransitionStyle.PARTIAL_CURL*/get PARTIAL_CURL() {
      return C[117] || CT.C117;
    }
  }, true);
  const _value$20 = IOSSafariDismissButtonStyle__value;
  types.IOSSafariDismissButtonStyle = class IOSSafariDismissButtonStyle extends core.Object {
    get [_value]() {
      return this[_value$20];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSSafariDismissButtonStyle.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSSafariDismissButtonStyleLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "CLOSE";
        }
        case 2:
        {
          return "CANCEL";
        }
        case 0:
        default:
        {
          return "DONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSSafariDismissButtonStyle._internal = function(_value) {
    this[_value$20] = _value;
    ;
  }).prototype = types.IOSSafariDismissButtonStyle.prototype;
  dart.addTypeTests(types.IOSSafariDismissButtonStyle);
  dart.addTypeCaches(types.IOSSafariDismissButtonStyle);
  dart.setMethodSignature(types.IOSSafariDismissButtonStyle, () => ({
    __proto__: dart.getMethods(types.IOSSafariDismissButtonStyle.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSSafariDismissButtonStyle, () => ({
    __proto__: dart.getGetters(types.IOSSafariDismissButtonStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSSafariDismissButtonStyle, I[22]);
  dart.setFieldSignature(types.IOSSafariDismissButtonStyle, () => ({
    __proto__: dart.getFields(types.IOSSafariDismissButtonStyle.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSSafariDismissButtonStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSSafariDismissButtonStyle, ['hashCode']);
  dart.defineLazy(types.IOSSafariDismissButtonStyle, {
    /*types.IOSSafariDismissButtonStyle.values*/get values() {
      return T.JSArrayOfIOSSafariDismissButtonStyleL().of([types.IOSSafariDismissButtonStyle.DONE, types.IOSSafariDismissButtonStyle.CLOSE, types.IOSSafariDismissButtonStyle.CANCEL])[$toSet]();
    },
    /*types.IOSSafariDismissButtonStyle.DONE*/get DONE() {
      return C[46] || CT.C46;
    },
    /*types.IOSSafariDismissButtonStyle.CLOSE*/get CLOSE() {
      return C[118] || CT.C118;
    },
    /*types.IOSSafariDismissButtonStyle.CANCEL*/get CANCEL() {
      return C[119] || CT.C119;
    }
  }, true);
  var crossPlatform$ = dart.privateName(types, "InAppWebViewGroupOptions.crossPlatform");
  var android$0 = dart.privateName(types, "InAppWebViewGroupOptions.android");
  var ios$0 = dart.privateName(types, "InAppWebViewGroupOptions.ios");
  types.InAppWebViewGroupOptions = class InAppWebViewGroupOptions extends core.Object {
    get crossPlatform() {
      return this[crossPlatform$];
    }
    set crossPlatform(value) {
      this[crossPlatform$] = value;
    }
    get android() {
      return this[android$0];
    }
    set android(value) {
      this[android$0] = value;
    }
    get ios() {
      return this[ios$0];
    }
    set ios(value) {
      this[ios$0] = value;
    }
    toMap() {
      let t13, t13$, t13$0, t13$1, t13$2, t13$3;
      let options = new (T.IdentityMapOfStringL$dynamic()).new();
      options[$addAll]((t13$ = (t13 = this.crossPlatform, t13 == null ? null : t13.toMap()), t13$ == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$));
      if (dart.test(io.Platform.isAndroid))
        options[$addAll]((t13$1 = (t13$0 = this.android, t13$0 == null ? null : t13$0.toMap()), t13$1 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$1));
      else if (dart.test(io.Platform.isIOS)) options[$addAll]((t13$3 = (t13$2 = this.ios, t13$2 == null ? null : t13$2.toMap()), t13$3 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$3));
      return options;
    }
    static fromMap(options) {
      let inAppWebViewGroupOptions = new types.InAppWebViewGroupOptions.new();
      inAppWebViewGroupOptions.crossPlatform = webview_options.InAppWebViewOptions.fromMap(options);
      if (dart.test(io.Platform.isAndroid))
        inAppWebViewGroupOptions.android = webview_options.AndroidInAppWebViewOptions.fromMap(options);
      else if (dart.test(io.Platform.isIOS)) inAppWebViewGroupOptions.ios = webview_options.IOSInAppWebViewOptions.fromMap(options);
      return inAppWebViewGroupOptions;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return types.InAppWebViewGroupOptions.fromMap(this.toMap());
    }
  };
  (types.InAppWebViewGroupOptions.new = function(opts) {
    let t13, t13$, t13$0;
    let crossPlatform = opts && 'crossPlatform' in opts ? opts.crossPlatform : null;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    this[crossPlatform$] = crossPlatform;
    this[android$0] = android;
    this[ios$0] = ios;
    this.crossPlatform = (t13 = this.crossPlatform, t13 == null ? new webview_options.InAppWebViewOptions.new() : t13);
    this.android = (t13$ = this.android, t13$ == null ? new webview_options.AndroidInAppWebViewOptions.new() : t13$);
    this.ios = (t13$0 = this.ios, t13$0 == null ? new webview_options.IOSInAppWebViewOptions.new() : t13$0);
  }).prototype = types.InAppWebViewGroupOptions.prototype;
  dart.addTypeTests(types.InAppWebViewGroupOptions);
  dart.addTypeCaches(types.InAppWebViewGroupOptions);
  dart.setMethodSignature(types.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getMethods(types.InAppWebViewGroupOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(types.InAppWebViewGroupOptions), [])
  }));
  dart.setLibraryUri(types.InAppWebViewGroupOptions, I[22]);
  dart.setFieldSignature(types.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getFields(types.InAppWebViewGroupOptions.__proto__),
    crossPlatform: dart.fieldType(dart.legacy(webview_options.InAppWebViewOptions)),
    android: dart.fieldType(dart.legacy(webview_options.AndroidInAppWebViewOptions)),
    ios: dart.fieldType(dart.legacy(webview_options.IOSInAppWebViewOptions))
  }));
  dart.defineExtensionMethods(types.InAppWebViewGroupOptions, ['toString']);
  var crossPlatform$0 = dart.privateName(types, "InAppBrowserClassOptions.crossPlatform");
  var android$1 = dart.privateName(types, "InAppBrowserClassOptions.android");
  var ios$1 = dart.privateName(types, "InAppBrowserClassOptions.ios");
  var inAppWebViewGroupOptions$ = dart.privateName(types, "InAppBrowserClassOptions.inAppWebViewGroupOptions");
  types.InAppBrowserClassOptions = class InAppBrowserClassOptions extends core.Object {
    get crossPlatform() {
      return this[crossPlatform$0];
    }
    set crossPlatform(value) {
      this[crossPlatform$0] = value;
    }
    get android() {
      return this[android$1];
    }
    set android(value) {
      this[android$1] = value;
    }
    get ios() {
      return this[ios$1];
    }
    set ios(value) {
      this[ios$1] = value;
    }
    get inAppWebViewGroupOptions() {
      return this[inAppWebViewGroupOptions$];
    }
    set inAppWebViewGroupOptions(value) {
      this[inAppWebViewGroupOptions$] = value;
    }
    toMap() {
      let t13, t13$, t13$0, t13$1, t13$2, t13$3, t13$4, t13$5, t13$6, t13$7, t13$8, t13$9, t13$10, t13$11, t13$12;
      let options = new (T.IdentityMapOfStringL$dynamic()).new();
      options[$addAll]((t13$ = (t13 = this.crossPlatform, t13 == null ? null : t13.toMap()), t13$ == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$));
      options[$addAll]((t13$2 = (t13$1 = (t13$0 = this.inAppWebViewGroupOptions, t13$0 == null ? null : t13$0.crossPlatform), t13$1 == null ? null : t13$1.toMap()), t13$2 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$2));
      if (dart.test(io.Platform.isAndroid)) {
        options[$addAll]((t13$4 = (t13$3 = this.android, t13$3 == null ? null : t13$3.toMap()), t13$4 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$4));
        options[$addAll]((t13$7 = (t13$6 = (t13$5 = this.inAppWebViewGroupOptions, t13$5 == null ? null : t13$5.android), t13$6 == null ? null : t13$6.toMap()), t13$7 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$7));
      } else if (dart.test(io.Platform.isIOS)) {
        options[$addAll]((t13$9 = (t13$8 = this.ios, t13$8 == null ? null : t13$8.toMap()), t13$9 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$9));
        options[$addAll]((t13$12 = (t13$11 = (t13$10 = this.inAppWebViewGroupOptions, t13$10 == null ? null : t13$10.ios), t13$11 == null ? null : t13$11.toMap()), t13$12 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$12));
      }
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    static fromMap(options) {
      let inAppBrowserClassOptions = new types.InAppBrowserClassOptions.new();
      inAppBrowserClassOptions.crossPlatform = webview_options.InAppBrowserOptions.fromMap(options);
      inAppBrowserClassOptions.inAppWebViewGroupOptions = new types.InAppWebViewGroupOptions.new();
      inAppBrowserClassOptions.inAppWebViewGroupOptions.crossPlatform = webview_options.InAppWebViewOptions.fromMap(options);
      if (dart.test(io.Platform.isAndroid)) {
        inAppBrowserClassOptions.android = webview_options.AndroidInAppBrowserOptions.fromMap(options);
        inAppBrowserClassOptions.inAppWebViewGroupOptions.android = webview_options.AndroidInAppWebViewOptions.fromMap(options);
      } else if (dart.test(io.Platform.isIOS)) {
        inAppBrowserClassOptions.ios = webview_options.IOSInAppBrowserOptions.fromMap(options);
        inAppBrowserClassOptions.inAppWebViewGroupOptions.ios = webview_options.IOSInAppWebViewOptions.fromMap(options);
      }
      return inAppBrowserClassOptions;
    }
    copy() {
      return types.InAppBrowserClassOptions.fromMap(this.toMap());
    }
  };
  (types.InAppBrowserClassOptions.new = function(opts) {
    let t13, t13$, t13$0, t13$1;
    let crossPlatform = opts && 'crossPlatform' in opts ? opts.crossPlatform : null;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    let inAppWebViewGroupOptions = opts && 'inAppWebViewGroupOptions' in opts ? opts.inAppWebViewGroupOptions : null;
    this[crossPlatform$0] = crossPlatform;
    this[android$1] = android;
    this[ios$1] = ios;
    this[inAppWebViewGroupOptions$] = inAppWebViewGroupOptions;
    this.crossPlatform = (t13 = this.crossPlatform, t13 == null ? new webview_options.InAppBrowserOptions.new() : t13);
    this.android = (t13$ = this.android, t13$ == null ? new webview_options.AndroidInAppBrowserOptions.new() : t13$);
    this.ios = (t13$0 = this.ios, t13$0 == null ? new webview_options.IOSInAppBrowserOptions.new() : t13$0);
    this.inAppWebViewGroupOptions = (t13$1 = this.inAppWebViewGroupOptions, t13$1 == null ? new types.InAppWebViewGroupOptions.new() : t13$1);
  }).prototype = types.InAppBrowserClassOptions.prototype;
  dart.addTypeTests(types.InAppBrowserClassOptions);
  dart.addTypeCaches(types.InAppBrowserClassOptions);
  dart.setMethodSignature(types.InAppBrowserClassOptions, () => ({
    __proto__: dart.getMethods(types.InAppBrowserClassOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(types.InAppBrowserClassOptions), [])
  }));
  dart.setLibraryUri(types.InAppBrowserClassOptions, I[22]);
  dart.setFieldSignature(types.InAppBrowserClassOptions, () => ({
    __proto__: dart.getFields(types.InAppBrowserClassOptions.__proto__),
    crossPlatform: dart.fieldType(dart.legacy(webview_options.InAppBrowserOptions)),
    android: dart.fieldType(dart.legacy(webview_options.AndroidInAppBrowserOptions)),
    ios: dart.fieldType(dart.legacy(webview_options.IOSInAppBrowserOptions)),
    inAppWebViewGroupOptions: dart.fieldType(dart.legacy(types.InAppWebViewGroupOptions))
  }));
  dart.defineExtensionMethods(types.InAppBrowserClassOptions, ['toString']);
  var android$2 = dart.privateName(types, "ChromeSafariBrowserClassOptions.android");
  var ios$2 = dart.privateName(types, "ChromeSafariBrowserClassOptions.ios");
  types.ChromeSafariBrowserClassOptions = class ChromeSafariBrowserClassOptions extends core.Object {
    get android() {
      return this[android$2];
    }
    set android(value) {
      this[android$2] = value;
    }
    get ios() {
      return this[ios$2];
    }
    set ios(value) {
      this[ios$2] = value;
    }
    toMap() {
      let t13, t13$, t13$0, t13$1;
      let options = new (T.IdentityMapOfStringL$dynamic()).new();
      if (dart.test(io.Platform.isAndroid))
        options[$addAll]((t13$ = (t13 = this.android, t13 == null ? null : t13.toMap()), t13$ == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$));
      else if (dart.test(io.Platform.isIOS)) options[$addAll]((t13$1 = (t13$0 = this.ios, t13$0 == null ? null : t13$0.toMap()), t13$1 == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t13$1));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ChromeSafariBrowserClassOptions.new = function(opts) {
    let t13, t13$;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    this[android$2] = android;
    this[ios$2] = ios;
    this.android = (t13 = this.android, t13 == null ? new webview_options.AndroidChromeCustomTabsOptions.new() : t13);
    this.ios = (t13$ = this.ios, t13$ == null ? new webview_options.IOSSafariOptions.new() : t13$);
  }).prototype = types.ChromeSafariBrowserClassOptions.prototype;
  dart.addTypeTests(types.ChromeSafariBrowserClassOptions);
  dart.addTypeCaches(types.ChromeSafariBrowserClassOptions);
  dart.setMethodSignature(types.ChromeSafariBrowserClassOptions, () => ({
    __proto__: dart.getMethods(types.ChromeSafariBrowserClassOptions.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ChromeSafariBrowserClassOptions, I[22]);
  dart.setFieldSignature(types.ChromeSafariBrowserClassOptions, () => ({
    __proto__: dart.getFields(types.ChromeSafariBrowserClassOptions.__proto__),
    android: dart.fieldType(dart.legacy(webview_options.AndroidChromeCustomTabsOptions)),
    ios: dart.fieldType(dart.legacy(webview_options.IOSSafariOptions))
  }));
  dart.defineExtensionMethods(types.ChromeSafariBrowserClassOptions, ['toString']);
  var _value$21 = dart.privateName(types, "AjaxRequestAction._value");
  types.AjaxRequestAction = class AjaxRequestAction extends core.Object {
    get [_value]() {
      return this[_value$21];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["action", this[_value]]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequestAction._internal = function(_value) {
    this[_value$21] = _value;
    ;
  }).prototype = types.AjaxRequestAction.prototype;
  dart.addTypeTests(types.AjaxRequestAction);
  dart.addTypeCaches(types.AjaxRequestAction);
  dart.setMethodSignature(types.AjaxRequestAction, () => ({
    __proto__: dart.getMethods(types.AjaxRequestAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(types.AjaxRequestAction, () => ({
    __proto__: dart.getGetters(types.AjaxRequestAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AjaxRequestAction, I[22]);
  dart.setFieldSignature(types.AjaxRequestAction, () => ({
    __proto__: dart.getFields(types.AjaxRequestAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AjaxRequestAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(types.AjaxRequestAction, ['hashCode']);
  dart.defineLazy(types.AjaxRequestAction, {
    /*types.AjaxRequestAction.ABORT*/get ABORT() {
      return C[120] || CT.C120;
    },
    /*types.AjaxRequestAction.PROCEED*/get PROCEED() {
      return C[121] || CT.C121;
    }
  }, true);
  var _value$22 = dart.privateName(types, "AjaxRequestEventType._value");
  types.AjaxRequestEventType = class AjaxRequestEventType extends core.Object {
    get [_value]() {
      return this[_value$22];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AjaxRequestEventType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AjaxRequestEventTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AjaxRequestEventType._internal = function(_value) {
    this[_value$22] = _value;
    ;
  }).prototype = types.AjaxRequestEventType.prototype;
  dart.addTypeTests(types.AjaxRequestEventType);
  dart.addTypeCaches(types.AjaxRequestEventType);
  dart.setMethodSignature(types.AjaxRequestEventType, () => ({
    __proto__: dart.getMethods(types.AjaxRequestEventType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AjaxRequestEventType, () => ({
    __proto__: dart.getGetters(types.AjaxRequestEventType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AjaxRequestEventType, I[22]);
  dart.setFieldSignature(types.AjaxRequestEventType, () => ({
    __proto__: dart.getFields(types.AjaxRequestEventType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.AjaxRequestEventType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AjaxRequestEventType, ['hashCode']);
  dart.defineLazy(types.AjaxRequestEventType, {
    /*types.AjaxRequestEventType.values*/get values() {
      return T.JSArrayOfAjaxRequestEventTypeL().of([types.AjaxRequestEventType.LOADSTART, types.AjaxRequestEventType.LOAD, types.AjaxRequestEventType.LOADEND, types.AjaxRequestEventType.PROGRESS, types.AjaxRequestEventType.ERROR, types.AjaxRequestEventType.ABORT, types.AjaxRequestEventType.TIMEOUT])[$toSet]();
    },
    /*types.AjaxRequestEventType.LOADSTART*/get LOADSTART() {
      return C[122] || CT.C122;
    },
    /*types.AjaxRequestEventType.LOAD*/get LOAD() {
      return C[123] || CT.C123;
    },
    /*types.AjaxRequestEventType.LOADEND*/get LOADEND() {
      return C[124] || CT.C124;
    },
    /*types.AjaxRequestEventType.PROGRESS*/get PROGRESS() {
      return C[125] || CT.C125;
    },
    /*types.AjaxRequestEventType.ERROR*/get ERROR() {
      return C[126] || CT.C126;
    },
    /*types.AjaxRequestEventType.ABORT*/get ABORT() {
      return C[127] || CT.C127;
    },
    /*types.AjaxRequestEventType.TIMEOUT*/get TIMEOUT() {
      return C[128] || CT.C128;
    }
  }, true);
  var type$0 = dart.privateName(types, "AjaxRequestEvent.type");
  var lengthComputable$ = dart.privateName(types, "AjaxRequestEvent.lengthComputable");
  var loaded$ = dart.privateName(types, "AjaxRequestEvent.loaded");
  var total$ = dart.privateName(types, "AjaxRequestEvent.total");
  types.AjaxRequestEvent = class AjaxRequestEvent extends core.Object {
    get type() {
      return this[type$0];
    }
    set type(value) {
      this[type$0] = value;
    }
    get lengthComputable() {
      return this[lengthComputable$];
    }
    set lengthComputable(value) {
      this[lengthComputable$] = value;
    }
    get loaded() {
      return this[loaded$];
    }
    set loaded(value) {
      this[loaded$] = value;
    }
    get total() {
      return this[total$];
    }
    set total(value) {
      this[total$] = value;
    }
  };
  (types.AjaxRequestEvent.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let lengthComputable = opts && 'lengthComputable' in opts ? opts.lengthComputable : null;
    let loaded = opts && 'loaded' in opts ? opts.loaded : null;
    let total = opts && 'total' in opts ? opts.total : null;
    this[type$0] = type;
    this[lengthComputable$] = lengthComputable;
    this[loaded$] = loaded;
    this[total$] = total;
    ;
  }).prototype = types.AjaxRequestEvent.prototype;
  dart.addTypeTests(types.AjaxRequestEvent);
  dart.addTypeCaches(types.AjaxRequestEvent);
  dart.setLibraryUri(types.AjaxRequestEvent, I[22]);
  dart.setFieldSignature(types.AjaxRequestEvent, () => ({
    __proto__: dart.getFields(types.AjaxRequestEvent.__proto__),
    type: dart.fieldType(dart.legacy(types.AjaxRequestEventType)),
    lengthComputable: dart.fieldType(dart.legacy(core.bool)),
    loaded: dart.fieldType(dart.legacy(core.int)),
    total: dart.fieldType(dart.legacy(core.int))
  }));
  var _value$23 = dart.privateName(types, "AjaxRequestReadyState._value");
  types.AjaxRequestReadyState = class AjaxRequestReadyState extends core.Object {
    get [_value]() {
      return this[_value$23];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AjaxRequestReadyState.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AjaxRequestReadyStateLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "OPENED";
        }
        case 2:
        {
          return "HEADERS_RECEIVED";
        }
        case 3:
        {
          return "LOADING";
        }
        case 4:
        {
          return "DONE";
        }
        case 0:
        default:
        {
          return "UNSENT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AjaxRequestReadyState._internal = function(_value) {
    this[_value$23] = _value;
    ;
  }).prototype = types.AjaxRequestReadyState.prototype;
  dart.addTypeTests(types.AjaxRequestReadyState);
  dart.addTypeCaches(types.AjaxRequestReadyState);
  dart.setMethodSignature(types.AjaxRequestReadyState, () => ({
    __proto__: dart.getMethods(types.AjaxRequestReadyState.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AjaxRequestReadyState, () => ({
    __proto__: dart.getGetters(types.AjaxRequestReadyState.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AjaxRequestReadyState, I[22]);
  dart.setFieldSignature(types.AjaxRequestReadyState, () => ({
    __proto__: dart.getFields(types.AjaxRequestReadyState.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AjaxRequestReadyState, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AjaxRequestReadyState, ['hashCode']);
  dart.defineLazy(types.AjaxRequestReadyState, {
    /*types.AjaxRequestReadyState.values*/get values() {
      return T.JSArrayOfAjaxRequestReadyStateL().of([types.AjaxRequestReadyState.UNSENT, types.AjaxRequestReadyState.OPENED, types.AjaxRequestReadyState.HEADERS_RECEIVED, types.AjaxRequestReadyState.LOADING, types.AjaxRequestReadyState.DONE])[$toSet]();
    },
    /*types.AjaxRequestReadyState.UNSENT*/get UNSENT() {
      return C[129] || CT.C129;
    },
    /*types.AjaxRequestReadyState.OPENED*/get OPENED() {
      return C[130] || CT.C130;
    },
    /*types.AjaxRequestReadyState.HEADERS_RECEIVED*/get HEADERS_RECEIVED() {
      return C[131] || CT.C131;
    },
    /*types.AjaxRequestReadyState.LOADING*/get LOADING() {
      return C[132] || CT.C132;
    },
    /*types.AjaxRequestReadyState.DONE*/get DONE() {
      return C[133] || CT.C133;
    }
  }, true);
  var _newHeaders = dart.privateName(types, "_newHeaders");
  var _headers$ = dart.privateName(types, "_headers");
  types.AjaxRequestHeaders = class AjaxRequestHeaders extends core.Object {
    getHeaders() {
      return this[_headers$];
    }
    setRequestHeader(header, value) {
      this[_newHeaders][$_set](header, value);
    }
    toMap() {
      return this[_newHeaders];
    }
  };
  (types.AjaxRequestHeaders.new = function(_headers) {
    this[_newHeaders] = new (T.IdentityMapOfStringL$dynamic()).new();
    this[_headers$] = _headers;
    ;
  }).prototype = types.AjaxRequestHeaders.prototype;
  dart.addTypeTests(types.AjaxRequestHeaders);
  dart.addTypeCaches(types.AjaxRequestHeaders);
  dart.setMethodSignature(types.AjaxRequestHeaders, () => ({
    __proto__: dart.getMethods(types.AjaxRequestHeaders.__proto__),
    getHeaders: dart.fnType(dart.legacy(core.Map), []),
    setRequestHeader: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(types.AjaxRequestHeaders, I[22]);
  dart.setFieldSignature(types.AjaxRequestHeaders, () => ({
    __proto__: dart.getFields(types.AjaxRequestHeaders.__proto__),
    [_headers$]: dart.fieldType(dart.legacy(core.Map)),
    [_newHeaders]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  var data$2 = dart.privateName(types, "AjaxRequest.data");
  var method$0 = dart.privateName(types, "AjaxRequest.method");
  var url$7 = dart.privateName(types, "AjaxRequest.url");
  var isAsync$ = dart.privateName(types, "AjaxRequest.isAsync");
  var user$ = dart.privateName(types, "AjaxRequest.user");
  var password$1 = dart.privateName(types, "AjaxRequest.password");
  var withCredentials$ = dart.privateName(types, "AjaxRequest.withCredentials");
  var headers$1 = dart.privateName(types, "AjaxRequest.headers");
  var readyState$ = dart.privateName(types, "AjaxRequest.readyState");
  var status$ = dart.privateName(types, "AjaxRequest.status");
  var responseURL$ = dart.privateName(types, "AjaxRequest.responseURL");
  var responseType$ = dart.privateName(types, "AjaxRequest.responseType");
  var response$ = dart.privateName(types, "AjaxRequest.response");
  var responseText$ = dart.privateName(types, "AjaxRequest.responseText");
  var responseXML$ = dart.privateName(types, "AjaxRequest.responseXML");
  var statusText$ = dart.privateName(types, "AjaxRequest.statusText");
  var responseHeaders$ = dart.privateName(types, "AjaxRequest.responseHeaders");
  var event$ = dart.privateName(types, "AjaxRequest.event");
  var action$10 = dart.privateName(types, "AjaxRequest.action");
  types.AjaxRequest = class AjaxRequest extends core.Object {
    get data() {
      return this[data$2];
    }
    set data(value) {
      this[data$2] = value;
    }
    get method() {
      return this[method$0];
    }
    set method(value) {
      this[method$0] = value;
    }
    get url() {
      return this[url$7];
    }
    set url(value) {
      this[url$7] = value;
    }
    get isAsync() {
      return this[isAsync$];
    }
    set isAsync(value) {
      this[isAsync$] = value;
    }
    get user() {
      return this[user$];
    }
    set user(value) {
      this[user$] = value;
    }
    get password() {
      return this[password$1];
    }
    set password(value) {
      this[password$1] = value;
    }
    get withCredentials() {
      return this[withCredentials$];
    }
    set withCredentials(value) {
      this[withCredentials$] = value;
    }
    get headers() {
      return this[headers$1];
    }
    set headers(value) {
      this[headers$1] = value;
    }
    get readyState() {
      return this[readyState$];
    }
    set readyState(value) {
      this[readyState$] = value;
    }
    get status() {
      return this[status$];
    }
    set status(value) {
      this[status$] = value;
    }
    get responseURL() {
      return this[responseURL$];
    }
    set responseURL(value) {
      this[responseURL$] = value;
    }
    get responseType() {
      return this[responseType$];
    }
    set responseType(value) {
      this[responseType$] = value;
    }
    get response() {
      return this[response$];
    }
    set response(value) {
      this[response$] = value;
    }
    get responseText() {
      return this[responseText$];
    }
    set responseText(value) {
      this[responseText$] = value;
    }
    get responseXML() {
      return this[responseXML$];
    }
    set responseXML(value) {
      this[responseXML$] = value;
    }
    get statusText() {
      return this[statusText$];
    }
    set statusText(value) {
      this[statusText$] = value;
    }
    get responseHeaders() {
      return this[responseHeaders$];
    }
    set responseHeaders(value) {
      this[responseHeaders$] = value;
    }
    get event() {
      return this[event$];
    }
    set event(value) {
      this[event$] = value;
    }
    get action() {
      return this[action$10];
    }
    set action(value) {
      this[action$10] = value;
    }
    toMap() {
      let t13, t13$, t13$0;
      return new (T.IdentityMapOfStringL$dynamic()).from(["data", this.data, "method", this.method, "url", this.url, "isAsync", this.isAsync, "user", this.user, "password", this.password, "withCredentials", this.withCredentials, "headers", (t13 = this.headers, t13 == null ? null : t13.toMap()), "readyState", (t13$ = this.readyState, t13$ == null ? null : t13$.toValue()), "status", this.status, "responseURL", this.responseURL, "responseType", this.responseType, "response", this.response, "responseText", this.responseText, "responseXML", this.responseXML, "statusText", this.statusText, "responseHeaders", this.responseHeaders, "action", (t13$0 = this.action, t13$0 == null ? null : t13$0.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequest.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let isAsync = opts && 'isAsync' in opts ? opts.isAsync : null;
    let user = opts && 'user' in opts ? opts.user : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let readyState = opts && 'readyState' in opts ? opts.readyState : null;
    let status = opts && 'status' in opts ? opts.status : null;
    let responseURL = opts && 'responseURL' in opts ? opts.responseURL : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let response = opts && 'response' in opts ? opts.response : null;
    let responseText = opts && 'responseText' in opts ? opts.responseText : null;
    let responseXML = opts && 'responseXML' in opts ? opts.responseXML : null;
    let statusText = opts && 'statusText' in opts ? opts.statusText : null;
    let responseHeaders = opts && 'responseHeaders' in opts ? opts.responseHeaders : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let action = opts && 'action' in opts ? opts.action : C[121] || CT.C121;
    this[data$2] = data;
    this[method$0] = method;
    this[url$7] = url;
    this[isAsync$] = isAsync;
    this[user$] = user;
    this[password$1] = password;
    this[withCredentials$] = withCredentials;
    this[headers$1] = headers;
    this[readyState$] = readyState;
    this[status$] = status;
    this[responseURL$] = responseURL;
    this[responseType$] = responseType;
    this[response$] = response;
    this[responseText$] = responseText;
    this[responseXML$] = responseXML;
    this[statusText$] = statusText;
    this[responseHeaders$] = responseHeaders;
    this[event$] = event;
    this[action$10] = action;
    ;
  }).prototype = types.AjaxRequest.prototype;
  dart.addTypeTests(types.AjaxRequest);
  dart.addTypeCaches(types.AjaxRequest);
  dart.setMethodSignature(types.AjaxRequest, () => ({
    __proto__: dart.getMethods(types.AjaxRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.AjaxRequest, I[22]);
  dart.setFieldSignature(types.AjaxRequest, () => ({
    __proto__: dart.getFields(types.AjaxRequest.__proto__),
    data: dart.fieldType(dart.dynamic),
    method: dart.fieldType(dart.legacy(core.String)),
    url: dart.fieldType(dart.legacy(core.String)),
    isAsync: dart.fieldType(dart.legacy(core.bool)),
    user: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String)),
    withCredentials: dart.fieldType(dart.legacy(core.bool)),
    headers: dart.fieldType(dart.legacy(types.AjaxRequestHeaders)),
    readyState: dart.fieldType(dart.legacy(types.AjaxRequestReadyState)),
    status: dart.fieldType(dart.legacy(core.int)),
    responseURL: dart.fieldType(dart.legacy(core.String)),
    responseType: dart.fieldType(dart.legacy(core.String)),
    response: dart.fieldType(dart.dynamic),
    responseText: dart.fieldType(dart.legacy(core.String)),
    responseXML: dart.fieldType(dart.legacy(core.String)),
    statusText: dart.fieldType(dart.legacy(core.String)),
    responseHeaders: dart.fieldType(dart.legacy(core.Map)),
    event: dart.fieldType(dart.legacy(types.AjaxRequestEvent)),
    action: dart.fieldType(dart.legacy(types.AjaxRequestAction))
  }));
  dart.defineExtensionMethods(types.AjaxRequest, ['toString']);
  var _value$24 = dart.privateName(types, "FetchRequestAction._value");
  types.FetchRequestAction = class FetchRequestAction extends core.Object {
    get [_value]() {
      return this[_value$24];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.FetchRequestAction._internal = function(_value) {
    this[_value$24] = _value;
    ;
  }).prototype = types.FetchRequestAction.prototype;
  dart.addTypeTests(types.FetchRequestAction);
  dart.addTypeCaches(types.FetchRequestAction);
  dart.setMethodSignature(types.FetchRequestAction, () => ({
    __proto__: dart.getMethods(types.FetchRequestAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.FetchRequestAction, () => ({
    __proto__: dart.getGetters(types.FetchRequestAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.FetchRequestAction, I[22]);
  dart.setFieldSignature(types.FetchRequestAction, () => ({
    __proto__: dart.getFields(types.FetchRequestAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.FetchRequestAction, ['_equals']);
  dart.defineExtensionAccessors(types.FetchRequestAction, ['hashCode']);
  dart.defineLazy(types.FetchRequestAction, {
    /*types.FetchRequestAction.ABORT*/get ABORT() {
      return C[134] || CT.C134;
    },
    /*types.FetchRequestAction.PROCEED*/get PROCEED() {
      return C[135] || CT.C135;
    }
  }, true);
  var type$1 = dart.privateName(types, "FetchRequestCredential.type");
  types.FetchRequestCredential = class FetchRequestCredential extends core.Object {
    get type() {
      return this[type$1];
    }
    set type(value) {
      this[type$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["type", this.type]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    this[type$1] = type;
    ;
  }).prototype = types.FetchRequestCredential.prototype;
  dart.addTypeTests(types.FetchRequestCredential);
  dart.addTypeCaches(types.FetchRequestCredential);
  dart.setMethodSignature(types.FetchRequestCredential, () => ({
    __proto__: dart.getMethods(types.FetchRequestCredential.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.FetchRequestCredential, I[22]);
  dart.setFieldSignature(types.FetchRequestCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestCredential.__proto__),
    type: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestCredential, ['toString']);
  var value$1 = dart.privateName(types, "FetchRequestCredentialDefault.value");
  types.FetchRequestCredentialDefault = class FetchRequestCredentialDefault extends types.FetchRequestCredential {
    get value() {
      return this[value$1];
    }
    set value(value) {
      this[value$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["type", this.type, "value", this.value]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestCredentialDefault.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[value$1] = value;
    types.FetchRequestCredentialDefault.__proto__.new.call(this, {type: T.StringL().as(type)});
    ;
  }).prototype = types.FetchRequestCredentialDefault.prototype;
  dart.addTypeTests(types.FetchRequestCredentialDefault);
  dart.addTypeCaches(types.FetchRequestCredentialDefault);
  dart.setLibraryUri(types.FetchRequestCredentialDefault, I[22]);
  dart.setFieldSignature(types.FetchRequestCredentialDefault, () => ({
    __proto__: dart.getFields(types.FetchRequestCredentialDefault.__proto__),
    value: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestCredentialDefault, ['toString']);
  var id$0 = dart.privateName(types, "FetchRequestFederatedCredential.id");
  var name$ = dart.privateName(types, "FetchRequestFederatedCredential.name");
  var protocol$0 = dart.privateName(types, "FetchRequestFederatedCredential.protocol");
  var provider$ = dart.privateName(types, "FetchRequestFederatedCredential.provider");
  var iconURL$ = dart.privateName(types, "FetchRequestFederatedCredential.iconURL");
  types.FetchRequestFederatedCredential = class FetchRequestFederatedCredential extends types.FetchRequestCredential {
    get id() {
      return this[id$0];
    }
    set id(value) {
      this[id$0] = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get protocol() {
      return this[protocol$0];
    }
    set protocol(value) {
      this[protocol$0] = value;
    }
    get provider() {
      return this[provider$];
    }
    set provider(value) {
      this[provider$] = value;
    }
    get iconURL() {
      return this[iconURL$];
    }
    set iconURL(value) {
      this[iconURL$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "protocol", this.protocol, "provider", this.provider, "iconURL", this.iconURL]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestFederatedCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let provider = opts && 'provider' in opts ? opts.provider : null;
    let iconURL = opts && 'iconURL' in opts ? opts.iconURL : null;
    this[id$0] = id;
    this[name$] = name;
    this[protocol$0] = protocol;
    this[provider$] = provider;
    this[iconURL$] = iconURL;
    types.FetchRequestFederatedCredential.__proto__.new.call(this, {type: T.StringL().as(type)});
    ;
  }).prototype = types.FetchRequestFederatedCredential.prototype;
  dart.addTypeTests(types.FetchRequestFederatedCredential);
  dart.addTypeCaches(types.FetchRequestFederatedCredential);
  dart.setLibraryUri(types.FetchRequestFederatedCredential, I[22]);
  dart.setFieldSignature(types.FetchRequestFederatedCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestFederatedCredential.__proto__),
    id: dart.fieldType(dart.dynamic),
    name: dart.fieldType(dart.legacy(core.String)),
    protocol: dart.fieldType(dart.legacy(core.String)),
    provider: dart.fieldType(dart.legacy(core.String)),
    iconURL: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestFederatedCredential, ['toString']);
  var id$1 = dart.privateName(types, "FetchRequestPasswordCredential.id");
  var name$0 = dart.privateName(types, "FetchRequestPasswordCredential.name");
  var password$2 = dart.privateName(types, "FetchRequestPasswordCredential.password");
  var iconURL$0 = dart.privateName(types, "FetchRequestPasswordCredential.iconURL");
  types.FetchRequestPasswordCredential = class FetchRequestPasswordCredential extends types.FetchRequestCredential {
    get id() {
      return this[id$1];
    }
    set id(value) {
      this[id$1] = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      this[name$0] = value;
    }
    get password() {
      return this[password$2];
    }
    set password(value) {
      this[password$2] = value;
    }
    get iconURL() {
      return this[iconURL$0];
    }
    set iconURL(value) {
      this[iconURL$0] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "password", this.password, "iconURL", this.iconURL]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestPasswordCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let iconURL = opts && 'iconURL' in opts ? opts.iconURL : null;
    this[id$1] = id;
    this[name$0] = name;
    this[password$2] = password;
    this[iconURL$0] = iconURL;
    types.FetchRequestPasswordCredential.__proto__.new.call(this, {type: T.StringL().as(type)});
    ;
  }).prototype = types.FetchRequestPasswordCredential.prototype;
  dart.addTypeTests(types.FetchRequestPasswordCredential);
  dart.addTypeCaches(types.FetchRequestPasswordCredential);
  dart.setLibraryUri(types.FetchRequestPasswordCredential, I[22]);
  dart.setFieldSignature(types.FetchRequestPasswordCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestPasswordCredential.__proto__),
    id: dart.fieldType(dart.dynamic),
    name: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String)),
    iconURL: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestPasswordCredential, ['toString']);
  var url$8 = dart.privateName(types, "FetchRequest.url");
  var method$1 = dart.privateName(types, "FetchRequest.method");
  var headers$2 = dart.privateName(types, "FetchRequest.headers");
  var body$ = dart.privateName(types, "FetchRequest.body");
  var mode$ = dart.privateName(types, "FetchRequest.mode");
  var credentials$0 = dart.privateName(types, "FetchRequest.credentials");
  var cache$ = dart.privateName(types, "FetchRequest.cache");
  var redirect$ = dart.privateName(types, "FetchRequest.redirect");
  var referrer$ = dart.privateName(types, "FetchRequest.referrer");
  var referrerPolicy$ = dart.privateName(types, "FetchRequest.referrerPolicy");
  var integrity$ = dart.privateName(types, "FetchRequest.integrity");
  var keepalive$ = dart.privateName(types, "FetchRequest.keepalive");
  var action$11 = dart.privateName(types, "FetchRequest.action");
  types.FetchRequest = class FetchRequest extends core.Object {
    get url() {
      return this[url$8];
    }
    set url(value) {
      this[url$8] = value;
    }
    get method() {
      return this[method$1];
    }
    set method(value) {
      this[method$1] = value;
    }
    get headers() {
      return this[headers$2];
    }
    set headers(value) {
      this[headers$2] = value;
    }
    get body() {
      return this[body$];
    }
    set body(value) {
      this[body$] = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      this[mode$] = value;
    }
    get credentials() {
      return this[credentials$0];
    }
    set credentials(value) {
      this[credentials$0] = value;
    }
    get cache() {
      return this[cache$];
    }
    set cache(value) {
      this[cache$] = value;
    }
    get redirect() {
      return this[redirect$];
    }
    set redirect(value) {
      this[redirect$] = value;
    }
    get referrer() {
      return this[referrer$];
    }
    set referrer(value) {
      this[referrer$] = value;
    }
    get referrerPolicy() {
      return this[referrerPolicy$];
    }
    set referrerPolicy(value) {
      this[referrerPolicy$] = value;
    }
    get integrity() {
      return this[integrity$];
    }
    set integrity(value) {
      this[integrity$] = value;
    }
    get keepalive() {
      return this[keepalive$];
    }
    set keepalive(value) {
      this[keepalive$] = value;
    }
    get action() {
      return this[action$11];
    }
    set action(value) {
      this[action$11] = value;
    }
    toMap() {
      let t13, t13$;
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "method", this.method, "headers", this.headers, "body", this.body, "mode", this.mode, "credentials", (t13 = this.credentials, t13 == null ? null : t13.toMap()), "cache", this.cache, "redirect", this.redirect, "referrer", this.referrer, "referrerPolicy", this.referrerPolicy, "integrity", this.integrity, "keepalive", this.keepalive, "action", (t13$ = this.action, t13$ == null ? null : t13$.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    static fromMap(credentialsMap) {
      if (credentialsMap != null) {
        if (dart.equals(dart.dsend(credentialsMap, '_get', ["type"]), "default")) {
          return new types.FetchRequestCredentialDefault.new({type: dart.dsend(credentialsMap, '_get', ["type"]), value: T.StringL().as(dart.dsend(credentialsMap, '_get', ["value"]))});
        } else if (dart.equals(dart.dsend(credentialsMap, '_get', ["type"]), "federated")) {
          return new types.FetchRequestFederatedCredential.new({type: dart.dsend(credentialsMap, '_get', ["type"]), id: dart.dsend(credentialsMap, '_get', ["id"]), name: T.StringL().as(dart.dsend(credentialsMap, '_get', ["name"])), protocol: T.StringL().as(dart.dsend(credentialsMap, '_get', ["protocol"])), provider: T.StringL().as(dart.dsend(credentialsMap, '_get', ["provider"])), iconURL: T.StringL().as(dart.dsend(credentialsMap, '_get', ["iconURL"]))});
        } else if (dart.equals(dart.dsend(credentialsMap, '_get', ["type"]), "password")) {
          return new types.FetchRequestPasswordCredential.new({type: dart.dsend(credentialsMap, '_get', ["type"]), id: dart.dsend(credentialsMap, '_get', ["id"]), name: T.StringL().as(dart.dsend(credentialsMap, '_get', ["name"])), password: T.StringL().as(dart.dsend(credentialsMap, '_get', ["password"])), iconURL: T.StringL().as(dart.dsend(credentialsMap, '_get', ["iconURL"]))});
        }
      }
      return null;
    }
  };
  (types.FetchRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    let cache = opts && 'cache' in opts ? opts.cache : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let referrer = opts && 'referrer' in opts ? opts.referrer : null;
    let referrerPolicy = opts && 'referrerPolicy' in opts ? opts.referrerPolicy : null;
    let integrity = opts && 'integrity' in opts ? opts.integrity : null;
    let keepalive = opts && 'keepalive' in opts ? opts.keepalive : null;
    let action = opts && 'action' in opts ? opts.action : C[135] || CT.C135;
    this[url$8] = url;
    this[method$1] = method;
    this[headers$2] = headers;
    this[body$] = body;
    this[mode$] = mode;
    this[credentials$0] = credentials;
    this[cache$] = cache;
    this[redirect$] = redirect;
    this[referrer$] = referrer;
    this[referrerPolicy$] = referrerPolicy;
    this[integrity$] = integrity;
    this[keepalive$] = keepalive;
    this[action$11] = action;
    ;
  }).prototype = types.FetchRequest.prototype;
  dart.addTypeTests(types.FetchRequest);
  dart.addTypeCaches(types.FetchRequest);
  dart.setMethodSignature(types.FetchRequest, () => ({
    __proto__: dart.getMethods(types.FetchRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.FetchRequest, I[22]);
  dart.setFieldSignature(types.FetchRequest, () => ({
    __proto__: dart.getFields(types.FetchRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    method: dart.fieldType(dart.legacy(core.String)),
    headers: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    body: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    mode: dart.fieldType(dart.legacy(core.String)),
    credentials: dart.fieldType(dart.legacy(types.FetchRequestCredential)),
    cache: dart.fieldType(dart.legacy(core.String)),
    redirect: dart.fieldType(dart.legacy(core.String)),
    referrer: dart.fieldType(dart.legacy(core.String)),
    referrerPolicy: dart.fieldType(dart.legacy(core.String)),
    integrity: dart.fieldType(dart.legacy(core.String)),
    keepalive: dart.fieldType(dart.legacy(core.bool)),
    action: dart.fieldType(dart.legacy(types.FetchRequestAction))
  }));
  dart.defineExtensionMethods(types.FetchRequest, ['toString']);
  var _value$25 = dart.privateName(types, "ContentBlockerTriggerResourceType._value");
  types.ContentBlockerTriggerResourceType = class ContentBlockerTriggerResourceType extends core.Object {
    get [_value]() {
      return this[_value$25];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.ContentBlockerTriggerResourceType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.ContentBlockerTriggerResourceTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ContentBlockerTriggerResourceType._internal = function(_value) {
    this[_value$25] = _value;
    ;
  }).prototype = types.ContentBlockerTriggerResourceType.prototype;
  dart.addTypeTests(types.ContentBlockerTriggerResourceType);
  dart.addTypeCaches(types.ContentBlockerTriggerResourceType);
  dart.setMethodSignature(types.ContentBlockerTriggerResourceType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerTriggerResourceType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ContentBlockerTriggerResourceType, () => ({
    __proto__: dart.getGetters(types.ContentBlockerTriggerResourceType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ContentBlockerTriggerResourceType, I[22]);
  dart.setFieldSignature(types.ContentBlockerTriggerResourceType, () => ({
    __proto__: dart.getFields(types.ContentBlockerTriggerResourceType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.ContentBlockerTriggerResourceType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerTriggerResourceType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerTriggerResourceType, {
    /*types.ContentBlockerTriggerResourceType.values*/get values() {
      return T.JSArrayOfContentBlockerTriggerResourceTypeL().of([types.ContentBlockerTriggerResourceType.DOCUMENT, types.ContentBlockerTriggerResourceType.IMAGE, types.ContentBlockerTriggerResourceType.STYLE_SHEET, types.ContentBlockerTriggerResourceType.SCRIPT, types.ContentBlockerTriggerResourceType.FONT, types.ContentBlockerTriggerResourceType.MEDIA, types.ContentBlockerTriggerResourceType.SVG_DOCUMENT, types.ContentBlockerTriggerResourceType.RAW])[$toSet]();
    },
    /*types.ContentBlockerTriggerResourceType.DOCUMENT*/get DOCUMENT() {
      return C[136] || CT.C136;
    },
    /*types.ContentBlockerTriggerResourceType.IMAGE*/get IMAGE() {
      return C[137] || CT.C137;
    },
    /*types.ContentBlockerTriggerResourceType.STYLE_SHEET*/get STYLE_SHEET() {
      return C[138] || CT.C138;
    },
    /*types.ContentBlockerTriggerResourceType.SCRIPT*/get SCRIPT() {
      return C[139] || CT.C139;
    },
    /*types.ContentBlockerTriggerResourceType.FONT*/get FONT() {
      return C[140] || CT.C140;
    },
    /*types.ContentBlockerTriggerResourceType.MEDIA*/get MEDIA() {
      return C[141] || CT.C141;
    },
    /*types.ContentBlockerTriggerResourceType.SVG_DOCUMENT*/get SVG_DOCUMENT() {
      return C[142] || CT.C142;
    },
    /*types.ContentBlockerTriggerResourceType.RAW*/get RAW() {
      return C[143] || CT.C143;
    }
  }, true);
  var _value$26 = dart.privateName(types, "ContentBlockerTriggerLoadType._value");
  types.ContentBlockerTriggerLoadType = class ContentBlockerTriggerLoadType extends core.Object {
    get [_value]() {
      return this[_value$26];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.ContentBlockerTriggerLoadType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.ContentBlockerTriggerLoadTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ContentBlockerTriggerLoadType._internal = function(_value) {
    this[_value$26] = _value;
    ;
  }).prototype = types.ContentBlockerTriggerLoadType.prototype;
  dart.addTypeTests(types.ContentBlockerTriggerLoadType);
  dart.addTypeCaches(types.ContentBlockerTriggerLoadType);
  dart.setMethodSignature(types.ContentBlockerTriggerLoadType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerTriggerLoadType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ContentBlockerTriggerLoadType, () => ({
    __proto__: dart.getGetters(types.ContentBlockerTriggerLoadType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ContentBlockerTriggerLoadType, I[22]);
  dart.setFieldSignature(types.ContentBlockerTriggerLoadType, () => ({
    __proto__: dart.getFields(types.ContentBlockerTriggerLoadType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.ContentBlockerTriggerLoadType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerTriggerLoadType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerTriggerLoadType, {
    /*types.ContentBlockerTriggerLoadType.values*/get values() {
      return T.JSArrayOfContentBlockerTriggerLoadTypeL().of([types.ContentBlockerTriggerLoadType.FIRST_PARTY, types.ContentBlockerTriggerLoadType.THIRD_PARTY])[$toSet]();
    },
    /*types.ContentBlockerTriggerLoadType.FIRST_PARTY*/get FIRST_PARTY() {
      return C[144] || CT.C144;
    },
    /*types.ContentBlockerTriggerLoadType.THIRD_PARTY*/get THIRD_PARTY() {
      return C[145] || CT.C145;
    }
  }, true);
  var _value$27 = dart.privateName(types, "ContentBlockerActionType._value");
  types.ContentBlockerActionType = class ContentBlockerActionType extends core.Object {
    get [_value]() {
      return this[_value$27];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.ContentBlockerActionType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.ContentBlockerActionTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.ContentBlockerActionType._internal = function(_value) {
    this[_value$27] = _value;
    ;
  }).prototype = types.ContentBlockerActionType.prototype;
  dart.addTypeTests(types.ContentBlockerActionType);
  dart.addTypeCaches(types.ContentBlockerActionType);
  dart.setMethodSignature(types.ContentBlockerActionType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerActionType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.ContentBlockerActionType, () => ({
    __proto__: dart.getGetters(types.ContentBlockerActionType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ContentBlockerActionType, I[22]);
  dart.setFieldSignature(types.ContentBlockerActionType, () => ({
    __proto__: dart.getFields(types.ContentBlockerActionType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.ContentBlockerActionType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerActionType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerActionType, {
    /*types.ContentBlockerActionType.values*/get values() {
      return T.JSArrayOfContentBlockerActionTypeL().of([types.ContentBlockerActionType.BLOCK, types.ContentBlockerActionType.CSS_DISPLAY_NONE, types.ContentBlockerActionType.MAKE_HTTPS])[$toSet]();
    },
    /*types.ContentBlockerActionType.BLOCK*/get BLOCK() {
      return C[146] || CT.C146;
    },
    /*types.ContentBlockerActionType.CSS_DISPLAY_NONE*/get CSS_DISPLAY_NONE() {
      return C[147] || CT.C147;
    },
    /*types.ContentBlockerActionType.MAKE_HTTPS*/get MAKE_HTTPS() {
      return C[148] || CT.C148;
    }
  }, true);
  var name$1 = dart.privateName(types, "Cookie.name");
  var value$2 = dart.privateName(types, "Cookie.value");
  var expiresDate$ = dart.privateName(types, "Cookie.expiresDate");
  var isSessionOnly$ = dart.privateName(types, "Cookie.isSessionOnly");
  var domain$ = dart.privateName(types, "Cookie.domain");
  var sameSite$ = dart.privateName(types, "Cookie.sameSite");
  var isSecure$ = dart.privateName(types, "Cookie.isSecure");
  var isHttpOnly$ = dart.privateName(types, "Cookie.isHttpOnly");
  var path$ = dart.privateName(types, "Cookie.path");
  types.Cookie = class Cookie extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      this[name$1] = value;
    }
    get value() {
      return this[value$2];
    }
    set value(value) {
      this[value$2] = value;
    }
    get expiresDate() {
      return this[expiresDate$];
    }
    set expiresDate(value) {
      this[expiresDate$] = value;
    }
    get isSessionOnly() {
      return this[isSessionOnly$];
    }
    set isSessionOnly(value) {
      this[isSessionOnly$] = value;
    }
    get domain() {
      return this[domain$];
    }
    set domain(value) {
      this[domain$] = value;
    }
    get sameSite() {
      return this[sameSite$];
    }
    set sameSite(value) {
      this[sameSite$] = value;
    }
    get isSecure() {
      return this[isSecure$];
    }
    set isSecure(value) {
      this[isSecure$] = value;
    }
    get isHttpOnly() {
      return this[isHttpOnly$];
    }
    set isHttpOnly(value) {
      this[isHttpOnly$] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      this[path$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["name", this.name, "value", this.value, "expiresDate", this.expiresDate, "isSessionOnly", this.isSessionOnly, "domain", this.domain, "sameSite", (t13 = this.sameSite, t13 == null ? null : t13.toValue()), "isSecure", this.isSecure, "isHttpOnly", this.isHttpOnly, "path", this.path]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.Cookie.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let expiresDate = opts && 'expiresDate' in opts ? opts.expiresDate : null;
    let isSessionOnly = opts && 'isSessionOnly' in opts ? opts.isSessionOnly : null;
    let domain = opts && 'domain' in opts ? opts.domain : null;
    let sameSite = opts && 'sameSite' in opts ? opts.sameSite : null;
    let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
    let isHttpOnly = opts && 'isHttpOnly' in opts ? opts.isHttpOnly : null;
    let path = opts && 'path' in opts ? opts.path : null;
    this[name$1] = name;
    this[value$2] = value;
    this[expiresDate$] = expiresDate;
    this[isSessionOnly$] = isSessionOnly;
    this[domain$] = domain;
    this[sameSite$] = sameSite;
    this[isSecure$] = isSecure;
    this[isHttpOnly$] = isHttpOnly;
    this[path$] = path;
    ;
  }).prototype = types.Cookie.prototype;
  dart.addTypeTests(types.Cookie);
  dart.addTypeCaches(types.Cookie);
  dart.setMethodSignature(types.Cookie, () => ({
    __proto__: dart.getMethods(types.Cookie.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.Cookie, I[22]);
  dart.setFieldSignature(types.Cookie, () => ({
    __proto__: dart.getFields(types.Cookie.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    value: dart.fieldType(dart.dynamic),
    expiresDate: dart.fieldType(dart.legacy(core.int)),
    isSessionOnly: dart.fieldType(dart.legacy(core.bool)),
    domain: dart.fieldType(dart.legacy(core.String)),
    sameSite: dart.fieldType(dart.legacy(types.HTTPCookieSameSitePolicy)),
    isSecure: dart.fieldType(dart.legacy(core.bool)),
    isHttpOnly: dart.fieldType(dart.legacy(core.bool)),
    path: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.Cookie, ['toString']);
  var _value$28 = dart.privateName(types, "PermissionRequestResponseAction._value");
  types.PermissionRequestResponseAction = class PermissionRequestResponseAction extends core.Object {
    get [_value]() {
      return this[_value$28];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.PermissionRequestResponseAction._internal = function(_value) {
    this[_value$28] = _value;
    ;
  }).prototype = types.PermissionRequestResponseAction.prototype;
  dart.addTypeTests(types.PermissionRequestResponseAction);
  dart.addTypeCaches(types.PermissionRequestResponseAction);
  dart.setMethodSignature(types.PermissionRequestResponseAction, () => ({
    __proto__: dart.getMethods(types.PermissionRequestResponseAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.PermissionRequestResponseAction, () => ({
    __proto__: dart.getGetters(types.PermissionRequestResponseAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.PermissionRequestResponseAction, I[22]);
  dart.setFieldSignature(types.PermissionRequestResponseAction, () => ({
    __proto__: dart.getFields(types.PermissionRequestResponseAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.PermissionRequestResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.PermissionRequestResponseAction, ['hashCode']);
  dart.defineLazy(types.PermissionRequestResponseAction, {
    /*types.PermissionRequestResponseAction.DENY*/get DENY() {
      return C[149] || CT.C149;
    },
    /*types.PermissionRequestResponseAction.GRANT*/get GRANT() {
      return C[150] || CT.C150;
    }
  }, true);
  var resources$ = dart.privateName(types, "PermissionRequestResponse.resources");
  var action$12 = dart.privateName(types, "PermissionRequestResponse.action");
  types.PermissionRequestResponse = class PermissionRequestResponse extends core.Object {
    get resources() {
      return this[resources$];
    }
    set resources(value) {
      this[resources$] = value;
    }
    get action() {
      return this[action$12];
    }
    set action(value) {
      this[action$12] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["resources", this.resources, "action", (t13 = this.action, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.PermissionRequestResponse.new = function(opts) {
    let resources = opts && 'resources' in opts ? opts.resources : C[30] || CT.C30;
    let action = opts && 'action' in opts ? opts.action : C[149] || CT.C149;
    this[resources$] = resources;
    this[action$12] = action;
    ;
  }).prototype = types.PermissionRequestResponse.prototype;
  dart.addTypeTests(types.PermissionRequestResponse);
  dart.addTypeCaches(types.PermissionRequestResponse);
  dart.setMethodSignature(types.PermissionRequestResponse, () => ({
    __proto__: dart.getMethods(types.PermissionRequestResponse.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.PermissionRequestResponse, I[22]);
  dart.setFieldSignature(types.PermissionRequestResponse, () => ({
    __proto__: dart.getFields(types.PermissionRequestResponse.__proto__),
    resources: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    action: dart.fieldType(dart.legacy(types.PermissionRequestResponseAction))
  }));
  dart.defineExtensionMethods(types.PermissionRequestResponse, ['toString']);
  var _value$29 = dart.privateName(types, "ShouldOverrideUrlLoadingAction._value");
  types.ShouldOverrideUrlLoadingAction = class ShouldOverrideUrlLoadingAction extends core.Object {
    get [_value]() {
      return this[_value$29];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["action", this[_value]]);
    }
  };
  (types.ShouldOverrideUrlLoadingAction._internal = function(_value) {
    this[_value$29] = _value;
    ;
  }).prototype = types.ShouldOverrideUrlLoadingAction.prototype;
  dart.addTypeTests(types.ShouldOverrideUrlLoadingAction);
  dart.addTypeCaches(types.ShouldOverrideUrlLoadingAction);
  dart.setMethodSignature(types.ShouldOverrideUrlLoadingAction, () => ({
    __proto__: dart.getMethods(types.ShouldOverrideUrlLoadingAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setGetterSignature(types.ShouldOverrideUrlLoadingAction, () => ({
    __proto__: dart.getGetters(types.ShouldOverrideUrlLoadingAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.ShouldOverrideUrlLoadingAction, I[22]);
  dart.setFieldSignature(types.ShouldOverrideUrlLoadingAction, () => ({
    __proto__: dart.getFields(types.ShouldOverrideUrlLoadingAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.ShouldOverrideUrlLoadingAction, ['_equals']);
  dart.defineExtensionAccessors(types.ShouldOverrideUrlLoadingAction, ['hashCode']);
  dart.defineLazy(types.ShouldOverrideUrlLoadingAction, {
    /*types.ShouldOverrideUrlLoadingAction.CANCEL*/get CANCEL() {
      return C[151] || CT.C151;
    },
    /*types.ShouldOverrideUrlLoadingAction.ALLOW*/get ALLOW() {
      return C[152] || CT.C152;
    }
  }, true);
  var _value$30 = dart.privateName(types, "IOSWKNavigationType._value");
  types.IOSWKNavigationType = class IOSWKNavigationType extends core.Object {
    get [_value]() {
      return this[_value$30];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSWKNavigationType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSWKNavigationTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSWKNavigationType._internal = function(_value) {
    this[_value$30] = _value;
    ;
  }).prototype = types.IOSWKNavigationType.prototype;
  dart.addTypeTests(types.IOSWKNavigationType);
  dart.addTypeCaches(types.IOSWKNavigationType);
  dart.setMethodSignature(types.IOSWKNavigationType, () => ({
    __proto__: dart.getMethods(types.IOSWKNavigationType.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSWKNavigationType, () => ({
    __proto__: dart.getGetters(types.IOSWKNavigationType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSWKNavigationType, I[22]);
  dart.setFieldSignature(types.IOSWKNavigationType, () => ({
    __proto__: dart.getFields(types.IOSWKNavigationType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSWKNavigationType, ['_equals']);
  dart.defineExtensionAccessors(types.IOSWKNavigationType, ['hashCode']);
  dart.defineLazy(types.IOSWKNavigationType, {
    /*types.IOSWKNavigationType.values*/get values() {
      return T.JSArrayOfIOSWKNavigationTypeL().of([types.IOSWKNavigationType.LINK_ACTIVATED, types.IOSWKNavigationType.FORM_SUBMITTED, types.IOSWKNavigationType.BACK_FORWARD, types.IOSWKNavigationType.RELOAD, types.IOSWKNavigationType.FORM_RESUBMITTED, types.IOSWKNavigationType.OTHER])[$toSet]();
    },
    /*types.IOSWKNavigationType.LINK_ACTIVATED*/get LINK_ACTIVATED() {
      return C[153] || CT.C153;
    },
    /*types.IOSWKNavigationType.FORM_SUBMITTED*/get FORM_SUBMITTED() {
      return C[154] || CT.C154;
    },
    /*types.IOSWKNavigationType.BACK_FORWARD*/get BACK_FORWARD() {
      return C[155] || CT.C155;
    },
    /*types.IOSWKNavigationType.RELOAD*/get RELOAD() {
      return C[156] || CT.C156;
    },
    /*types.IOSWKNavigationType.FORM_RESUBMITTED*/get FORM_RESUBMITTED() {
      return C[157] || CT.C157;
    },
    /*types.IOSWKNavigationType.OTHER*/get OTHER() {
      return C[158] || CT.C158;
    }
  }, true);
  var url$9 = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.url");
  var method$2 = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.method");
  var headers$3 = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.headers");
  var isForMainFrame$0 = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.isForMainFrame");
  var androidHasGesture$ = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.androidHasGesture");
  var androidIsRedirect$ = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.androidIsRedirect");
  var iosWKNavigationType$ = dart.privateName(types, "ShouldOverrideUrlLoadingRequest.iosWKNavigationType");
  types.ShouldOverrideUrlLoadingRequest = class ShouldOverrideUrlLoadingRequest extends core.Object {
    get url() {
      return this[url$9];
    }
    set url(value) {
      this[url$9] = value;
    }
    get method() {
      return this[method$2];
    }
    set method(value) {
      this[method$2] = value;
    }
    get headers() {
      return this[headers$3];
    }
    set headers(value) {
      this[headers$3] = value;
    }
    get isForMainFrame() {
      return this[isForMainFrame$0];
    }
    set isForMainFrame(value) {
      this[isForMainFrame$0] = value;
    }
    get androidHasGesture() {
      return this[androidHasGesture$];
    }
    set androidHasGesture(value) {
      this[androidHasGesture$] = value;
    }
    get androidIsRedirect() {
      return this[androidIsRedirect$];
    }
    set androidIsRedirect(value) {
      this[androidIsRedirect$] = value;
    }
    get iosWKNavigationType() {
      return this[iosWKNavigationType$];
    }
    set iosWKNavigationType(value) {
      this[iosWKNavigationType$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "headers", this.headers, "method", this.method, "isForMainFrame", this.isForMainFrame, "androidHasGesture", this.androidHasGesture, "androidIsRedirect", this.androidIsRedirect, "iosWKNavigationType", (t13 = this.iosWKNavigationType, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ShouldOverrideUrlLoadingRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    let androidHasGesture = opts && 'androidHasGesture' in opts ? opts.androidHasGesture : null;
    let androidIsRedirect = opts && 'androidIsRedirect' in opts ? opts.androidIsRedirect : null;
    let iosWKNavigationType = opts && 'iosWKNavigationType' in opts ? opts.iosWKNavigationType : null;
    this[url$9] = url;
    this[method$2] = method;
    this[headers$3] = headers;
    this[isForMainFrame$0] = isForMainFrame;
    this[androidHasGesture$] = androidHasGesture;
    this[androidIsRedirect$] = androidIsRedirect;
    this[iosWKNavigationType$] = iosWKNavigationType;
    ;
  }).prototype = types.ShouldOverrideUrlLoadingRequest.prototype;
  dart.addTypeTests(types.ShouldOverrideUrlLoadingRequest);
  dart.addTypeCaches(types.ShouldOverrideUrlLoadingRequest);
  dart.setMethodSignature(types.ShouldOverrideUrlLoadingRequest, () => ({
    __proto__: dart.getMethods(types.ShouldOverrideUrlLoadingRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.ShouldOverrideUrlLoadingRequest, I[22]);
  dart.setFieldSignature(types.ShouldOverrideUrlLoadingRequest, () => ({
    __proto__: dart.getFields(types.ShouldOverrideUrlLoadingRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    method: dart.fieldType(dart.legacy(core.String)),
    headers: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    isForMainFrame: dart.fieldType(dart.legacy(core.bool)),
    androidHasGesture: dart.fieldType(dart.legacy(core.bool)),
    androidIsRedirect: dart.fieldType(dart.legacy(core.bool)),
    iosWKNavigationType: dart.fieldType(dart.legacy(types.IOSWKNavigationType))
  }));
  dart.defineExtensionMethods(types.ShouldOverrideUrlLoadingRequest, ['toString']);
  var url$10 = dart.privateName(types, "CreateWindowRequest.url");
  var windowId$3 = dart.privateName(types, "CreateWindowRequest.windowId");
  var androidIsDialog$ = dart.privateName(types, "CreateWindowRequest.androidIsDialog");
  var androidIsUserGesture$ = dart.privateName(types, "CreateWindowRequest.androidIsUserGesture");
  var iosWKNavigationType$0 = dart.privateName(types, "CreateWindowRequest.iosWKNavigationType");
  var iosIsForMainFrame$ = dart.privateName(types, "CreateWindowRequest.iosIsForMainFrame");
  types.CreateWindowRequest = class CreateWindowRequest extends core.Object {
    get url() {
      return this[url$10];
    }
    set url(value) {
      this[url$10] = value;
    }
    get windowId() {
      return this[windowId$3];
    }
    set windowId(value) {
      this[windowId$3] = value;
    }
    get androidIsDialog() {
      return this[androidIsDialog$];
    }
    set androidIsDialog(value) {
      this[androidIsDialog$] = value;
    }
    get androidIsUserGesture() {
      return this[androidIsUserGesture$];
    }
    set androidIsUserGesture(value) {
      this[androidIsUserGesture$] = value;
    }
    get iosWKNavigationType() {
      return this[iosWKNavigationType$0];
    }
    set iosWKNavigationType(value) {
      this[iosWKNavigationType$0] = value;
    }
    get iosIsForMainFrame() {
      return this[iosIsForMainFrame$];
    }
    set iosIsForMainFrame(value) {
      this[iosIsForMainFrame$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["androidIsDialog", this.androidIsDialog, "androidIsUserGesture", this.androidIsUserGesture, "iosWKNavigationType", (t13 = this.iosWKNavigationType, t13 == null ? null : t13.toValue()), "iosUrl", this.url, "windowId", this.windowId]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CreateWindowRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let androidIsDialog = opts && 'androidIsDialog' in opts ? opts.androidIsDialog : null;
    let androidIsUserGesture = opts && 'androidIsUserGesture' in opts ? opts.androidIsUserGesture : null;
    let iosWKNavigationType = opts && 'iosWKNavigationType' in opts ? opts.iosWKNavigationType : null;
    let iosIsForMainFrame = opts && 'iosIsForMainFrame' in opts ? opts.iosIsForMainFrame : null;
    this[url$10] = url;
    this[windowId$3] = windowId;
    this[androidIsDialog$] = androidIsDialog;
    this[androidIsUserGesture$] = androidIsUserGesture;
    this[iosWKNavigationType$0] = iosWKNavigationType;
    this[iosIsForMainFrame$] = iosIsForMainFrame;
    ;
  }).prototype = types.CreateWindowRequest.prototype;
  dart.addTypeTests(types.CreateWindowRequest);
  dart.addTypeCaches(types.CreateWindowRequest);
  dart.setMethodSignature(types.CreateWindowRequest, () => ({
    __proto__: dart.getMethods(types.CreateWindowRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.CreateWindowRequest, I[22]);
  dart.setFieldSignature(types.CreateWindowRequest, () => ({
    __proto__: dart.getFields(types.CreateWindowRequest.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    windowId: dart.fieldType(dart.legacy(core.int)),
    androidIsDialog: dart.fieldType(dart.legacy(core.bool)),
    androidIsUserGesture: dart.fieldType(dart.legacy(core.bool)),
    iosWKNavigationType: dart.fieldType(dart.legacy(types.IOSWKNavigationType)),
    iosIsForMainFrame: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.CreateWindowRequest, ['toString']);
  var origin$0 = dart.privateName(types, "AndroidWebStorageOrigin.origin");
  var quota$ = dart.privateName(types, "AndroidWebStorageOrigin.quota");
  var usage$ = dart.privateName(types, "AndroidWebStorageOrigin.usage");
  types.AndroidWebStorageOrigin = class AndroidWebStorageOrigin extends core.Object {
    get origin() {
      return this[origin$0];
    }
    set origin(value) {
      this[origin$0] = value;
    }
    get quota() {
      return this[quota$];
    }
    set quota(value) {
      this[quota$] = value;
    }
    get usage() {
      return this[usage$];
    }
    set usage(value) {
      this[usage$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["origin", this.origin, "quota", this.quota, "usage", this.usage]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AndroidWebStorageOrigin.new = function(opts) {
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let quota = opts && 'quota' in opts ? opts.quota : null;
    let usage = opts && 'usage' in opts ? opts.usage : null;
    this[origin$0] = origin;
    this[quota$] = quota;
    this[usage$] = usage;
    ;
  }).prototype = types.AndroidWebStorageOrigin.prototype;
  dart.addTypeTests(types.AndroidWebStorageOrigin);
  dart.addTypeCaches(types.AndroidWebStorageOrigin);
  dart.setMethodSignature(types.AndroidWebStorageOrigin, () => ({
    __proto__: dart.getMethods(types.AndroidWebStorageOrigin.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.AndroidWebStorageOrigin, I[22]);
  dart.setFieldSignature(types.AndroidWebStorageOrigin, () => ({
    __proto__: dart.getFields(types.AndroidWebStorageOrigin.__proto__),
    origin: dart.fieldType(dart.legacy(core.String)),
    quota: dart.fieldType(dart.legacy(core.int)),
    usage: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidWebStorageOrigin, ['toString']);
  var _value$31 = dart.privateName(types, "IOSWKWebsiteDataType._value");
  types.IOSWKWebsiteDataType = class IOSWKWebsiteDataType extends core.Object {
    get [_value]() {
      return this[_value$31];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSWKWebsiteDataType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSWKWebsiteDataTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSWKWebsiteDataType._internal = function(_value) {
    this[_value$31] = _value;
    ;
  }).prototype = types.IOSWKWebsiteDataType.prototype;
  dart.addTypeTests(types.IOSWKWebsiteDataType);
  dart.addTypeCaches(types.IOSWKWebsiteDataType);
  dart.setMethodSignature(types.IOSWKWebsiteDataType, () => ({
    __proto__: dart.getMethods(types.IOSWKWebsiteDataType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSWKWebsiteDataType, () => ({
    __proto__: dart.getGetters(types.IOSWKWebsiteDataType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSWKWebsiteDataType, I[22]);
  dart.setFieldSignature(types.IOSWKWebsiteDataType, () => ({
    __proto__: dart.getFields(types.IOSWKWebsiteDataType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.IOSWKWebsiteDataType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKWebsiteDataType, ['hashCode']);
  dart.defineLazy(types.IOSWKWebsiteDataType, {
    /*types.IOSWKWebsiteDataType.values*/get values() {
      return T.JSArrayOfIOSWKWebsiteDataTypeL().of([types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies, types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations])[$toSet]();
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache*/get WKWebsiteDataTypeFetchCache() {
      return C[159] || CT.C159;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache*/get WKWebsiteDataTypeDiskCache() {
      return C[160] || CT.C160;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache*/get WKWebsiteDataTypeMemoryCache() {
      return C[161] || CT.C161;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache*/get WKWebsiteDataTypeOfflineWebApplicationCache() {
      return C[162] || CT.C162;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies*/get WKWebsiteDataTypeCookies() {
      return C[163] || CT.C163;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage*/get WKWebsiteDataTypeSessionStorage() {
      return C[164] || CT.C164;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage*/get WKWebsiteDataTypeLocalStorage() {
      return C[165] || CT.C165;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases*/get WKWebsiteDataTypeWebSQLDatabases() {
      return C[166] || CT.C166;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases*/get WKWebsiteDataTypeIndexedDBDatabases() {
      return C[167] || CT.C167;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations*/get WKWebsiteDataTypeServiceWorkerRegistrations() {
      return C[168] || CT.C168;
    },
    /*types.IOSWKWebsiteDataType.ALL*/get ALL() {
      return T.JSArrayOfIOSWKWebsiteDataTypeL().of([types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies, types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations])[$toSet]();
    }
  }, true);
  var displayName$ = dart.privateName(types, "IOSWKWebsiteDataRecord.displayName");
  var dataTypes$ = dart.privateName(types, "IOSWKWebsiteDataRecord.dataTypes");
  types.IOSWKWebsiteDataRecord = class IOSWKWebsiteDataRecord extends core.Object {
    get displayName() {
      return this[displayName$];
    }
    set displayName(value) {
      this[displayName$] = value;
    }
    get dataTypes() {
      return this[dataTypes$];
    }
    set dataTypes(value) {
      this[dataTypes$] = value;
    }
    toMap() {
      let dataTypesString = T.JSArrayOfStringL().of([]);
      for (let dataType of this.dataTypes) {
        dataTypesString[$add](dataType.toValue());
      }
      return new (T.IdentityMapOfStringL$dynamic()).from(["displayName", this.displayName, "dataTypes", dataTypesString]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKWebsiteDataRecord.new = function(opts) {
    let displayName = opts && 'displayName' in opts ? opts.displayName : null;
    let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
    this[displayName$] = displayName;
    this[dataTypes$] = dataTypes;
    ;
  }).prototype = types.IOSWKWebsiteDataRecord.prototype;
  dart.addTypeTests(types.IOSWKWebsiteDataRecord);
  dart.addTypeCaches(types.IOSWKWebsiteDataRecord);
  dart.setMethodSignature(types.IOSWKWebsiteDataRecord, () => ({
    __proto__: dart.getMethods(types.IOSWKWebsiteDataRecord.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.IOSWKWebsiteDataRecord, I[22]);
  dart.setFieldSignature(types.IOSWKWebsiteDataRecord, () => ({
    __proto__: dart.getFields(types.IOSWKWebsiteDataRecord.__proto__),
    displayName: dart.fieldType(dart.legacy(core.String)),
    dataTypes: dart.fieldType(dart.legacy(core.Set$(dart.legacy(types.IOSWKWebsiteDataType))))
  }));
  dart.defineExtensionMethods(types.IOSWKWebsiteDataRecord, ['toString']);
  var _value$32 = dart.privateName(types, "InAppWebViewHitTestResultType._value");
  types.InAppWebViewHitTestResultType = class InAppWebViewHitTestResultType extends core.Object {
    get [_value]() {
      return this[_value$32];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.InAppWebViewHitTestResultType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.InAppWebViewHitTestResultTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 2:
        {
          return "PHONE_TYPE";
        }
        case 3:
        {
          return "GEO_TYPE";
        }
        case 4:
        {
          return "EMAIL_TYPE";
        }
        case 5:
        {
          return "IMAGE_TYPE";
        }
        case 7:
        {
          return "SRC_ANCHOR_TYPE";
        }
        case 8:
        {
          return "SRC_IMAGE_ANCHOR_TYPE";
        }
        case 9:
        {
          return "EDIT_TEXT_TYPE";
        }
        case 0:
        default:
        {
          return "UNKNOWN_TYPE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.InAppWebViewHitTestResultType._internal = function(_value) {
    this[_value$32] = _value;
    ;
  }).prototype = types.InAppWebViewHitTestResultType.prototype;
  dart.addTypeTests(types.InAppWebViewHitTestResultType);
  dart.addTypeCaches(types.InAppWebViewHitTestResultType);
  dart.setMethodSignature(types.InAppWebViewHitTestResultType, () => ({
    __proto__: dart.getMethods(types.InAppWebViewHitTestResultType.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.InAppWebViewHitTestResultType, () => ({
    __proto__: dart.getGetters(types.InAppWebViewHitTestResultType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.InAppWebViewHitTestResultType, I[22]);
  dart.setFieldSignature(types.InAppWebViewHitTestResultType, () => ({
    __proto__: dart.getFields(types.InAppWebViewHitTestResultType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.InAppWebViewHitTestResultType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.InAppWebViewHitTestResultType, ['hashCode']);
  dart.defineLazy(types.InAppWebViewHitTestResultType, {
    /*types.InAppWebViewHitTestResultType.values*/get values() {
      return T.JSArrayOfInAppWebViewHitTestResultTypeL().of([types.InAppWebViewHitTestResultType.UNKNOWN_TYPE, types.InAppWebViewHitTestResultType.PHONE_TYPE, types.InAppWebViewHitTestResultType.GEO_TYPE, types.InAppWebViewHitTestResultType.EMAIL_TYPE, types.InAppWebViewHitTestResultType.IMAGE_TYPE, types.InAppWebViewHitTestResultType.SRC_ANCHOR_TYPE, types.InAppWebViewHitTestResultType.SRC_IMAGE_ANCHOR_TYPE, types.InAppWebViewHitTestResultType.EDIT_TEXT_TYPE])[$toSet]();
    },
    /*types.InAppWebViewHitTestResultType.UNKNOWN_TYPE*/get UNKNOWN_TYPE() {
      return C[169] || CT.C169;
    },
    /*types.InAppWebViewHitTestResultType.PHONE_TYPE*/get PHONE_TYPE() {
      return C[170] || CT.C170;
    },
    /*types.InAppWebViewHitTestResultType.GEO_TYPE*/get GEO_TYPE() {
      return C[171] || CT.C171;
    },
    /*types.InAppWebViewHitTestResultType.EMAIL_TYPE*/get EMAIL_TYPE() {
      return C[172] || CT.C172;
    },
    /*types.InAppWebViewHitTestResultType.IMAGE_TYPE*/get IMAGE_TYPE() {
      return C[173] || CT.C173;
    },
    /*types.InAppWebViewHitTestResultType.SRC_ANCHOR_TYPE*/get SRC_ANCHOR_TYPE() {
      return C[174] || CT.C174;
    },
    /*types.InAppWebViewHitTestResultType.SRC_IMAGE_ANCHOR_TYPE*/get SRC_IMAGE_ANCHOR_TYPE() {
      return C[175] || CT.C175;
    },
    /*types.InAppWebViewHitTestResultType.EDIT_TEXT_TYPE*/get EDIT_TEXT_TYPE() {
      return C[176] || CT.C176;
    }
  }, true);
  var type$2 = dart.privateName(types, "InAppWebViewHitTestResult.type");
  var extra$ = dart.privateName(types, "InAppWebViewHitTestResult.extra");
  types.InAppWebViewHitTestResult = class InAppWebViewHitTestResult extends core.Object {
    get type() {
      return this[type$2];
    }
    set type(value) {
      this[type$2] = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      this[extra$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["type", (t13 = this.type, t13 == null ? null : t13.toValue()), "extra", this.extra]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.InAppWebViewHitTestResult.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    this[type$2] = type;
    this[extra$] = extra;
    ;
  }).prototype = types.InAppWebViewHitTestResult.prototype;
  dart.addTypeTests(types.InAppWebViewHitTestResult);
  dart.addTypeCaches(types.InAppWebViewHitTestResult);
  dart.setMethodSignature(types.InAppWebViewHitTestResult, () => ({
    __proto__: dart.getMethods(types.InAppWebViewHitTestResult.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.InAppWebViewHitTestResult, I[22]);
  dart.setFieldSignature(types.InAppWebViewHitTestResult, () => ({
    __proto__: dart.getFields(types.InAppWebViewHitTestResult.__proto__),
    type: dart.fieldType(dart.legacy(types.InAppWebViewHitTestResultType)),
    extra: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.InAppWebViewHitTestResult, ['toString']);
  var _value$33 = dart.privateName(types, "WebViewRenderProcessAction._value");
  types.WebViewRenderProcessAction = class WebViewRenderProcessAction extends core.Object {
    get [_value]() {
      return this[_value$33];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["action", this[_value]]);
    }
  };
  (types.WebViewRenderProcessAction._internal = function(_value) {
    this[_value$33] = _value;
    ;
  }).prototype = types.WebViewRenderProcessAction.prototype;
  dart.addTypeTests(types.WebViewRenderProcessAction);
  dart.addTypeCaches(types.WebViewRenderProcessAction);
  dart.setMethodSignature(types.WebViewRenderProcessAction, () => ({
    __proto__: dart.getMethods(types.WebViewRenderProcessAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setGetterSignature(types.WebViewRenderProcessAction, () => ({
    __proto__: dart.getGetters(types.WebViewRenderProcessAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.WebViewRenderProcessAction, I[22]);
  dart.setFieldSignature(types.WebViewRenderProcessAction, () => ({
    __proto__: dart.getFields(types.WebViewRenderProcessAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.WebViewRenderProcessAction, ['_equals']);
  dart.defineExtensionAccessors(types.WebViewRenderProcessAction, ['hashCode']);
  dart.defineLazy(types.WebViewRenderProcessAction, {
    /*types.WebViewRenderProcessAction.TERMINATE*/get TERMINATE() {
      return C[177] || CT.C177;
    }
  }, true);
  var didCrash$ = dart.privateName(types, "RenderProcessGoneDetail.didCrash");
  var rendererPriorityAtExit$ = dart.privateName(types, "RenderProcessGoneDetail.rendererPriorityAtExit");
  types.RenderProcessGoneDetail = class RenderProcessGoneDetail extends core.Object {
    get didCrash() {
      return this[didCrash$];
    }
    set didCrash(value) {
      this[didCrash$] = value;
    }
    get rendererPriorityAtExit() {
      return this[rendererPriorityAtExit$];
    }
    set rendererPriorityAtExit(value) {
      this[rendererPriorityAtExit$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["didCrash", this.didCrash, "rendererPriorityAtExit", (t13 = this.rendererPriorityAtExit, t13 == null ? null : t13.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RenderProcessGoneDetail.new = function(opts) {
    let didCrash = opts && 'didCrash' in opts ? opts.didCrash : null;
    let rendererPriorityAtExit = opts && 'rendererPriorityAtExit' in opts ? opts.rendererPriorityAtExit : null;
    this[didCrash$] = didCrash;
    this[rendererPriorityAtExit$] = rendererPriorityAtExit;
    ;
  }).prototype = types.RenderProcessGoneDetail.prototype;
  dart.addTypeTests(types.RenderProcessGoneDetail);
  dart.addTypeCaches(types.RenderProcessGoneDetail);
  dart.setMethodSignature(types.RenderProcessGoneDetail, () => ({
    __proto__: dart.getMethods(types.RenderProcessGoneDetail.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.RenderProcessGoneDetail, I[22]);
  dart.setFieldSignature(types.RenderProcessGoneDetail, () => ({
    __proto__: dart.getFields(types.RenderProcessGoneDetail.__proto__),
    didCrash: dart.fieldType(dart.legacy(core.bool)),
    rendererPriorityAtExit: dart.fieldType(dart.legacy(types.RendererPriority))
  }));
  dart.defineExtensionMethods(types.RenderProcessGoneDetail, ['toString']);
  var _value$34 = dart.privateName(types, "RendererPriority._value");
  types.RendererPriority = class RendererPriority extends core.Object {
    get [_value]() {
      return this[_value$34];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.RendererPriority.values[$firstWhere](dart.fn(element => element.toValue() == value, T.RendererPriorityLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 0:
        {
          return "RENDERER_PRIORITY_WAIVED";
        }
        case 1:
        {
          return "RENDERER_PRIORITY_BOUND";
        }
        case 2:
        default:
        {
          return "RENDERER_PRIORITY_IMPORTANT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.RendererPriority._internal = function(_value) {
    this[_value$34] = _value;
    ;
  }).prototype = types.RendererPriority.prototype;
  dart.addTypeTests(types.RendererPriority);
  dart.addTypeCaches(types.RendererPriority);
  dart.setMethodSignature(types.RendererPriority, () => ({
    __proto__: dart.getMethods(types.RendererPriority.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.RendererPriority, () => ({
    __proto__: dart.getGetters(types.RendererPriority.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.RendererPriority, I[22]);
  dart.setFieldSignature(types.RendererPriority, () => ({
    __proto__: dart.getFields(types.RendererPriority.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.RendererPriority, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.RendererPriority, ['hashCode']);
  dart.defineLazy(types.RendererPriority, {
    /*types.RendererPriority.values*/get values() {
      return T.JSArrayOfRendererPriorityL().of([types.RendererPriority.RENDERER_PRIORITY_WAIVED, types.RendererPriority.RENDERER_PRIORITY_BOUND, types.RendererPriority.RENDERER_PRIORITY_IMPORTANT])[$toSet]();
    },
    /*types.RendererPriority.RENDERER_PRIORITY_WAIVED*/get RENDERER_PRIORITY_WAIVED() {
      return C[178] || CT.C178;
    },
    /*types.RendererPriority.RENDERER_PRIORITY_BOUND*/get RENDERER_PRIORITY_BOUND() {
      return C[179] || CT.C179;
    },
    /*types.RendererPriority.RENDERER_PRIORITY_IMPORTANT*/get RENDERER_PRIORITY_IMPORTANT() {
      return C[180] || CT.C180;
    }
  }, true);
  var rendererRequestedPriority$ = dart.privateName(types, "RendererPriorityPolicy.rendererRequestedPriority");
  var waivedWhenNotVisible$ = dart.privateName(types, "RendererPriorityPolicy.waivedWhenNotVisible");
  types.RendererPriorityPolicy = class RendererPriorityPolicy extends core.Object {
    get rendererRequestedPriority() {
      return this[rendererRequestedPriority$];
    }
    set rendererRequestedPriority(value) {
      this[rendererRequestedPriority$] = value;
    }
    get waivedWhenNotVisible() {
      return this[waivedWhenNotVisible$];
    }
    set waivedWhenNotVisible(value) {
      this[waivedWhenNotVisible$] = value;
    }
    toMap() {
      let t13;
      return new (T.IdentityMapOfStringL$dynamic()).from(["rendererRequestedPriority", (t13 = this.rendererRequestedPriority, t13 == null ? null : t13.toValue()), "waivedWhenNotVisible", this.waivedWhenNotVisible]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    static fromMap(map) {
      return map != null ? new types.RendererPriorityPolicy.new({rendererRequestedPriority: types.RendererPriority.fromValue(T.intL().as(map[$_get]("rendererRequestedPriority"))), waivedWhenNotVisible: T.boolL().as(map[$_get]("waivedWhenNotVisible"))}) : null;
    }
  };
  (types.RendererPriorityPolicy.new = function(opts) {
    let rendererRequestedPriority = opts && 'rendererRequestedPriority' in opts ? opts.rendererRequestedPriority : null;
    let waivedWhenNotVisible = opts && 'waivedWhenNotVisible' in opts ? opts.waivedWhenNotVisible : null;
    this[rendererRequestedPriority$] = rendererRequestedPriority;
    this[waivedWhenNotVisible$] = waivedWhenNotVisible;
    ;
  }).prototype = types.RendererPriorityPolicy.prototype;
  dart.addTypeTests(types.RendererPriorityPolicy);
  dart.addTypeCaches(types.RendererPriorityPolicy);
  dart.setMethodSignature(types.RendererPriorityPolicy, () => ({
    __proto__: dart.getMethods(types.RendererPriorityPolicy.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.RendererPriorityPolicy, I[22]);
  dart.setFieldSignature(types.RendererPriorityPolicy, () => ({
    __proto__: dart.getFields(types.RendererPriorityPolicy.__proto__),
    rendererRequestedPriority: dart.fieldType(dart.legacy(types.RendererPriority)),
    waivedWhenNotVisible: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(types.RendererPriorityPolicy, ['toString']);
  var _value$35 = dart.privateName(types, "FormResubmissionAction._value");
  types.FormResubmissionAction = class FormResubmissionAction extends core.Object {
    get [_value]() {
      return this[_value$35];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toValue() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["action", this[_value]]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FormResubmissionAction._internal = function(_value) {
    this[_value$35] = _value;
    ;
  }).prototype = types.FormResubmissionAction.prototype;
  dart.addTypeTests(types.FormResubmissionAction);
  dart.addTypeCaches(types.FormResubmissionAction);
  dart.setMethodSignature(types.FormResubmissionAction, () => ({
    __proto__: dart.getMethods(types.FormResubmissionAction.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(types.FormResubmissionAction, () => ({
    __proto__: dart.getGetters(types.FormResubmissionAction.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.FormResubmissionAction, I[22]);
  dart.setFieldSignature(types.FormResubmissionAction, () => ({
    __proto__: dart.getFields(types.FormResubmissionAction.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.FormResubmissionAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(types.FormResubmissionAction, ['hashCode']);
  dart.defineLazy(types.FormResubmissionAction, {
    /*types.FormResubmissionAction.RESEND*/get RESEND() {
      return C[181] || CT.C181;
    },
    /*types.FormResubmissionAction.DONT_RESEND*/get DONT_RESEND() {
      return C[182] || CT.C182;
    }
  }, true);
  const _value$36 = AndroidOverScrollMode__value;
  types.AndroidOverScrollMode = class AndroidOverScrollMode extends core.Object {
    get [_value]() {
      return this[_value$36];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidOverScrollMode.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidOverScrollModeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "OVER_SCROLL_IF_CONTENT_SCROLLS";
        }
        case 2:
        {
          return "OVER_SCROLL_NEVER";
        }
        case 0:
        default:
        {
          return "OVER_SCROLL_ALWAYS";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidOverScrollMode._internal = function(_value) {
    this[_value$36] = _value;
    ;
  }).prototype = types.AndroidOverScrollMode.prototype;
  dart.addTypeTests(types.AndroidOverScrollMode);
  dart.addTypeCaches(types.AndroidOverScrollMode);
  dart.setMethodSignature(types.AndroidOverScrollMode, () => ({
    __proto__: dart.getMethods(types.AndroidOverScrollMode.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidOverScrollMode, () => ({
    __proto__: dart.getGetters(types.AndroidOverScrollMode.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidOverScrollMode, I[22]);
  dart.setFieldSignature(types.AndroidOverScrollMode, () => ({
    __proto__: dart.getFields(types.AndroidOverScrollMode.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidOverScrollMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidOverScrollMode, ['hashCode']);
  dart.defineLazy(types.AndroidOverScrollMode, {
    /*types.AndroidOverScrollMode.values*/get values() {
      return T.JSArrayOfAndroidOverScrollModeL().of([types.AndroidOverScrollMode.OVER_SCROLL_ALWAYS, types.AndroidOverScrollMode.OVER_SCROLL_IF_CONTENT_SCROLLS, types.AndroidOverScrollMode.OVER_SCROLL_NEVER])[$toSet]();
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_ALWAYS*/get OVER_SCROLL_ALWAYS() {
      return C[183] || CT.C183;
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_IF_CONTENT_SCROLLS*/get OVER_SCROLL_IF_CONTENT_SCROLLS() {
      return C[36] || CT.C36;
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_NEVER*/get OVER_SCROLL_NEVER() {
      return C[184] || CT.C184;
    }
  }, true);
  const _value$37 = AndroidScrollBarStyle__value;
  types.AndroidScrollBarStyle = class AndroidScrollBarStyle extends core.Object {
    get [_value]() {
      return this[_value$37];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidScrollBarStyle.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidScrollBarStyleLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 16777216:
        {
          return "SCROLLBARS_INSIDE_INSET";
        }
        case 33554432:
        {
          return "SCROLLBARS_OUTSIDE_OVERLAY";
        }
        case 50331648:
        {
          return "SCROLLBARS_OUTSIDE_INSET";
        }
        case 0:
        default:
        {
          return "SCROLLBARS_INSIDE_OVERLAY";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidScrollBarStyle._internal = function(_value) {
    this[_value$37] = _value;
    ;
  }).prototype = types.AndroidScrollBarStyle.prototype;
  dart.addTypeTests(types.AndroidScrollBarStyle);
  dart.addTypeCaches(types.AndroidScrollBarStyle);
  dart.setMethodSignature(types.AndroidScrollBarStyle, () => ({
    __proto__: dart.getMethods(types.AndroidScrollBarStyle.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidScrollBarStyle, () => ({
    __proto__: dart.getGetters(types.AndroidScrollBarStyle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidScrollBarStyle, I[22]);
  dart.setFieldSignature(types.AndroidScrollBarStyle, () => ({
    __proto__: dart.getFields(types.AndroidScrollBarStyle.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidScrollBarStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidScrollBarStyle, ['hashCode']);
  dart.defineLazy(types.AndroidScrollBarStyle, {
    /*types.AndroidScrollBarStyle.values*/get values() {
      return T.JSArrayOfAndroidScrollBarStyleL().of([types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_OVERLAY, types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_INSET, types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_OVERLAY, types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_INSET])[$toSet]();
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_OVERLAY*/get SCROLLBARS_INSIDE_OVERLAY() {
      return C[37] || CT.C37;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_INSET*/get SCROLLBARS_INSIDE_INSET() {
      return C[185] || CT.C185;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_OVERLAY*/get SCROLLBARS_OUTSIDE_OVERLAY() {
      return C[186] || CT.C186;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_INSET*/get SCROLLBARS_OUTSIDE_INSET() {
      return C[187] || CT.C187;
    }
  }, true);
  const _value$38 = AndroidVerticalScrollbarPosition__value;
  types.AndroidVerticalScrollbarPosition = class AndroidVerticalScrollbarPosition extends core.Object {
    get [_value]() {
      return this[_value$38];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidVerticalScrollbarPosition.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidVerticalScrollbarPositionLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "SCROLLBAR_POSITION_LEFT";
        }
        case 2:
        {
          return "SCROLLBAR_POSITION_RIGHT";
        }
        case 0:
        default:
        {
          return "SCROLLBAR_POSITION_DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidVerticalScrollbarPosition._internal = function(_value) {
    this[_value$38] = _value;
    ;
  }).prototype = types.AndroidVerticalScrollbarPosition.prototype;
  dart.addTypeTests(types.AndroidVerticalScrollbarPosition);
  dart.addTypeCaches(types.AndroidVerticalScrollbarPosition);
  dart.setMethodSignature(types.AndroidVerticalScrollbarPosition, () => ({
    __proto__: dart.getMethods(types.AndroidVerticalScrollbarPosition.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidVerticalScrollbarPosition, () => ({
    __proto__: dart.getGetters(types.AndroidVerticalScrollbarPosition.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidVerticalScrollbarPosition, I[22]);
  dart.setFieldSignature(types.AndroidVerticalScrollbarPosition, () => ({
    __proto__: dart.getFields(types.AndroidVerticalScrollbarPosition.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidVerticalScrollbarPosition, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidVerticalScrollbarPosition, ['hashCode']);
  dart.defineLazy(types.AndroidVerticalScrollbarPosition, {
    /*types.AndroidVerticalScrollbarPosition.values*/get values() {
      return T.JSArrayOfAndroidVerticalScrollbarPositionL().of([types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_DEFAULT, types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_LEFT, types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_RIGHT])[$toSet]();
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_DEFAULT*/get SCROLLBAR_POSITION_DEFAULT() {
      return C[38] || CT.C38;
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_LEFT*/get SCROLLBAR_POSITION_LEFT() {
      return C[188] || CT.C188;
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_RIGHT*/get SCROLLBAR_POSITION_RIGHT() {
      return C[189] || CT.C189;
    }
  }, true);
  var versionName$ = dart.privateName(types, "AndroidWebViewPackageInfo.versionName");
  var packageName$0 = dart.privateName(types, "AndroidWebViewPackageInfo.packageName");
  types.AndroidWebViewPackageInfo = class AndroidWebViewPackageInfo extends core.Object {
    get versionName() {
      return this[versionName$];
    }
    set versionName(value) {
      this[versionName$] = value;
    }
    get packageName() {
      return this[packageName$0];
    }
    set packageName(value) {
      this[packageName$0] = value;
    }
    static fromMap(map) {
      return map != null ? new types.AndroidWebViewPackageInfo.new({versionName: T.StringL().as(map[$_get]("versionName")), packageName: T.StringL().as(map[$_get]("packageName"))}) : null;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["versionName", this.versionName, "packageName", this.packageName]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AndroidWebViewPackageInfo.new = function(opts) {
    let versionName = opts && 'versionName' in opts ? opts.versionName : null;
    let packageName = opts && 'packageName' in opts ? opts.packageName : null;
    this[versionName$] = versionName;
    this[packageName$0] = packageName;
    ;
  }).prototype = types.AndroidWebViewPackageInfo.prototype;
  dart.addTypeTests(types.AndroidWebViewPackageInfo);
  dart.addTypeCaches(types.AndroidWebViewPackageInfo);
  dart.setMethodSignature(types.AndroidWebViewPackageInfo, () => ({
    __proto__: dart.getMethods(types.AndroidWebViewPackageInfo.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.AndroidWebViewPackageInfo, I[22]);
  dart.setFieldSignature(types.AndroidWebViewPackageInfo, () => ({
    __proto__: dart.getFields(types.AndroidWebViewPackageInfo.__proto__),
    versionName: dart.fieldType(dart.legacy(core.String)),
    packageName: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.AndroidWebViewPackageInfo, ['toString']);
  var url$11 = dart.privateName(types, "RequestFocusNodeHrefResult.url");
  var title$1 = dart.privateName(types, "RequestFocusNodeHrefResult.title");
  var src$ = dart.privateName(types, "RequestFocusNodeHrefResult.src");
  types.RequestFocusNodeHrefResult = class RequestFocusNodeHrefResult extends core.Object {
    get url() {
      return this[url$11];
    }
    set url(value) {
      this[url$11] = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      this[title$1] = value;
    }
    get src() {
      return this[src$];
    }
    set src(value) {
      this[src$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url, "title", this.title, "src", this.src]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RequestFocusNodeHrefResult.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let src = opts && 'src' in opts ? opts.src : null;
    this[url$11] = url;
    this[title$1] = title;
    this[src$] = src;
    ;
  }).prototype = types.RequestFocusNodeHrefResult.prototype;
  dart.addTypeTests(types.RequestFocusNodeHrefResult);
  dart.addTypeCaches(types.RequestFocusNodeHrefResult);
  dart.setMethodSignature(types.RequestFocusNodeHrefResult, () => ({
    __proto__: dart.getMethods(types.RequestFocusNodeHrefResult.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.RequestFocusNodeHrefResult, I[22]);
  dart.setFieldSignature(types.RequestFocusNodeHrefResult, () => ({
    __proto__: dart.getFields(types.RequestFocusNodeHrefResult.__proto__),
    url: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    src: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.RequestFocusNodeHrefResult, ['toString']);
  var url$12 = dart.privateName(types, "RequestImageRefResult.url");
  types.RequestImageRefResult = class RequestImageRefResult extends core.Object {
    get url() {
      return this[url$12];
    }
    set url(value) {
      this[url$12] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["url", this.url]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RequestImageRefResult.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    this[url$12] = url;
    ;
  }).prototype = types.RequestImageRefResult.prototype;
  dart.addTypeTests(types.RequestImageRefResult);
  dart.addTypeCaches(types.RequestImageRefResult);
  dart.setMethodSignature(types.RequestImageRefResult, () => ({
    __proto__: dart.getMethods(types.RequestImageRefResult.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.RequestImageRefResult, I[22]);
  dart.setFieldSignature(types.RequestImageRefResult, () => ({
    __proto__: dart.getFields(types.RequestImageRefResult.__proto__),
    url: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.RequestImageRefResult, ['toString']);
  var name$2 = dart.privateName(types, "MetaTag.name");
  var content$ = dart.privateName(types, "MetaTag.content");
  var attrs$ = dart.privateName(types, "MetaTag.attrs");
  types.MetaTag = class MetaTag extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      this[name$2] = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      this[content$] = value;
    }
    get attrs() {
      return this[attrs$];
    }
    set attrs(value) {
      this[attrs$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["name", this.name, "content", this.content, "attrs", this.attrs]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.MetaTag.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let attrs = opts && 'attrs' in opts ? opts.attrs : null;
    this[name$2] = name;
    this[content$] = content;
    this[attrs$] = attrs;
    ;
  }).prototype = types.MetaTag.prototype;
  dart.addTypeTests(types.MetaTag);
  dart.addTypeCaches(types.MetaTag);
  dart.setMethodSignature(types.MetaTag, () => ({
    __proto__: dart.getMethods(types.MetaTag.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.MetaTag, I[22]);
  dart.setFieldSignature(types.MetaTag, () => ({
    __proto__: dart.getFields(types.MetaTag.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    content: dart.fieldType(dart.legacy(core.String)),
    attrs: dart.fieldType(dart.legacy(core.List$(dart.legacy(types.MetaTagAttribute))))
  }));
  dart.defineExtensionMethods(types.MetaTag, ['toString']);
  var name$3 = dart.privateName(types, "MetaTagAttribute.name");
  var value$3 = dart.privateName(types, "MetaTagAttribute.value");
  types.MetaTagAttribute = class MetaTagAttribute extends core.Object {
    get name() {
      return this[name$3];
    }
    set name(value) {
      this[name$3] = value;
    }
    get value() {
      return this[value$3];
    }
    set value(value) {
      this[value$3] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["name", this.name, "value", this.value]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.MetaTagAttribute.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[name$3] = name;
    this[value$3] = value;
    ;
  }).prototype = types.MetaTagAttribute.prototype;
  dart.addTypeTests(types.MetaTagAttribute);
  dart.addTypeCaches(types.MetaTagAttribute);
  dart.setMethodSignature(types.MetaTagAttribute, () => ({
    __proto__: dart.getMethods(types.MetaTagAttribute.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.MetaTagAttribute, I[22]);
  dart.setFieldSignature(types.MetaTagAttribute, () => ({
    __proto__: dart.getFields(types.MetaTagAttribute.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    value: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.MetaTagAttribute, ['toString']);
  var _value$39 = dart.privateName(types, "WebStorageType._value");
  types.WebStorageType = class WebStorageType extends core.Object {
    get [_value]() {
      return this[_value$39];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.WebStorageType.values[$firstWhere](dart.fn(element => element.toValue() == value, T.WebStorageTypeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.WebStorageType._internal = function(_value) {
    this[_value$39] = _value;
    ;
  }).prototype = types.WebStorageType.prototype;
  dart.addTypeTests(types.WebStorageType);
  dart.addTypeCaches(types.WebStorageType);
  dart.setMethodSignature(types.WebStorageType, () => ({
    __proto__: dart.getMethods(types.WebStorageType.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.WebStorageType, () => ({
    __proto__: dart.getGetters(types.WebStorageType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.WebStorageType, I[22]);
  dart.setFieldSignature(types.WebStorageType, () => ({
    __proto__: dart.getFields(types.WebStorageType.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.WebStorageType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.WebStorageType, ['hashCode']);
  dart.defineLazy(types.WebStorageType, {
    /*types.WebStorageType.values*/get values() {
      return T.JSArrayOfWebStorageTypeL().of([types.WebStorageType.LOCAL_STORAGE, types.WebStorageType.SESSION_STORAGE])[$toSet]();
    },
    /*types.WebStorageType.LOCAL_STORAGE*/get LOCAL_STORAGE() {
      return C[190] || CT.C190;
    },
    /*types.WebStorageType.SESSION_STORAGE*/get SESSION_STORAGE() {
      return C[191] || CT.C191;
    }
  }, true);
  var _value$40 = dart.privateName(types, "HTTPCookieSameSitePolicy._value");
  types.HTTPCookieSameSitePolicy = class HTTPCookieSameSitePolicy extends core.Object {
    get [_value]() {
      return this[_value$40];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.HTTPCookieSameSitePolicy.values[$firstWhere](dart.fn(element => element.toValue() == value, T.HTTPCookieSameSitePolicyLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      return this[_value];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.HTTPCookieSameSitePolicy._internal = function(_value) {
    this[_value$40] = _value;
    ;
  }).prototype = types.HTTPCookieSameSitePolicy.prototype;
  dart.addTypeTests(types.HTTPCookieSameSitePolicy);
  dart.addTypeCaches(types.HTTPCookieSameSitePolicy);
  dart.setMethodSignature(types.HTTPCookieSameSitePolicy, () => ({
    __proto__: dart.getMethods(types.HTTPCookieSameSitePolicy.__proto__),
    toValue: dart.fnType(dart.legacy(core.String), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.HTTPCookieSameSitePolicy, () => ({
    __proto__: dart.getGetters(types.HTTPCookieSameSitePolicy.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.HTTPCookieSameSitePolicy, I[22]);
  dart.setFieldSignature(types.HTTPCookieSameSitePolicy, () => ({
    __proto__: dart.getFields(types.HTTPCookieSameSitePolicy.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.HTTPCookieSameSitePolicy, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.HTTPCookieSameSitePolicy, ['hashCode']);
  dart.defineLazy(types.HTTPCookieSameSitePolicy, {
    /*types.HTTPCookieSameSitePolicy.values*/get values() {
      return T.JSArrayOfHTTPCookieSameSitePolicyL().of([types.HTTPCookieSameSitePolicy.LAX, types.HTTPCookieSameSitePolicy.STRICT, types.HTTPCookieSameSitePolicy.NONE])[$toSet]();
    },
    /*types.HTTPCookieSameSitePolicy.LAX*/get LAX() {
      return C[192] || CT.C192;
    },
    /*types.HTTPCookieSameSitePolicy.STRICT*/get STRICT() {
      return C[193] || CT.C193;
    },
    /*types.HTTPCookieSameSitePolicy.NONE*/get NONE() {
      return C[194] || CT.C194;
    }
  }, true);
  var _value$41 = dart.privateName(types, "AndroidSslError._value");
  types.AndroidSslError = class AndroidSslError extends core.Object {
    get [_value]() {
      return this[_value$41];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.AndroidSslError.values[$firstWhere](dart.fn(element => element.toValue() == value, T.AndroidSslErrorLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "SSL_EXPIRED";
        }
        case 2:
        {
          return "SSL_IDMISMATCH";
        }
        case 3:
        {
          return "SSL_UNTRUSTED";
        }
        case 4:
        {
          return "SSL_DATE_INVALID";
        }
        case 5:
        {
          return "SSL_INVALID";
        }
        case 0:
        default:
        {
          return "SSL_NOTYETVALID";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.AndroidSslError._internal = function(_value) {
    this[_value$41] = _value;
    ;
  }).prototype = types.AndroidSslError.prototype;
  dart.addTypeTests(types.AndroidSslError);
  dart.addTypeCaches(types.AndroidSslError);
  dart.setMethodSignature(types.AndroidSslError, () => ({
    __proto__: dart.getMethods(types.AndroidSslError.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.AndroidSslError, () => ({
    __proto__: dart.getGetters(types.AndroidSslError.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.AndroidSslError, I[22]);
  dart.setFieldSignature(types.AndroidSslError, () => ({
    __proto__: dart.getFields(types.AndroidSslError.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidSslError, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidSslError, ['hashCode']);
  dart.defineLazy(types.AndroidSslError, {
    /*types.AndroidSslError.values*/get values() {
      return T.JSArrayOfAndroidSslErrorL().of([types.AndroidSslError.SSL_NOTYETVALID, types.AndroidSslError.SSL_EXPIRED, types.AndroidSslError.SSL_IDMISMATCH, types.AndroidSslError.SSL_UNTRUSTED, types.AndroidSslError.SSL_DATE_INVALID, types.AndroidSslError.SSL_INVALID])[$toSet]();
    },
    /*types.AndroidSslError.SSL_NOTYETVALID*/get SSL_NOTYETVALID() {
      return C[195] || CT.C195;
    },
    /*types.AndroidSslError.SSL_EXPIRED*/get SSL_EXPIRED() {
      return C[196] || CT.C196;
    },
    /*types.AndroidSslError.SSL_IDMISMATCH*/get SSL_IDMISMATCH() {
      return C[197] || CT.C197;
    },
    /*types.AndroidSslError.SSL_UNTRUSTED*/get SSL_UNTRUSTED() {
      return C[198] || CT.C198;
    },
    /*types.AndroidSslError.SSL_DATE_INVALID*/get SSL_DATE_INVALID() {
      return C[199] || CT.C199;
    },
    /*types.AndroidSslError.SSL_INVALID*/get SSL_INVALID() {
      return C[200] || CT.C200;
    }
  }, true);
  var _value$42 = dart.privateName(types, "IOSSslError._value");
  types.IOSSslError = class IOSSslError extends core.Object {
    get [_value]() {
      return this[_value$42];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSSslError.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSSslErrorLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 3:
        {
          return "DENY";
        }
        case 4:
        {
          return "UNSPECIFIED";
        }
        case 5:
        {
          return "RECOVERABLE_TRUST_FAILURE";
        }
        case 6:
        {
          return "FATAL_TRUST_FAILURE";
        }
        case 7:
        {
          return "OTHER_ERROR";
        }
        case 0:
        default:
        {
          return "INVALID";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSSslError._internal = function(_value) {
    this[_value$42] = _value;
    ;
  }).prototype = types.IOSSslError.prototype;
  dart.addTypeTests(types.IOSSslError);
  dart.addTypeCaches(types.IOSSslError);
  dart.setMethodSignature(types.IOSSslError, () => ({
    __proto__: dart.getMethods(types.IOSSslError.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSSslError, () => ({
    __proto__: dart.getGetters(types.IOSSslError.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSSslError, I[22]);
  dart.setFieldSignature(types.IOSSslError, () => ({
    __proto__: dart.getFields(types.IOSSslError.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSSslError, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSSslError, ['hashCode']);
  dart.defineLazy(types.IOSSslError, {
    /*types.IOSSslError.values*/get values() {
      return T.JSArrayOfIOSSslErrorL().of([types.IOSSslError.INVALID, types.IOSSslError.DENY, types.IOSSslError.UNSPECIFIED, types.IOSSslError.RECOVERABLE_TRUST_FAILURE, types.IOSSslError.FATAL_TRUST_FAILURE, types.IOSSslError.OTHER_ERROR])[$toSet]();
    },
    /*types.IOSSslError.INVALID*/get INVALID() {
      return C[201] || CT.C201;
    },
    /*types.IOSSslError.DENY*/get DENY() {
      return C[202] || CT.C202;
    },
    /*types.IOSSslError.UNSPECIFIED*/get UNSPECIFIED() {
      return C[203] || CT.C203;
    },
    /*types.IOSSslError.RECOVERABLE_TRUST_FAILURE*/get RECOVERABLE_TRUST_FAILURE() {
      return C[204] || CT.C204;
    },
    /*types.IOSSslError.FATAL_TRUST_FAILURE*/get FATAL_TRUST_FAILURE() {
      return C[205] || CT.C205;
    },
    /*types.IOSSslError.OTHER_ERROR*/get OTHER_ERROR() {
      return C[206] || CT.C206;
    }
  }, true);
  const _value$43 = IOSUIScrollViewContentInsetAdjustmentBehavior__value;
  types.IOSUIScrollViewContentInsetAdjustmentBehavior = class IOSUIScrollViewContentInsetAdjustmentBehavior extends core.Object {
    get [_value]() {
      return this[_value$43];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static fromValue(value) {
      if (value != null) return types.IOSUIScrollViewContentInsetAdjustmentBehavior.values[$firstWhere](dart.fn(element => element.toValue() == value, T.IOSUIScrollViewContentInsetAdjustmentBehaviorLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
      return null;
    }
    toValue() {
      return this[_value];
    }
    toString() {
      switch (this[_value]) {
        case 1:
        {
          return "SCROLLABLE_AXES";
        }
        case 2:
        {
          return "NEVER";
        }
        case 3:
        {
          return "ALWAYS";
        }
        case 0:
        default:
        {
          return "AUTOMATIC";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[_value]);
    }
    get hashCode() {
      return dart.hashCode(this[_value]);
    }
  };
  (types.IOSUIScrollViewContentInsetAdjustmentBehavior._internal = function(_value) {
    this[_value$43] = _value;
    ;
  }).prototype = types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype;
  dart.addTypeTests(types.IOSUIScrollViewContentInsetAdjustmentBehavior);
  dart.addTypeCaches(types.IOSUIScrollViewContentInsetAdjustmentBehavior);
  dart.setMethodSignature(types.IOSUIScrollViewContentInsetAdjustmentBehavior, () => ({
    __proto__: dart.getMethods(types.IOSUIScrollViewContentInsetAdjustmentBehavior.__proto__),
    toValue: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(types.IOSUIScrollViewContentInsetAdjustmentBehavior, () => ({
    __proto__: dart.getGetters(types.IOSUIScrollViewContentInsetAdjustmentBehavior.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(types.IOSUIScrollViewContentInsetAdjustmentBehavior, I[22]);
  dart.setFieldSignature(types.IOSUIScrollViewContentInsetAdjustmentBehavior, () => ({
    __proto__: dart.getFields(types.IOSUIScrollViewContentInsetAdjustmentBehavior.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(types.IOSUIScrollViewContentInsetAdjustmentBehavior, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIScrollViewContentInsetAdjustmentBehavior, ['hashCode']);
  dart.defineLazy(types.IOSUIScrollViewContentInsetAdjustmentBehavior, {
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.values*/get values() {
      return T.JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehaviorL().of([types.IOSUIScrollViewContentInsetAdjustmentBehavior.AUTOMATIC, types.IOSUIScrollViewContentInsetAdjustmentBehavior.SCROLLABLE_AXES, types.IOSUIScrollViewContentInsetAdjustmentBehavior.NEVER, types.IOSUIScrollViewContentInsetAdjustmentBehavior.ALWAYS])[$toSet]();
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.AUTOMATIC*/get AUTOMATIC() {
      return C[207] || CT.C207;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.SCROLLABLE_AXES*/get SCROLLABLE_AXES() {
      return C[208] || CT.C208;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.NEVER*/get NEVER() {
      return C[43] || CT.C43;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.ALWAYS*/get ALWAYS() {
      return C[209] || CT.C209;
    }
  }, true);
  var issuedBy$ = dart.privateName(types, "SslCertificate.issuedBy");
  var issuedTo$ = dart.privateName(types, "SslCertificate.issuedTo");
  var validNotAfterDate$ = dart.privateName(types, "SslCertificate.validNotAfterDate");
  var validNotBeforeDate$ = dart.privateName(types, "SslCertificate.validNotBeforeDate");
  var x509Certificate$ = dart.privateName(types, "SslCertificate.x509Certificate");
  types.SslCertificate = class SslCertificate extends core.Object {
    get issuedBy() {
      return this[issuedBy$];
    }
    set issuedBy(value) {
      this[issuedBy$] = value;
    }
    get issuedTo() {
      return this[issuedTo$];
    }
    set issuedTo(value) {
      this[issuedTo$] = value;
    }
    get validNotAfterDate() {
      return this[validNotAfterDate$];
    }
    set validNotAfterDate(value) {
      this[validNotAfterDate$] = value;
    }
    get validNotBeforeDate() {
      return this[validNotBeforeDate$];
    }
    set validNotBeforeDate(value) {
      this[validNotBeforeDate$] = value;
    }
    get x509Certificate() {
      return this[x509Certificate$];
    }
    set x509Certificate(value) {
      this[x509Certificate$] = value;
    }
    static fromMap(map) {
      let t14, t14$;
      let x509Certificate = null;
      try {
        x509Certificate = x509_certificate.X509Certificate.fromData({data: T.Uint8ListL().as(map[$_get]("x509Certificate"))});
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stacktrace = dart.stackTrace(e$);
        core.print(e);
        core.print(stacktrace);
      }
      return map != null ? new types.SslCertificate.new({issuedBy: types.SslCertificateDName.fromMap(T.MapLOfStringL$dynamic().as((t14 = map[$_get]("issuedBy"), t14 == null ? null : dart.dgsend(t14, [T.StringL(), dart.dynamic], 'cast', [])))), issuedTo: types.SslCertificateDName.fromMap(T.MapLOfStringL$dynamic().as((t14$ = map[$_get]("issuedTo"), t14$ == null ? null : dart.dgsend(t14$, [T.StringL(), dart.dynamic], 'cast', [])))), validNotAfterDate: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(map[$_get]("validNotAfterDate"))), validNotBeforeDate: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(map[$_get]("validNotBeforeDate"))), x509Certificate: x509Certificate}) : null;
    }
    toMap() {
      let t14, t14$, t14$0;
      return new (T.IdentityMapOfStringL$dynamic()).from(["issuedBy", (t14 = this.issuedBy, t14 == null ? null : t14.toMap()), "issuedTo", (t14$ = this.issuedTo, t14$ == null ? null : t14$.toMap()), "validNotAfterDate", this.validNotAfterDate.millisecondsSinceEpoch, "validNotBeforeDate", this.validNotBeforeDate.millisecondsSinceEpoch, "x509Certificate", (t14$0 = this.x509Certificate, t14$0 == null ? null : t14$0.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SslCertificate.new = function(opts) {
    let issuedBy = opts && 'issuedBy' in opts ? opts.issuedBy : null;
    let issuedTo = opts && 'issuedTo' in opts ? opts.issuedTo : null;
    let validNotAfterDate = opts && 'validNotAfterDate' in opts ? opts.validNotAfterDate : null;
    let validNotBeforeDate = opts && 'validNotBeforeDate' in opts ? opts.validNotBeforeDate : null;
    let x509Certificate = opts && 'x509Certificate' in opts ? opts.x509Certificate : null;
    this[issuedBy$] = issuedBy;
    this[issuedTo$] = issuedTo;
    this[validNotAfterDate$] = validNotAfterDate;
    this[validNotBeforeDate$] = validNotBeforeDate;
    this[x509Certificate$] = x509Certificate;
    ;
  }).prototype = types.SslCertificate.prototype;
  dart.addTypeTests(types.SslCertificate);
  dart.addTypeCaches(types.SslCertificate);
  dart.setMethodSignature(types.SslCertificate, () => ({
    __proto__: dart.getMethods(types.SslCertificate.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.SslCertificate, I[22]);
  dart.setFieldSignature(types.SslCertificate, () => ({
    __proto__: dart.getFields(types.SslCertificate.__proto__),
    issuedBy: dart.fieldType(dart.legacy(types.SslCertificateDName)),
    issuedTo: dart.fieldType(dart.legacy(types.SslCertificateDName)),
    validNotAfterDate: dart.fieldType(dart.legacy(core.DateTime)),
    validNotBeforeDate: dart.fieldType(dart.legacy(core.DateTime)),
    x509Certificate: dart.fieldType(dart.legacy(x509_certificate.X509Certificate))
  }));
  dart.defineExtensionMethods(types.SslCertificate, ['toString']);
  var CName$ = dart.privateName(types, "SslCertificateDName.CName");
  var DName$ = dart.privateName(types, "SslCertificateDName.DName");
  var OName$ = dart.privateName(types, "SslCertificateDName.OName");
  var UName$ = dart.privateName(types, "SslCertificateDName.UName");
  types.SslCertificateDName = class SslCertificateDName extends core.Object {
    get CName() {
      return this[CName$];
    }
    set CName(value) {
      this[CName$] = value;
    }
    get DName() {
      return this[DName$];
    }
    set DName(value) {
      this[DName$] = value;
    }
    get OName() {
      return this[OName$];
    }
    set OName(value) {
      this[OName$] = value;
    }
    get UName() {
      return this[UName$];
    }
    set UName(value) {
      this[UName$] = value;
    }
    static fromMap(map) {
      let t14, t14$, t14$0, t14$1;
      return map != null ? new types.SslCertificateDName.new({CName: T.StringL().as((t14 = map[$_get]("CName"), t14 == null ? "" : t14)), DName: T.StringL().as((t14$ = map[$_get]("DName"), t14$ == null ? "" : t14$)), OName: T.StringL().as((t14$0 = map[$_get]("OName"), t14$0 == null ? "" : t14$0)), UName: T.StringL().as((t14$1 = map[$_get]("UName"), t14$1 == null ? "" : t14$1))}) : null;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["CName", this.CName, "DName", this.DName, "OName", this.OName, "UName", this.UName]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SslCertificateDName.new = function(opts) {
    let CName = opts && 'CName' in opts ? opts.CName : "";
    let DName = opts && 'DName' in opts ? opts.DName : "";
    let OName = opts && 'OName' in opts ? opts.OName : "";
    let UName = opts && 'UName' in opts ? opts.UName : "";
    this[CName$] = CName;
    this[DName$] = DName;
    this[OName$] = OName;
    this[UName$] = UName;
    ;
  }).prototype = types.SslCertificateDName.prototype;
  dart.addTypeTests(types.SslCertificateDName);
  dart.addTypeCaches(types.SslCertificateDName);
  dart.setMethodSignature(types.SslCertificateDName, () => ({
    __proto__: dart.getMethods(types.SslCertificateDName.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.SslCertificateDName, I[22]);
  dart.setFieldSignature(types.SslCertificateDName, () => ({
    __proto__: dart.getFields(types.SslCertificateDName.__proto__),
    CName: dart.fieldType(dart.legacy(core.String)),
    DName: dart.fieldType(dart.legacy(core.String)),
    OName: dart.fieldType(dart.legacy(core.String)),
    UName: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.SslCertificateDName, ['toString']);
  var realm$0 = dart.privateName(types, "LoginRequest.realm");
  var account$ = dart.privateName(types, "LoginRequest.account");
  var args$ = dart.privateName(types, "LoginRequest.args");
  types.LoginRequest = class LoginRequest extends core.Object {
    get realm() {
      return this[realm$0];
    }
    set realm(value) {
      this[realm$0] = value;
    }
    get account() {
      return this[account$];
    }
    set account(value) {
      this[account$] = value;
    }
    get args() {
      return this[args$];
    }
    set args(value) {
      this[args$] = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["realm", this.realm, "account", this.account, "args", this.args]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.LoginRequest.new = function(opts) {
    let realm = opts && 'realm' in opts ? opts.realm : null;
    let account = opts && 'account' in opts ? opts.account : null;
    let args = opts && 'args' in opts ? opts.args : null;
    this[realm$0] = realm;
    this[account$] = account;
    this[args$] = args;
    ;
  }).prototype = types.LoginRequest.prototype;
  dart.addTypeTests(types.LoginRequest);
  dart.addTypeCaches(types.LoginRequest);
  dart.setMethodSignature(types.LoginRequest, () => ({
    __proto__: dart.getMethods(types.LoginRequest.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(types.LoginRequest, I[22]);
  dart.setFieldSignature(types.LoginRequest, () => ({
    __proto__: dart.getFields(types.LoginRequest.__proto__),
    realm: dart.fieldType(dart.legacy(core.String)),
    account: dart.fieldType(dart.legacy(core.String)),
    args: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(types.LoginRequest, ['toString']);
  dart.defineLazy(types, {
    /*types.uuidGenerator*/get uuidGenerator() {
      return new uuid.Uuid.new();
    },
    set uuidGenerator(_) {}
  }, true);
  dart.trackLibraries("packages/flutter_inappwebview/src/web_storage_manager.dart", {
    "package:flutter_inappwebview/src/web_storage_manager.dart": web_storage_manager,
    "package:flutter_inappwebview/src/cookie_manager.dart": cookie_manager,
    "package:flutter_inappwebview/src/chrome_safari_browser.dart": chrome_safari_browser,
    "package:flutter_inappwebview/src/http_auth_credentials_database.dart": http_auth_credentials_database,
    "package:flutter_inappwebview/src/web_storage.dart": web_storage,
    "package:flutter_inappwebview/src/in_app_webview.dart": in_app_webview,
    "package:flutter_inappwebview/src/headless_in_app_webview.dart": headless_in_app_webview,
    "package:flutter_inappwebview/src/content_blocker.dart": content_blocker,
    "package:flutter_inappwebview/src/webview_options.dart": webview_options,
    "package:flutter_inappwebview/src/in_app_webview_controller.dart": in_app_webview_controller,
    "package:flutter_inappwebview/src/webview.dart": webview,
    "package:flutter_inappwebview/src/context_menu.dart": context_menu,
    "package:flutter_inappwebview/src/in_app_browser.dart": in_app_browser,
    "package:flutter_inappwebview/src/types.dart": types,
    "package:flutter_inappwebview/flutter_inappwebview.dart": flutter_inappwebview
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["web_storage_manager.dart","cookie_manager.dart","chrome_safari_browser.dart","http_auth_credentials_database.dart","web_storage.dart","in_app_webview.dart","headless_in_app_webview.dart","content_blocker.dart","webview_options.dart","in_app_webview_controller.dart","webview.dart","context_menu.dart","in_app_browser.dart","types.dart"],"names":[],"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CA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAzDC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC5pBlB;;;;;;IAGkB;;;;;;IAMlB;;;;;;IAGqB;;;;;;IAGG;;;;;;;;AAW1B,YAAO,8CACL,aAAa,AAAU,AAAqC,gDAAjC,QAAC;;AAAa,wBAAQ;+BAAR,OAAU;qEACnD,8CAAW,OAAS;IAExB;;AAGE,YAAO,AAAK;IACd;;AAIE,YAAe,eAAR;IACT;;;QArBU;QACD;QACA;QACA;QACA;IAJC;IACD;IACA;IACA;IACA;UACI,AAAU,SAAD;;EAAS;;;;;;;;;;;;;;;;;;;;;;;;;IAsB3B;;;;;;IAGG;;;;;;IAGA;;;;;;IAGI;;;;;;;AAST,YAAO,8CAAC,aAAa,gBAAW,SAAS,YAAO,SAAS;IAC3D;;AAGE,YAAO,AAAK;IACd;;AAIE,YAAe,eAAR;IACT;;;QAhBoB;QACD;QACA;QACV;IAHW;IACD;IACA;IACV;;EAAQ;;;;;;;;;;;;;;;;;;;;;IAmBZ;;;;;;;AAKH,YAAO,8CACL,qCAAqC;IAEzC;;AAGE,YAAO,AAAK;IACd;;AAIE,YAAe,eAAR;IACT;;;QAfyB;;;EAA2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","file":"../../../../../../../../packages/flutter_inappwebview/src/web_storage_manager.dart.lib.js"}');
  // Exports:
  return {
    src__web_storage_manager: web_storage_manager,
    src__cookie_manager: cookie_manager,
    src__chrome_safari_browser: chrome_safari_browser,
    src__http_auth_credentials_database: http_auth_credentials_database,
    src__web_storage: web_storage,
    src__in_app_webview: in_app_webview,
    src__headless_in_app_webview: headless_in_app_webview,
    src__content_blocker: content_blocker,
    src__webview_options: webview_options,
    src__in_app_webview_controller: in_app_webview_controller,
    src__webview: webview,
    src__context_menu: context_menu,
    src__in_app_browser: in_app_browser,
    src__types: types,
    flutter_inappwebview: flutter_inappwebview
  };
}));

//# sourceMappingURL=web_storage_manager.dart.lib.js.map
